<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 使用大全</title>
      <link href="/2099/12/06/hexo1/"/>
      <url>/2099/12/06/hexo1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.如何设置hexo首页只显示部分摘要而不是全部内容？</p></blockquote><h2 id="为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。"><a href="#为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。" class="headerlink" title="为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。"></a>为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。</h2><h2 id="实现的方法有两种："><a href="#实现的方法有两种：" class="headerlink" title="实现的方法有两种："></a>实现的方法有两种：</h2><h3 id="方法1：添加概述（description）-属性"><a href="#方法1：添加概述（description）-属性" class="headerlink" title="方法1：添加概述（description） 属性"></a>方法1：添加概述（description） 属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description:  为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。</span><br></pre></td></tr></table></figure><p>这种方法比较繁琐，因为这种情况下我们并不会花费太多的时间去写描述，由此会降低我们文章的质量。</p><h3 id="方法2：添加文章阶段特性"><a href="#方法2：添加文章阶段特性" class="headerlink" title="方法2：添加文章阶段特性"></a>方法2：添加文章阶段特性</h3><p>在我们需要隐藏内容的起始行添加以下内容即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>2.如何引入在线代码编辑工具codepen？</p></blockquote><h3 id="安装-codepen"><a href="#安装-codepen" class="headerlink" title="安装 codepen"></a>安装 codepen</h3><h2 id="npm-安装："><a href="#npm-安装：" class="headerlink" title="npm 安装："></a>npm 安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-codepen --save</span><br></pre></td></tr></table></figure><h2 id="yarn-安装："><a href="#yarn-安装：" class="headerlink" title="yarn 安装："></a>yarn 安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-codepen</span><br></pre></td></tr></table></figure><h3 id="md-语法结构"><a href="#md-语法结构" class="headerlink" title="md 语法结构"></a>md 语法结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125;</span><br></pre></td></tr></table></figure><p>userId：对应codepen官网注册的用户id（也可以是直接是github账号）<br>anonymous：data-slug-hash   对应codepen官网生成的示例id<br>theme：主题<br>defaultTab： 默认展示的tab，包括 html,css,result<br>height: 高<br>width： 宽<br>注意这里的宽默认百分之百，高没有默认；如果要修改宽高不要加一个%,否则有误。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen xuexiup dyegQKa dark [css,result  [265]] %&#125;</span><br></pre></td></tr></table></figure><h3 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h3><iframe id="cp_embed_dyegQKa" src="//codepen.io/xuexiup/embed/dyegQKa?height=[265]]&theme-id=dark&slug-hash=dyegQKa&default-tab=[css,result" scrolling="no" frameborder="no" height="[265]]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="对应可直接引用的html"><a href="#对应可直接引用的html" class="headerlink" title="对应可直接引用的html"></a>对应可直接引用的html</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=<span class="string">&quot;codepen&quot;</span> data-height=<span class="string">&quot;300&quot;</span> data-default-tab=<span class="string">&quot;html,result&quot;</span> data-slug-hash=<span class="string">&quot;dyegQKa&quot;</span> data-user=<span class="string">&quot;xuexiup&quot;</span> style=<span class="string">&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;</span>&gt;</span><br><span class="line">  &lt;span&gt;See the Pen &lt;a href=<span class="string">&quot;https://codepen.io/xuexiup/pen/dyegQKa&quot;</span>&gt;</span><br><span class="line">  Untitled&lt;/a&gt; by xuexiup (&lt;a href=<span class="string">&quot;https://codepen.io/xuexiup&quot;</span>&gt;@xuexiup&lt;/a&gt;)</span><br><span class="line">  on &lt;a href=<span class="string">&quot;https://codepen.io&quot;</span>&gt;CodePen&lt;/a&gt;.&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script async src=<span class="string">&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.如何设置hexo中主题Freemind的默认的顶部目录（）？</p></blockquote><p>在配置文件：themes\freemind_config.yml中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - title: Archives</span><br><span class="line">    url: archives</span><br><span class="line">    intro: <span class="string">&quot;All the articles.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-archive&quot;</span></span><br><span class="line">  - title: Categories</span><br><span class="line">    url: categories</span><br><span class="line">    intro: <span class="string">&quot;All the categories.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-folder&quot;</span></span><br><span class="line">  - title: Tags</span><br><span class="line">    url: tags</span><br><span class="line">    intro: <span class="string">&quot;All the tags.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-tags&quot;</span></span><br><span class="line">  - title: About</span><br><span class="line">    url: about</span><br><span class="line">    intro: <span class="string">&quot;About me.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-user&quot;</span></span><br></pre></td></tr></table></figure><p>按照对应格式配置即修改了顶部菜单内容。</p><blockquote><p>4.如何首页显示内容的条数？</p></blockquote><p>在配置文件：_config.yml中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  per_page: 5</span><br><span class="line">  order_by: -<span class="built_in">date</span></span><br></pre></td></tr></table></figure><p>per_page对应首页显示内容的条数，order_by 按照该属性排序。</p><blockquote><p>5.给文章添加评论功能？</p></blockquote><h2 id="这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）"><a href="#这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）" class="headerlink" title="这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）"></a>这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）</h2><h3 id="1-首先去来必力官网注册Livere账号"><a href="#1-首先去来必力官网注册Livere账号" class="headerlink" title="1.首先去来必力官网注册Livere账号"></a>1.首先去来必力官网注册Livere账号</h3><a href="https://livere.com/" title="" target="">官网传送门</a><h3 id="2-安装-社区版（一般网站）"><a href="#2-安装-社区版（一般网站）" class="headerlink" title="2.安装 社区版（一般网站）"></a>2.安装 社区版（一般网站）</h3><p>然后就会生成以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">----配置代码---</span><br><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;lv-container&quot;</span> data-id=<span class="string">&quot;city&quot;</span> data-uid=<span class="string">&quot;系统给你生成的LivereId&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   (<span class="keyword">function</span>(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (typeof LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="built_in">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span><br><span class="line">       j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, <span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">-------------------------------------</span><br></pre></td></tr></table></figure><h3 id="3-修改主题配置文件"><a href="#3-修改主题配置文件" class="headerlink" title="3.修改主题配置文件"></a>3.修改主题配置文件</h3><p>我的主题配置文件路径为：&#x2F;themes\freemind_config.yml</p><p>在最后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Livere评论系统 </span></span><br><span class="line">Livere:</span><br><span class="line">livere_uid: 系统给你生成的LivereId</span><br></pre></td></tr></table></figure><h3 id="4-在主题（theme-x2F-freemind-）中的-layout-x2F-partial-x2F-post-下新增-livere-ejs文件，内容如下："><a href="#4-在主题（theme-x2F-freemind-）中的-layout-x2F-partial-x2F-post-下新增-livere-ejs文件，内容如下：" class="headerlink" title="4.在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;post 下新增 livere.ejs文件，内容如下："></a>4.在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;post 下新增 livere.ejs文件，内容如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;lv-container&quot;</span> data-id=<span class="string">&quot;city&quot;</span> data-uid=<span class="string">&quot;&lt;%=theme.livere_uid%&gt;&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   (<span class="keyword">function</span>(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (typeof LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="built_in">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span><br><span class="line">       j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, <span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><h3 id="5-修改-article-ejs"><a href="#5-修改-article-ejs" class="headerlink" title="5.修改 article.ejs"></a>5.修改 article.ejs</h3><p>在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;article.ejs 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- comment --&gt;</span><br><span class="line">&lt;%- partial(<span class="string">&#x27;post/comment&#x27;</span>, &#123;page: item&#125;) %&gt;</span><br></pre></td></tr></table></figure><p>下添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">if</span> (theme.livere_uid) &#123; %&gt;</span><br><span class="line">&lt;%- partial(<span class="string">&#x27;post/livere&#x27;</span>) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="6-最后就是部署到github上"><a href="#6-最后就是部署到github上" class="headerlink" title="6.最后就是部署到github上"></a>6.最后就是部署到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>6.如何在 hexo 网站中引入图片</p></blockquote><h3 id="1-首先安装插件：hexo-renderer-marked"><a href="#1-首先安装插件：hexo-renderer-marked" class="headerlink" title="1.首先安装插件：hexo-renderer-marked"></a>1.首先安装插件：hexo-renderer-marked</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><h3 id="2-修改-config-yml配置文件"><a href="#2-修改-config-yml配置文件" class="headerlink" title="2.修改_config.yml配置文件"></a>2.修改_config.yml配置文件</h3><p>增加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br><span class="line">  </span><br></pre></td></tr></table></figure>  <h3 id="3-在项目根据路source文件夹下新建一个文件夹：img"><a href="#3-在项目根据路source文件夹下新建一个文件夹：img" class="headerlink" title="3.在项目根据路source文件夹下新建一个文件夹：img"></a>3.在项目根据路source文件夹下新建一个文件夹：img</h3><p>这个文件夹存图片资源；比如我这里放了一个theme.gif的动态图；</p><h3 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h3><h2 id="记住我的路径的使用方式相对路径（相对路径）；"><a href="#记住我的路径的使用方式相对路径（相对路径）；" class="headerlink" title="记住我的路径的使用方式相对路径（相对路径）；"></a>记住我的路径的使用方式相对路径（相对路径）；</h2><h2 id="以下这种引入图片的-方式也可以修改图片的样式。"><a href="#以下这种引入图片的-方式也可以修改图片的样式。" class="headerlink" title="以下这种引入图片的 方式也可以修改图片的样式。"></a>以下这种引入图片的 方式也可以修改图片的样式。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/img/theme.gif&quot;</span>&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure><blockquote><p>7.Hexo网站如何添加ico图标？</p></blockquote><h3 id="1-将图标放置在根目录：source-img-下"><a href="#1-将图标放置在根目录：source-img-下" class="headerlink" title="1.将图标放置在根目录：source\img 下"></a>1.将图标放置在根目录：source\img 下</h3><h3 id="2-修改根目录下-themes-freemind-layout-partial-head-ejs-内容"><a href="#2-修改根目录下-themes-freemind-layout-partial-head-ejs-内容" class="headerlink" title="2.修改根目录下 themes\freemind\layout_partial\head.ejs 内容"></a>2.修改根目录下 themes\freemind\layout_partial\head.ejs 内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.favicon)&#123; %&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/img/favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Freemind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winform常用知识大全</title>
      <link href="/2023/02/15/dotnet6/"/>
      <url>/2023/02/15/dotnet6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Winform的窗体之间的数据传递是开发的必备技术，下面介绍几种典型的传值方法</p></blockquote><h2 id="1、构造函数传值，但这种方法是单向的（推荐）"><a href="#1、构造函数传值，但这种方法是单向的（推荐）" class="headerlink" title="1、构造函数传值，但这种方法是单向的（推荐）"></a>1、构造函数传值，但这种方法是单向的（推荐）</h2><p>上代码，先传值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> private void button2_Click(objectsender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Form3 fr3 = new Form3(<span class="string">&quot;要传的值啊&quot;</span>);</span><br><span class="line">            fr3.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">接值，对了，这里需要重载一个Form3的构造函数，然后将拿到的值显示出来</span><br><span class="line"></span><br><span class="line"> public Form3(stringcanshu)</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            label1.Text =canshu;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2、静态变量传值（不推荐）"><a href="#2、静态变量传值（不推荐）" class="headerlink" title="2、静态变量传值（不推荐）"></a>2、静态变量传值（不推荐）</h2><p>可以将静态变量申明在你需要的地方，比如一个单独类，或者Form中，比如我们在这里申明在Form2中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static string xvalue;</span><br><span class="line">private void button2_Click(objectsender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            xvalue = <span class="string">&quot;要传的值啊xvalue&quot;</span>;</span><br><span class="line">            Form3 fr3 = newForm3();</span><br><span class="line">            fr3.ShowDialog();</span><br><span class="line">        &#125;</span><br><span class="line">```        </span><br><span class="line">先给赋值，然后在Form3中取值</span><br><span class="line">```bash</span><br><span class="line"> <span class="function"><span class="title">publicForm3</span></span>()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            label1.Text = Form2.xvalue;//Form2实际也是个class，直接取静态值即可，如果静态变量xvalue定义在其他类中，即将Form2替换即可            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="3、通过共有属性传值"><a href="#3、通过共有属性传值" class="headerlink" title="3、通过共有属性传值"></a>3、通过共有属性传值</h2><p>首先在要打开的Form中创建一个共有属性，然后在调用窗口赋值即可。比如下面Form2启动Form3，即给Form3的yvalue传值</p><p>（1）在Form3中定义共有属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public stringyvalue &#123;</span><br><span class="line">            get&#123;</span><br><span class="line">                returnlabel1.Text.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">            set&#123;</span><br><span class="line">                label1.Text =value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>（2）Form2中启动Form3，并传值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private void button2_Click(objectsender, EventArgs e)</span><br><span class="line">       &#123;           </span><br><span class="line">           Form3 fr3 = newForm3();</span><br><span class="line">           fr3.yvalue = &quot;要传的值啊&quot;;</span><br><span class="line">           fr3.ShowDialog();</span><br><span class="line">       &#125;        </span><br></pre></td></tr></table></figure> <h2 id="4、通过Owner属性传值"><a href="#4、通过Owner属性传值" class="headerlink" title="4、通过Owner属性传值"></a>4、通过Owner属性传值</h2><p>（1）在调用者Form2中申明一个公有变量，并赋值，设置需要启动的Form3的Owner</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public stringxvalue;</span><br><span class="line">       private void button2_Click(objectsender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           xvalue = &quot;Form2要传的值&quot;;</span><br><span class="line">           Form3 fr3 = newForm3();</span><br><span class="line">           fr3.Owner = this;</span><br><span class="line">           fr3.ShowDialog();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>     <p>（2）启动窗体Form3中取值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void Form3_Load(objectsender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           Form2 fr2 = (Form2)this.Owner;</span><br><span class="line">           label1.Text =fr2.xvalue;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>        <p>这种方法实际是将Form2传给了Form3，因此Form3可以取到Form2的所有公有变量和属性。</p><h2 id="5、委托传值（推荐）"><a href="#5、委托传值（推荐）" class="headerlink" title="5、委托传值（推荐）"></a>5、委托传值（推荐）</h2><p>委托传值主要用在子窗体给父窗体传值上，即上文的Form3给Form2传值</p><p>（1）先在Form3中申明委托</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">public delegate void PutHandler(stringtext);</span><br><span class="line">       public PutHandler putTextHandler;//委托对象</span><br><span class="line">       private void button1_Click(objectsender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           if (putTextHandler != null)</span><br><span class="line">           &#123;</span><br><span class="line">               putTextHandler(textBox1.Text.ToString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>        <p>（2）在Form2中绑定委托事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">public void getValue(stringstrV)</span><br><span class="line">         &#123;</span><br><span class="line">            this.textBox1.Text =strV;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">       private void button1_Click(objectsender, EventArgs e)</span><br><span class="line">       &#123;</span><br><span class="line">           Form3 fr3 = newForm3();</span><br><span class="line">           fr3.putTextHandler =getValue;</span><br><span class="line">           fr3.ShowDialog();          </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>   ]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> winform </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端系列问题</title>
      <link href="/2023/02/09/html0/"/>
      <url>/2023/02/09/html0/</url>
      
        <content type="html"><![CDATA[<h3 id="typescript跟es6有什么区别？"><a href="#typescript跟es6有什么区别？" class="headerlink" title="typescript跟es6有什么区别？"></a>typescript跟es6有什么区别？</h3><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p><p>TypeScript扩展了JavaScript的语法，所以任何现有的JavaScript程序可以不加改变的在TypeScript下工作。TypeScript是为大型应用之开发而设计，而编译时它产生 JavaScript 以确保兼容性。</p><p>TypeScript 支持为已存在的 JavaScript 库添加类型信息的头文件，扩展了它对于流行的库如 jQuery，MongoDB，Node.js和 D3.js 的好处。</p><p>TypeScript 的历史</p><p>Anders Hejlsberg开发了 TypeScript。它于2012 年 10 月 1 日首次向公众推出。经过微软内部两年的开发，2013 年发布了新版 TypeScript 0.9。2019 年 4 月 24 日发布了TypeScript 3.4.5。</p><span id="more"></span><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>ECMAScript (ES) 是由ECMA 国际标准化的脚本语言规范。它的创建是为了标准化 JavaScript。ES 脚本语言包含许多实现，其中最流行的是JavaScript。开发人员主要将ECMAScript用于万维网 (WWW)的客户端脚本。</p><p>ECMAScript 标准的第六版是 ECMAScript6 或 ES6，后来更名为ECMAScript 2015。它是对 JavaScript 语言的重大增强，它允许我们为复杂的应用程序编写程序。它添加了许多旨在简化大规模软件开发的功能。最常见的 ES6 网络浏览器是Chrome和Firefox。转译器将基于 ES6 的代码转换为支持许多浏览器的ES5 。TypeScript 是一个转译器。Grunt、Gulp 和 Babel 是编译模块的其他一些转译器。因此，TypeScript 支持 ES6。</p><p>历史</p><p>JavaScript 于 1995 年5 月由Brendan Eich引入。它最初被称为Mocha，由Netscape创始人Marc Andreessen选择，后来更名为LiveScript。与此同时，Sun Microsystems拥有 JavaScript 的商标。1995年12 月，Netscape 获得了商标许可，并将其更名为 JavaScript。</p><p>在1996 年到1997 年间，Netscape 将 JavaScript 带到了 ECMA 标准组织，以维护该语言的规范。1997年6 月，创建了 ECMA 技术委员会 39 (TC39) 以继续发展该语言，最终发布了ECMA-262 Ed.1。</p><p>JavaScript 的第一个标准版本是 ECMAScript 1，于 1997 年6 月发布。一年后，ECMAScript 2 发布了，它只包含了一些小的更改，以保持 JavaScript 的并行 ISO 标准。1999年12 月，ECMAScript 3 发布，引入了 JavaScript 的很多流行特性。2009年12 月，ECMAScript 或 ES6 发布，随后更名为 ECMAScript 2015。</p><h3 id="TypeScript和ES6的区别"><a href="#TypeScript和ES6的区别" class="headerlink" title="TypeScript和ES6的区别"></a>TypeScript和ES6的区别</h3><blockquote><p>1、原始数据类型</p><p>TypeScript支持所有原始数据类型，ES6不支持所有数据类型。</p><p>2、变量作用域</p><p>TypeScript有3个作用域：全局作用域、类作用域、局部作用域。</p><p>ES6有2个作用域：全局作用域、局部作用域。</p><p>3、模块</p><p>在TypeScript中，模块有两种类型：内部和外部模块</p><p>在ES6中，模块分为导入模块和导出模块。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass的常见问题点</title>
      <link href="/2023/02/09/html11/"/>
      <url>/2023/02/09/html11/</url>
      
        <content type="html"><![CDATA[<p>1)定义SASS？<br>SASS表示语法很棒的样式表。它是一个CSS预处理程序, 用于减少与CSS的重复并节省时间。它为基本语言增添了力量和优雅, 并帮助你添加变量, 嵌套规则, mixin, 内联导入, 继承等, 所有这些都具有与CSS完全兼容的语法。<br>面试必备！常见SASS面试题合集</p><p>2)谁是SASS的发明者？<br>Hampton Catlin被称为SASS的父亲。</p><p>3)使用SASS的原因是什么？<br>以下是SASS受欢迎的一些重要原因。<br>你可以轻松高效地编写代码, 并且易于维护。<br>它是一种预处理语言, 提供了CSS语法。<br>它是CSS的超集, 包含CSS的所有功能, 并且是用Ruby编码的开源预处理器。<br>它是更稳定, 功能更强大的CSS扩展和样式文档, 结构更清晰。<br>它促进了可重用性方法, 逻辑语句以及一些内置功能, 例如颜色处理, 数学和参数列表项。</p><span id="more"></span><p>4)我们可以使用SASS多少种方法？<br>我们可以通过三种不同的方式使用SASS：<br>作为命令行工具。<br>作为独立的Ruby模块。<br>作为任何启用了Rack的框架的插件。</p><p>5)SASS最吸引人的功能是什么？<br>它更加稳定, 强大并且完全兼容CSS3。<br>这样可以节省时间, 因为它可以帮助你以更少的代码编写CSS。<br>它使用其语法。<br>它基于JavaScript和CSS的超集。<br>它是一个开放源代码的预处理程序, 可以解释为CSS。<br>它包含用于操纵颜色和其他值的各种功能。<br>它具有用于库的高级控制指令。<br>它提供格式良好, 可自定义的输出。<br>6)Sass脚本支持哪些数据类型？<br>Sass脚本支持以下数据类型：<br>布尔值(对或错)<br>数(1、5、13、10像素)<br>空值<br>颜色(红色, ＃FF0000)<br>文本字符串, 不带引号(” foo” , ” bar” )<br>用逗号或空格分隔的值列表(2.0em, Verdana, Arial, Helvetica)<br>从一个值映射到另一个值(键1：值1, 键2：值2)<br>功能参考。<br>SASS始终支持所有其他类型的CSS属性值, 例如Unicode范围, 特殊字符和不带引号的字符串。<br>7)哪个变量用于定义SASS？<br>变量以美元($)符号开头, 并且变量的分配以分号(; )符号完成。<br>8)解释SCSS和Sass之间的区别？<br>SCSS和Sass之间的主要区别如下：<br>Sass就像CSS预处理器。它具有CSS3的扩展名。 Sass源自另一个称为Haml的预处理器。<br>Sass包含两种语法：<br>” SCSS” 是第一种语法, 它使用.scss扩展名。<br>缩进语法或” Sass” 是另一种语法, 它使用.sass扩展名<br>你只需将扩展名从.CSS更改为.SCSS, 即可将有效的CSS文档隐藏到Sass中。它与CSS完全兼容。 SCSS提供CSS友好的语法来缩小Sass与CSS之间的差距。 SCSS称为Sassy CSS。<br>9)解释使用Sass @import函数吗？<br>它有助于你扩展CSS导入规则。为此, 你需要启用Sass和SCSS文件的导入。<br>它可以将所有导入的文件合并到一个输出的CSS文件中。<br>它用于虚拟匹配和混合任何文件。<br>需要导入文件名才能导入功能。<br>它比平面CSS更好地提供文档样式表示。<br>它可以帮助你使响应式设计项目更加有条理。<br>10)Sass的优点是什么？<br>节省时间。<br>更高效, 更快捷。<br>与所有版本的CSS兼容。<br>你可以使用嵌套语法和有用的功能, 例如颜色处理, 数学和其他值。<br>在编程结构中编写干净的CSS<br>它是CSS的超集, 并使用nested和others值。<br>11)Sass中的嵌套规则是什么？<br>嵌套是一种将多个逻辑结构相互组合的方法。在Sass中, 各种CSS规则相互连接。<br>例如, 如果使用多个选择器, 则可以在另一个选择器内部使用一个选择器来创建复合选择器。<br>12)Sass或Less是哪个更好？<br>由于以下原因, Sass胜于少：<br>Sass提供了使用诸如循环, 条件之类的逻辑语句的便利, 还方便你编写可重用的方法。<br>Sass的用户可以访问公司的图书馆。 Sass用户还可以使用一些很棒的功能, 例如跨浏览器支持, 旧版浏览器黑客和动态Sprite Map生成。<br>Compass还提供了添加外部框架(如最上方的Bootstrap, Blueprint)的功能。<br>Sass为你提供方便的功能编写工具<br>13)用Sass编写占位符选择器的方式是什么？<br>在Sass中, 占位符选择器可以与类或id选择器一起使用。在标准CSS中, 这些用” ＃” 或” 。” 指定, 但是在SASS中, 它们用” ％” 替换。它使用@extend指令在CSS中显示结果。例如：<br>.para1 { color: blue; } .para2 { @extend .para1; font-size:30px; }</p><p>14)Sass中的数字运算是什么？<br>在Sass中, 数字运算用于数学运算, 例如加, 减, 乘和除。 Sass数字运算将执行类似的操作, 例如获取像素值并将其转换为百分比, 而不会带来很多麻烦。<br>15)Sass中的颜色操作是什么？<br>在Sass中, 颜色运算允许使用颜色。在Sass中, 颜色运算允许同时使用颜色分量和算术运算。<br>16)我们如何在Sass中执行布尔运算？<br>布尔运算可以通过使用＆, ＆和not运算符在Sass脚本上执行。<br>17)Sass中的括号是什么？<br>括号用于提供影响操作顺序的符号逻辑。它是一对标记, 通常用圆括号()或方括号[]标记。<br>18)定义使用Sass Mixin函数吗？<br>Mixin函数用于定义样式。函数和Mixins非常相似。你可以在整个样式表中重复使用此样式。要重新使用它, 你不需要使用非语义类, 例如.float-left。 Mixin可以存储多个值或参数, 并可以调用函数以避免编写重复代码。它的名称可以互换使用下划线和连字符。<br>19)在Sass中干混出Mixin函数有什么用？<br>DDRY输出Mixin函数分为两个部分：静态部分和动态部分。<br>静态Mixin包含可能会重复的信息, 而动态Mixin是用户要调用的功能。<br>20)描述Sass注释和常规CSS注释之间的区别？<br>常规CSS中的注释以&#x2F; * * &#x2F;开头, 而Sass包含两个命令。带有&#x2F;&#x2F;的单行注释和带有&#x2F; * * &#x2F;的多个CSS注释。<br>21)哪个指令用于检测SASS中的错误？<br>Sass @debug指令用于检测错误, 并向标准错误输出流显示Sass脚本表达式值。例如：<br>$font-sizes: 10px + 20px; $style: ( color: #bdc3c7 ); .container{ @debug $style; @debug $font-sizes; }</p><p>22)SASS系统有哪些要求？<br>这些是Sass系统的要求：<br>.Operating System - Cross platform .Browser support - Internet Explorer, Google Chrome, Safari, Opera. .Programming language - Ruby.</p><p>23)SASS中@extend指令的用途是什么？<br>SASS @extend指令用于将一组CSS属性从一个选择器共享到另一个选择器。这是Sass的非常重要和有用的功能。它允许类彼此共享一组属性。它使你的代码更少, 并方便你重复重写。例如：<br>.message border: 1px solid #ccc padding: 10px color: #333 .success @extend .message border-color: green .error @extend .message border-color: red .warning @extend .message border-color: yellow</p><p>24)@media指令在SASS中的作用是什么？<br>Sass @media指令用于将样式规则设置为不同的媒体类型。它支持并扩展@media规则。该指令可以嵌套在选择器SASS中, 但是主要影响显示在样式表的顶层。例如：-<br>h2{ color: violet; } .style{ width: 500px; @media screen and (orientation: portrait){ width:200px; margin-left: 80px; } }</p><p>25)SASS中根目录指令的用途是什么？<br>Sass @ at-root伪指令是嵌套规则的集合, 这些规则用于在文档根目录处设置样式。例如：-<br>h2{ color: blue; background-color: pink; @at-root { .style{ font-size: 20px; font-style: bold; color: violet; } } }</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 和 express的区别</title>
      <link href="/2023/02/09/vue29/"/>
      <url>/2023/02/09/vue29/</url>
      
        <content type="html"><![CDATA[<blockquote><p>axios是工作在前端，向后端提出申请，等待返回数据的。<br>express，是工作在后端(node环境)，接受前端发出的请求，处理会返回数据的。二者是合作关系。<br>express不只是接收axios的请求，还可以接收其他请求，可以返回HTML，JSON，文件，图片等。<br>express不是用来做请求的~<br>作为node的一个框架，主要作用是开启一个web服务（监听请求的），所以它有路由<br>axios 被用来发送请求（你说的做请求~）<br>它们之间关系可以是  (axios 发送请求)(express 响应请求)<br>当然 express 作为一个框架，也是可以使用 axios 的，用于请求其他web服务<br>这个内部的实现就是 node 的 http&#x2F;https 模块的 request方法</p></blockquote><span id="more"></span><p>1).什么是 Express？</p><blockquote><p>官方给出的概念：Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架。 通俗的理解：Express 的作用和 Node.js 内置的 http 模块类似，是专门用来创建 Web 服务器的。 Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法。<br>Express 的中文官网： <a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></p></blockquote><p>2).进一步理解 Express？</p><blockquote><p>思考：不使用 Express 能否创建 Web 服务器？<br>答案：能，使用 Node.js 提供的原生 http 模块即可。<br>思考：既生瑜何生亮（有了 http 内置模块，为什么还有用 Express）？<br>答案：http 内置模块用起来很复杂，开发效率低；Express 是基于内置的 http 模块进一步封装出来的，能够极大的提高开发效率。<br>思考：http 内置模块与 Express 是什么关系？<br>答案：类似于浏览器中 Web API 和 jQuery 的关系。后者是基于前者进一步封装出来的。</p></blockquote><p>3).Express 能做什么？</p><blockquote><p>对于前端程序员来说，最常见的两种服务器，分别是：<br>Web 网站服务器：专门对外提供 Web 网页资源的服务器。<br>API 接口服务器：专门对外提供 API 接口的服务器。<br>使用 Express，我们可以方便、快速的创建 Web 网站的服务器或 API 接口的服务器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sass的优缺点优点</title>
      <link href="/2023/02/09/html10/"/>
      <url>/2023/02/09/html10/</url>
      
        <content type="html"><![CDATA[<p>优点：<br>Sass可以帮助您在编程结构中编写简洁，简单且更少的CSS。<br>1）它包含的代码更少，因此您可以更快地编写CSS。<br>2）它是CSS的扩展，因此更加稳定，功能强大和美观。因此，设计人员和开发人员可以更轻松，更高效地进行工作。<br>3）它与所有版本的CSS兼容。因此，您可以使用任何可用的CSS库。<br>4）它提供了嵌套功能，因此您可以使用嵌套语法和有用的函数，例如颜色处理，数学函数和其他值。</p><p>缺点：<br>1）开发人员必须有足够的时间来学习此预处理器中存在的新功能，然后才能使用它。<br>2）使用Sass可能会失去浏览器内置元素检查器的优势。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Core常用知识大全</title>
      <link href="/2023/02/08/dotnet5/"/>
      <url>/2023/02/08/dotnet5/</url>
      
        <content type="html"><![CDATA[<h3 id="Net-Core过滤器分类"><a href="#Net-Core过滤器分类" class="headerlink" title=".Net Core过滤器分类"></a>.Net Core过滤器分类</h3><p>过滤器与中间件很相似，能够在某些功能前后执行，由此而形成一个管道</p><p>ASP.NET Core MVC 提供了5种类型的过滤器</p><blockquote><p>AuthorizationFilter：最先执行，用于判断用户是否授权如果未授权直接结束当前请求<br>ResourceFilter：在Authorization后执行，可以用来对请求判断是否执行Action<br>ActionFilter:在Action执行的前后执行，与Resource不同的是，它在模型绑定之后执行。<br>ExceptionFilter：用于捕获异常<br>ResultFilter:在最后执行，可以控制Action执行的结果</p></blockquote><p>以上五种类型过滤器的工作顺序</p><span id="more"></span><blockquote><p>graph TD<br>A[中间件] –&gt; B[AuthorizationFilter]<br>B –&gt; C[ResourceFilter]<br>C –&gt; D[ExceptionFilter]<br>D –&gt; F[模型绑定]<br>F –&gt; G[ActionFilter]<br>G –&gt; H[Action]<br>H –&gt; I[ActionFilter]<br>I –&gt; L[ResultAction]</p></blockquote><h3 id="如何在controller中注入service"><a href="#如何在controller中注入service" class="headerlink" title="如何在controller中注入service?"></a>如何在controller中注入service?</h3><p>在config services方法中配置这个service。<br>在controller的构造函数中，添加这个依赖注入。</p><h3 id="谈一谈对DDD的理解"><a href="#谈一谈对DDD的理解" class="headerlink" title="谈一谈对DDD的理解?"></a>谈一谈对DDD的理解?</h3><p>DDD，领域驱动设计。就是通过领域来指导软件设计，是一种十分抽象的软件设计思想，它主要分为战略设计和战术设计</p><p>战略方面，通过事件风暴进行领域模型的划分，划分出核心域，子域，支撑域，定义通用语言，划分出界限上下文。</p><p>在战术设计方面，ddd将架构分层，“松耦合，高内聚”是架构设计的整体思想。按照DDD思想，可以分为领域层，基础设施层，应用层，接口层。</p><p>接口层为前端用户提供api接口。基础设施层可以放一些第三方的服务，数据库连接等内容。应用层是对领域服务的编排，是很薄的一层（目前我自己的架构，应用的是cqrs，所有的相关逻辑都是放在了应用层，而领域层只是放了实体，因为暂时还不是特别理解领域层的服务和事件都应该写什么）。领域层包括实体，值对象，聚合根，领域服务，领域事件等内容。</p><h3 id="ASP-NET-Core-比-ASP-NET-更具优势的地方是什么？"><a href="#ASP-NET-Core-比-ASP-NET-更具优势的地方是什么？" class="headerlink" title="ASP.NET Core 比 ASP.NET 更具优势的地方是什么？"></a>ASP.NET Core 比 ASP.NET 更具优势的地方是什么？</h3><p>跨平台，ASP.NET Core 可以运行在 Windows 、Linux 和 MAC 系统上；<br>对框架安装没有依赖，所有依赖都跟程序本身在一起；<br>ASP.NET Core 处理请求的效率更高，进而可以处理更多的请求；<br>ASP.NET Core 具有更多的安装配置方法。</p><h3 id="asp-net-core-主要的特性有哪些？"><a href="#asp-net-core-主要的特性有哪些？" class="headerlink" title="asp.net core 主要的特性有哪些？"></a>asp.net core 主要的特性有哪些？</h3><p>1）依赖注入</p><p>2）日志系统架构</p><p>3）引入了一个跨平台的网络服务器，kestrel。可以没有iis, apache和nginx就可以单独运行</p><p>4）可以使用命令行创建应用</p><p>5）使用AppSettings.json 来配置工程</p><p>6）使用start up来注册服务</p><p>7）更好的支持异步编程</p><p>8）支持web socket和signal IR</p><p>9）对于跨网站的请求的预防和保护机制</p><h3 id="ASP-NET-Core-Filter如何支持依赖注入"><a href="#ASP-NET-Core-Filter如何支持依赖注入" class="headerlink" title="ASP.NET Core Filter如何支持依赖注入?"></a>ASP.NET Core Filter如何支持依赖注入?</h3><p>可以通过全局注册，支持依赖注入</p><p>通过TypeFilter(typeof(Filter)) 标记在方法，标记在控制器</p><p>通过ServiceType(typeof(Filter))标记在方法，标记在控制器，必须要注册Filter这类；</p><p>TypeFilter和ServiceType的本质是实现了一个IFilterFactory接口；</p><h3 id="Asp-Net-Core中有哪些异常处理的方案？"><a href="#Asp-Net-Core中有哪些异常处理的方案？" class="headerlink" title="Asp.Net Core中有哪些异常处理的方案？"></a>Asp.Net Core中有哪些异常处理的方案？</h3><p>1.继承Controller，重写OnActionExecuted</p><p>默认都会继承一个Controller类，重写OnActionExecuted，添加上异常处理即可。一般情况下我们会新建一个BaseController, 让所有Controller继承BaseController。代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class BaseController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    public override void OnActionExecuted(ActionExecutedContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        var exception = context.Exception;</span><br><span class="line">        <span class="keyword">if</span> (exception != null)</span><br><span class="line">        &#123;</span><br><span class="line">            context.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">            context.Result = new ContentResult</span><br><span class="line">            &#123;</span><br><span class="line">                Content = $<span class="string">&quot;BaseController错误 : &#123; exception.Message &#125;&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        base.OnActionExecuted(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用 ActionFilterAttribute。</p><p>ActionFilterAttribute是一个特性，本身实现了 IActionFilter 及 IResultFilter , 所以不管是action里抛错，还是view里抛错，理论上都可以捕获。我们新建一个 ExceptionActionFilterAttribute, 重写 OnActionExecuted及OnResultExecuted，添加上异常处理，完整代码如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class ExceptionActionFilterAttribute:ActionFilterAttribute</span><br><span class="line">&#123;</span><br><span class="line">    public override void OnActionExecuted(ActionExecutedContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        var exception = context.Exception;</span><br><span class="line">        <span class="keyword">if</span> (exception != null)</span><br><span class="line">        &#123;</span><br><span class="line">            context.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">            context.Result = new ContentResult</span><br><span class="line">            &#123;</span><br><span class="line">                Content = $<span class="string">&quot;错误 : &#123; exception.Message &#125;&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        base.OnActionExecuted(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnResultExecuted(ResultExecutedContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        var exception = context.Exception;</span><br><span class="line">        <span class="keyword">if</span> (exception != null)</span><br><span class="line">        &#123;</span><br><span class="line">            context.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">            context.HttpContext.Response.WriteAsync($<span class="string">&quot;错误 : &#123;exception.Message&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        base.OnResultExecuted(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式有两种， 在controller里打上 [TypeFilter(typeof(ExceptionActionFilter)] 标签;</p><p>在Startup里以filter方式全局注入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddControllersWithViews(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.Filters.Add&lt;ExceptionActionFilterAttribute&gt;();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.使用 IExceptionFilter 我们知道, <a href="http://asp.net/">http://Asp.Net</a> Core提供了5类filter, IExceptionFilter是其中之一，顾名思义，这就是用来处理异常的。<a href="http://asp.net/">http://Asp.net</a> Core中ExceptionFilterAttribute已经实现了IExceptionFilter，所以我们只需继承ExceptionFilterAttribute，重写其中方法即可。 同样新建CustomExceptionFilterAttribute继承 ExceptionFilterAttribute，重写 OnException ，添加异常处理，完整代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class CustomExceptionFilterAttribute : ExceptionFilterAttribute</span><br><span class="line">&#123;</span><br><span class="line">    public override void OnException(ExceptionContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        context.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">        context.HttpContext.Response.WriteAsync($<span class="string">&quot;CustomExceptionFilterAttribute错误:&#123;context.Exception.Message&#125;&quot;</span>);</span><br><span class="line">        base.OnException(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用ExceptionHandler.</p><p>在 startup 里，vs新建的项目会默认加上.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseDeveloperExceptionPage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.自定义Middleare处理</p><p>通过middleware全局处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ErrorHandlingMiddleware</span><br><span class="line">&#123;</span><br><span class="line">   private <span class="built_in">readonly</span> RequestDelegate next;</span><br><span class="line"></span><br><span class="line">   public ErrorHandlingMiddleware(RequestDelegate next)</span><br><span class="line">   &#123;</span><br><span class="line">        this.next = next;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public async Task Invoke(HttpContext context)</span><br><span class="line">   &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">           await next(context);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (System.Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">           //处理异常</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="介绍ASP-NET-Core中服务的生命周期？"><a href="#介绍ASP-NET-Core中服务的生命周期？" class="headerlink" title="介绍ASP.NET Core中服务的生命周期？"></a>介绍ASP.NET Core中服务的生命周期？</h3><p>ASP.NET Core支持依赖注入软件设计模式，它允许在不同的组件中注入我们的服务，并且控制服务的初始化。有些服务可以在短时间内初始化，并且只能在某个特别的组件，以及请求中才能用到；而还有一些服务，仅仅只用初始化一次，就可以在整个应用程序中使用。</p><p>Singleton –单例模式：</p><p>只有一个服务的实例被创建，这个实例，存储在内存中，可以在整个应用程序中使用。我们可以对一些初始化代价比较大的服务，使用Singleton模式。在代码中可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IProductService, ProductService&gt;();</span><br></pre></td></tr></table></figure><p>Scoped –作用域</p><p>这种模式下，将会为每一个请求，都创建一个服务的实例。所有同一个请求中的中间件、MVC控制器，等等，都会得到一个相同的服务实例。Entity Framework Context就是一个Scoped服务最好的参考例子。我们可以通过使用AddScoped方法来使用Scoped模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;IProductService, ProductService&gt;();</span><br></pre></td></tr></table></figure><p>Transient –短暂的、瞬变的　　 Transient模式下，服务每次被请求的时候，都会创建一个服务实例，这种模式特别适合轻量级、无状态的服务。我们可以使用AddTransient方法，来注入服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IProductService, ProductService&gt;();</span><br></pre></td></tr></table></figure><h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>依赖注入是一个过程，就是当一个类需要调用另一个类来完成某项任务的时候，在调用类里面不要去new被调用的类的对象，而是通过注入的方式来获取这样一个对象。具体的实现就是在调用类里面有一个被调用类的接口，然后通过调用接口的函数来完成任务。比如A调用B，而B实现了接口C，那么在A里面用C定义一个变量D，这个变量的实例不在A里面创建，而是通过A的上下文来获取。这样做的好处就是将类A和B分开了，他们之间靠接口C来联系，从而实现对接口编程。</p><h3 id="依赖注入有哪几种方式？"><a href="#依赖注入有哪几种方式？" class="headerlink" title="依赖注入有哪几种方式？"></a>依赖注入有哪几种方式？</h3><blockquote><p>setter注入</p></blockquote><p>就是在类A里面定义一个C接口的属性D，在A的上下文通过B实例化一个对象，然后将这个对象赋值给属性D。主要就是set 与 get</p><blockquote><p>构造函数注入</p></blockquote><p>就是在创建A的对象的时候，通过参数将B的对象传入到A中。 还有常用的注入方式就是工厂模式的应用了，这些都可以将B的实例化放到A外面，从而让A和B没有关系。还有一个接口注入，就是在客户类（A）的接口中有一个服务类(B)的属性。在实例化了这个接口的子类后，对这个属性赋值，这和setter注入一样。</p><blockquote><p>接口注入</p></blockquote><p>相比构造函数注入和属性注入，接口注入显得有些复杂，使用也不常见。具体思路是先定义一个接口，包含一个设置依赖的方法。然后依赖类，继承并实现这个接口。</p><h3 id="控制反转是什么？"><a href="#控制反转是什么？" class="headerlink" title="控制反转是什么？"></a>控制反转是什么？</h3><p>控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。</p><p>通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><h3 id="依赖注入有哪些著名的框架？"><a href="#依赖注入有哪些著名的框架？" class="headerlink" title="依赖注入有哪些著名的框架？"></a>依赖注入有哪些著名的框架？</h3><p>Unity、autofac、<a href="http://spring.net、mef、injection、http//Asp.Net">http://spring.net、MEF、Injection、http://Asp.Net</a> Core的ServiceCollection。</p><h3 id="介绍一些ABP-VNET？"><a href="#介绍一些ABP-VNET？" class="headerlink" title="介绍一些ABP.VNET？"></a>介绍一些ABP.VNET？</h3><p><a href="http://asp.net/">http://ASP.NET</a> Boilerplate是.Net平台非常优秀的一个开源Web应用程序框架,在国内也有大量的粉丝.</p><p>从名称可以看出来, 这是<a href="http://asp.net/">http://ASP.NET</a> Boilerplate的下一代框架。</p><p>ABP框架创作于2013年，那时候没有.Net Core和<a href="http://asp.net/">http://ASP.NET</a> Core，也没有Angular2 +。ABP发布后，它们都是从头开发的。</p><p><a href="http://asp.net/">http://ASP.NET</a> Core引入了许多内置解决方案（扩展库），用于依赖注入，日志记录，缓存，本地化，配置等。它们实际上独立于<a href="http://asp.net/">http://ASP.NET</a> Core，可用于任何类型的应用程序。</p><h3 id="什么是dotnet-core的startup-class？"><a href="#什么是dotnet-core的startup-class？" class="headerlink" title="什么是dotnet core的startup class？"></a>什么是dotnet core的startup class？</h3><p>Startup class是dotnet core应用的入口。所有的dotnet core应用必须有这个class;<br>这个类用来配置应用。这个类的调用是在program main函数里面进行配置的。类的名字可以自己定义。</p><h3 id="startup-class的configure方法有什么作用？"><a href="#startup-class的configure方法有什么作用？" class="headerlink" title="startup class的configure方法有什么作用？"></a>startup class的configure方法有什么作用？</h3><p>这个方法来定义整个应用如何响应HTTP请求。它有几个比较重要的参数，application builder，Hosting environment, logo factory， 在这里我们可以配置一些中间件用来处理路径，验证和session等等。</p><h3 id="什么是中间件（Middleware）？"><a href="#什么是中间件（Middleware）？" class="headerlink" title="什么是中间件（Middleware）？"></a>什么是中间件（Middleware）？</h3><p>中间件是组装到应用程序管道中以处理请求和响应的软件。 每个组件：</p><p>选择是否将请求传递给管道中的下一个组件。</p><p>可以在调用管道中的下一个组件之前和之后执行工作。</p><p>请求委托（Request delegates）用于构建请求管道，处理每个HTTP请求。</p><p>请求委托使用Run，Map和Use扩展方法进行配置。单独的请求委托可以以内联匿名方法（称为内联中间件）指定，或者可以在可重用的类中定义它。这些可重用的类和内联匿名方法是中间件或中间件组件。请求流程中的每个中间件组件都负责调用流水线中的下一个组件，如果适当，则负责链接短路。</p><h3 id="中间件的使用场景有哪些？"><a href="#中间件的使用场景有哪些？" class="headerlink" title="中间件的使用场景有哪些？"></a>中间件的使用场景有哪些？</h3><p>份验证，Session存储，日志记录等。其实我们的<a href="http://asp.net/">http://Asp.net</a> core项目中本身已经包含了很多个中间件。比如 身份认证中间件 UseAuthorization()等系列</p><h3 id="列举官方常用的中间件？"><a href="#列举官方常用的中间件？" class="headerlink" title="列举官方常用的中间件？"></a>列举官方常用的中间件？</h3><p>异常&#x2F;错误处理 当应用在开发环境中运行时： 开发人员异常页中间件 (UseDeveloperExceptionPage) 报告应用运行时错误。 数据库错误页中间件报告数据库运行时错误。 当应用在生产环境中运行时： 异常处理程序中间件 (UseExceptionHandler) 捕获以下中间件中引发的异常。 HTTP 严格传输安全协议 (HSTS) 中间件 (UseHsts) 添加 Strict-Transport-Security 标头。</p><p>HTTPS 重定向中间件 (UseHttpsRedirection) 将 HTTP 请求重定向到 HTTPS。</p><p>静态文件中间件 (UseStaticFiles) 返回静态文件，并简化进一步请求处理。</p><p>Cookie 策略中间件 (UseCookiePolicy) 使应用符合欧盟一般数据保护条例 (GDPR) 规定。 用于路由请求的路由中间件 (UseRouting)。</p><p>身份验证中间件 (UseAuthentication) 尝试对用户进行身份验证，然后才会允许用户访问安全资源。</p><p>用于授权用户访问安全资源的授权中间件 (UseAuthorization)。</p><p>会话中间件 (UseSession) 建立和维护会话状态。 如果应用使用会话状态，请在 Cookie 策略中间件之后和 MVC 中间件之前调用会话中间件。</p><p>用于将 Razor Pages 终结点添加到请求管道的终结点路由中间件（带有 MapRazorPages 的 UseEndpoints）。</p><h3 id="中间件的执行顺序？"><a href="#中间件的执行顺序？" class="headerlink" title="中间件的执行顺序？"></a>中间件的执行顺序？</h3><p>异常&#x2F;错误处理</p><p>HTTP 严格传输安全协议</p><p>HTTPS 重定向</p><p>静态文件服务器</p><p>Cookie 策略实施</p><p>身份验证</p><p>会话</p><p>MVC</p><h3 id="application-builder的use和run方法有什么区别？"><a href="#application-builder的use和run方法有什么区别？" class="headerlink" title="application builder的use和run方法有什么区别？"></a>application builder的use和run方法有什么区别？</h3><p>这两个方法都在start up class的configure方法里面调用。都是用来向应用请求管道里面添加中间件的。Use方法可以调用下一个中间件的添加，而run不会。</p><h3 id="dot-net-core-管道里面的map拓展有什么作用"><a href="#dot-net-core-管道里面的map拓展有什么作用" class="headerlink" title="dot net core 管道里面的map拓展有什么作用?"></a>dot net core 管道里面的map拓展有什么作用?</h3><p>可以针对不同的路径添加不同的中间件。</p><p>public void Configure(IApplicationBuilder app)<br> {<br>   app.Map(“&#x2F;path1”, Middleware1);<br>   app.Map(“&#x2F;path2”, Middleware2);<br> }</p><h3 id="dot-net-core里面的路径是如何处理的？"><a href="#dot-net-core里面的路径是如何处理的？" class="headerlink" title="dot net core里面的路径是如何处理的？"></a>dot net core里面的路径是如何处理的？</h3><p>路径处理是用来为进入的请求寻找处理函数的机制。所有的路径在函数运行开始时进行注册。</p><p>主要有两种路径处理方式， 常规路径处理和属性路径处理。常规路径处理就是用MapRoute的方式设定调用路径，属性路径处理是指在调用函数的上方设定一个路径属性。</p><h3 id="dot-net-core工程里面有哪些常见的工程文件？"><a href="#dot-net-core工程里面有哪些常见的工程文件？" class="headerlink" title="dot net core工程里面有哪些常见的工程文件？"></a>dot net core工程里面有哪些常见的工程文件？</h3><p>global, launch setting，app settings，bundle config，bower, package。</p><h3 id="依赖注入实现原理？"><a href="#依赖注入实现原理？" class="headerlink" title="依赖注入实现原理？"></a>依赖注入实现原理？</h3><p>实现DI，核心在于依赖注入容器IContainer，该容器具有以下功能</p><p>①.（容器）保存可用服务的集合 &#x2F;&#x2F; 要用的特定对象、特定类、接口服务</p><p>②.（注册）提供一种方式将各种部件与他们依赖的服务绑定到一起；&#x2F;&#x2F; Add…函数或containerBuilder.Register函数，</p><p>③.（解析点）为应用程序提供一种方式来请求已配置的对象： 构造函数注入、属性注入.</p><p>运行时，框架会一层层通过反射构造实例，最终得到完整对象。</p><h3 id="ASP-NET-Core项目如何设置IP地址和端口号？"><a href="#ASP-NET-Core项目如何设置IP地址和端口号？" class="headerlink" title="ASP.NET Core项目如何设置IP地址和端口号？"></a>ASP.NET Core项目如何设置IP地址和端口号？</h3><p>可以使用Properties文件夹下的launchSettings配置文件来配置不同的启动方式的时候，分别配置IP和端口号。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net常用知识大全</title>
      <link href="/2023/02/03/dotnet4/"/>
      <url>/2023/02/03/dotnet4/</url>
      
        <content type="html"><![CDATA[<h3 id="Net中所有内建类型基类是什么？"><a href="#Net中所有内建类型基类是什么？" class="headerlink" title=".Net中所有内建类型基类是什么？"></a>.Net中所有内建类型基类是什么？</h3><p>System.Object</p><h3 id="System-Object-中包含哪些方法，哪些是虚方法？"><a href="#System-Object-中包含哪些方法，哪些是虚方法？" class="headerlink" title="System.Object 中包含哪些方法，哪些是虚方法？"></a>System.Object 中包含哪些方法，哪些是虚方法？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">virtual bool Equals(object obj);//虚方法</span><br><span class="line">virtual int GetHashCode(object obj);//虚方法</span><br><span class="line">Type GetType();</span><br><span class="line">virtual string ToString();//虚方法</span><br><span class="line"></span><br><span class="line">//public static method</span><br><span class="line">bool Equals(object objA,object objB);</span><br><span class="line">bool RefernceEquals(object objA,object objB);</span><br><span class="line"></span><br><span class="line">//protected</span><br><span class="line">object MemberwiseClone();//浅拷贝</span><br><span class="line">Finalize();//析构方法，用于释放非托管资源</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="值类型与引用类型？"><a href="#值类型与引用类型？" class="headerlink" title="值类型与引用类型？"></a>值类型与引用类型？</h3><h3 id="ASP-NET和ASP的区别？"><a href="#ASP-NET和ASP的区别？" class="headerlink" title="ASP.NET和ASP的区别？"></a>ASP.NET和ASP的区别？</h3><p>ASP.NET和ASP的最大区别在于编程思维的转换以及功能的增强。</p><p>ASP使用VB&#x2F;JS这样的弱类型、面向结构的脚本语言混合html来编程，</p><p>而非面向对象，这就明显产生以下几个问题：</p><p>1、代码逻辑混乱，难于管理。</p><p>2、代码的可重用性差：由于是面向结构的编程方式，并且混合html，</p><p>所以可能页面原型修改一点，整个程序都需要修改,代码重用性差。</p><p>3、弱类型造成潜在的出错可能。</p><p>以上是ASP语言本身的弱点，在功能方面ASP同样存在问题：</p><p>第一是功能太弱，一些底层操作只能通过组件来完成</p><p>第二缺乏完善的纠错&#x2F;调试功能</p><p>ASP.NET理论上可以使用任何编程语言包括C#,VB.NET、JS、、J#、Managed C++等等，</p><p>最合适的编程语言还是MS为.NET Frmaework专门推出的C#</p><p>优点如下：</p><p>(1)是面向对象的编程语言，简单易学。</p><p>(2)具有面向对象编程语言的一切特性，比如封装性、继承性、多态性等等,</p><p>封装性使得代码逻辑清晰，并且应用到ASP.NET上就可以使业务逻辑和Html页面分离；</p><p>继承性和多态性使得代码的可重用性大大提高</p><p>(3)C#还提供了完善的调试&#x2F;纠错体系。</p><h3 id="为什么-NET程序第一次运行比较慢？"><a href="#为什么-NET程序第一次运行比较慢？" class="headerlink" title="为什么.NET程序第一次运行比较慢？"></a>为什么.NET程序第一次运行比较慢？</h3><p>aspx页面在运行时，第一次访问时要进行编译。</p><p>当你再次运行时,由于缓存机制,速度就会正常了。</p><h3 id="C-的命名规范"><a href="#C-的命名规范" class="headerlink" title="C#的命名规范"></a>C#的命名规范</h3><p>主要有Pascal和Camel两种</p><p>Pascal:单词的首字母大写,如ProductType；</p><p>Camel:首个单词的首字母小写，其余单词的首字母大写,如productType)</p><p>以下是一些常用的C#成员及其推荐命名方法：</p><p>类class：Pascal</p><p>枚举类型enum：Pascal记住，是以Pascal命名，切勿包含Enum</p><p>委托delegate：Pascal以Pascal命名，不以任何特殊字符串区别于类名、函数名</p><p>接口interface：Pascal注：总是以”I”前缀开始，后接Pascal命名</p><p>方法function： Pascal</p><p>命名空间namespace： Pascal比如：usingExcelQuicker.Framework</p><p>属性：Pascal</p><p>参数：Camel 首字母小写</p><p>常量const： Camel 字母全部大写</p><p>局部变量：Camel 声明变量是以str开头</p><p>数据成员：Camel 以m开头＋Pascal命名规则，如mProductType（m意味member）</p><h3 id="简述-private、-protected、-public、-internal-修饰符的访问权限。"><a href="#简述-private、-protected、-public、-internal-修饰符的访问权限。" class="headerlink" title="简述 private、 protected、 public、 internal 修饰符的访问权限。"></a>简述 private、 protected、 public、 internal 修饰符的访问权限。</h3><p>private : 私有成员, 在类的内部才可以访问。<br>protected : 保护成员，该类内部和继承类中可以访问。<br>public : 公共成员，完全公开，没有访问限制。<br>internal: 在同一程序集(命名空间)内可以访问。</p><h3 id="列举ASP-NET-页面之间传递值的几种方式。"><a href="#列举ASP-NET-页面之间传递值的几种方式。" class="headerlink" title="列举ASP.NET 页面之间传递值的几种方式。"></a>列举ASP.NET 页面之间传递值的几种方式。</h3><p>1.使用QueryString, 如…?id&#x3D;1; response. Redirect()…<br>2.使用Session变量<br>3.使用Server.Transfer<br>4.使用Cookie<br>5.使用Application</p><h3 id="C-中的委托是什么？事件是不是一种委托？"><a href="#C-中的委托是什么？事件是不是一种委托？" class="headerlink" title="C#中的委托是什么？事件是不是一种委托？"></a>C#中的委托是什么？事件是不是一种委托？</h3><p>委托可以把一个方法作为参数代入另一个方法。<br>委托可以理解为指向一个函数的引用。<br>事件是委托</p><h3 id="override与重载的区别"><a href="#override与重载的区别" class="headerlink" title="override与重载的区别"></a>override与重载的区别</h3><p>重载是方法的名称相同。参数或参数类型不同，进行多次重载以适应不同的需要<br>Override 是在子类对基类中函数的重写。为了适应需要。</p><h3 id="如果在一个B-x2F-S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？"><a href="#如果在一个B-x2F-S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？" class="headerlink" title="如果在一个B&#x2F;S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？"></a>如果在一个B&#x2F;S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？</h3><p>this.Server.Transfer,　　Response. Redirect()—QueryString</p><h3 id="描述一下C-中索引器的实现过程，是否只能根据数字进行索引？"><a href="#描述一下C-中索引器的实现过程，是否只能根据数字进行索引？" class="headerlink" title="描述一下C#中索引器的实现过程，是否只能根据数字进行索引？"></a>描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</h3><p>不是。可以用任意类型。</p><h3 id="用-net做B-x2F-S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？"><a href="#用-net做B-x2F-S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？" class="headerlink" title="用.net做B&#x2F;S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？"></a>用.net做B&#x2F;S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？</h3><p>一般为3层:数据访问层，业务层，表示层。<br>数据访问层对数据库进行增删查改。<br>业务层一般分为二层，业务表观层实现与表示层的沟通，业务规则层实现用户密码的安全等。<br>表示层为了与用户交互例如用户添加表单。<br>优点： 分工明确，条理清晰，易于调试，而且具有可扩展性。<br>缺点： 增加成本。</p><h3 id="什么叫应用程序域？"><a href="#什么叫应用程序域？" class="headerlink" title="什么叫应用程序域？"></a>什么叫应用程序域？</h3><p>应用程序域可以理解为一种轻量级进程。起到安全的作用。占用资源小。</p><h3 id="CTS、CLS、CLR分别作何解释？"><a href="#CTS、CLS、CLR分别作何解释？" class="headerlink" title="CTS、CLS、CLR分别作何解释？"></a>CTS、CLS、CLR分别作何解释？</h3><p>CTS是通用类型系统(Common Type System)<br>CLR是公共语言运行时(Common language runtime)<br>CLS是公共语言定义(Common Language Specification)</p><h3 id="什么是装箱和拆箱？"><a href="#什么是装箱和拆箱？" class="headerlink" title="什么是装箱和拆箱？"></a>什么是装箱和拆箱？</h3><p>从值类型接口转换到引用类型装箱。从引用类型转换到值类型拆箱。</p><h3 id="什么是受管制的代码？"><a href="#什么是受管制的代码？" class="headerlink" title="什么是受管制的代码？"></a>什么是受管制的代码？</h3><p>unsafe：非托管代码。不经过CLR运行。</p><h3 id="什么是强类型系统？"><a href="#什么是强类型系统？" class="headerlink" title="什么是强类型系统？"></a>什么是强类型系统？</h3><p>RTTI：类型识别系统</p><h3 id="net中读写数据库需要用到那些类？他们的作用？"><a href="#net中读写数据库需要用到那些类？他们的作用？" class="headerlink" title="net中读写数据库需要用到那些类？他们的作用？"></a>net中读写数据库需要用到那些类？他们的作用？</h3><p>DataConnection:连接数据库<br>DataSet:数据存储器。<br>DataCommand:执行语句命令。<br>DataAdapter:数据的集合，用于填充数据。</p><h3 id="ASP-net的身份验证方式有哪些？分别是什么原理？"><a href="#ASP-net的身份验证方式有哪些？分别是什么原理？" class="headerlink" title="ASP.net的身份验证方式有哪些？分别是什么原理？"></a>ASP.net的身份验证方式有哪些？分别是什么原理？</h3><p>Windwos(默认)用IIS…From(窗体)用帐户…Passport(密钥)</p><h3 id="什么是Code-Behind技术？"><a href="#什么是Code-Behind技术？" class="headerlink" title="什么是Code-Behind技术？"></a>什么是Code-Behind技术？</h3><p>code-Behind技术就是代码隐藏（代码后置），code-Behind是基于部分类技术实现的；<br>在ASP.NET中通过ASPX页面指向CS文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。<br>比如分工，美工和编程的可以个干各的，不用再像以前asp那样都代码和html代码混在一起，难以维护。</p><h3 id="在-net中，配件的意思是？"><a href="#在-net中，配件的意思是？" class="headerlink" title="在.net中，配件的意思是？"></a>在.net中，配件的意思是？</h3><p>程序集。（中间语言，源数据，资源，装配清单）</p><h3 id="常用的调用WebService的方法有哪些？"><a href="#常用的调用WebService的方法有哪些？" class="headerlink" title="常用的调用WebService的方法有哪些？"></a>常用的调用WebService的方法有哪些？</h3><p>1.使用WSDL.exe命令行工具。<br>2.使用VS.NET中的Add Web Reference菜单选项</p><h3 id="…net-Remoting-的工作原理是什么？"><a href="#…net-Remoting-的工作原理是什么？" class="headerlink" title="…net Remoting 的工作原理是什么？"></a>…net Remoting 的工作原理是什么？</h3><pre><code>服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置。</code></pre><h3 id="在C＃中，string-str-x3D-null-与-string-str-x3D-“”-请尽量使用文字或图象说明其中的区别。"><a href="#在C＃中，string-str-x3D-null-与-string-str-x3D-“”-请尽量使用文字或图象说明其中的区别。" class="headerlink" title="在C＃中，string str &#x3D; null 与 string str &#x3D; “” 请尽量使用文字或图象说明其中的区别。"></a>在C＃中，string str &#x3D; null 与 string str &#x3D; “” 请尽量使用文字或图象说明其中的区别。</h3><p>string str &#x3D; null 是不给他分配内存空间,而string str &#x3D; “” 给它分配长度为空字符串的内存空间。</p><h3 id="请详述在dotnet中类-class-与结构-struct-的异同？"><a href="#请详述在dotnet中类-class-与结构-struct-的异同？" class="headerlink" title="请详述在dotnet中类(class)与结构(struct)的异同？"></a>请详述在dotnet中类(class)与结构(struct)的异同？</h3><p>Class可以被实例化,属于引用类型,是分配在内存的堆上的,Struct属于值类型,是分配在内存的栈上的。</p><h3 id="SQLSERVER服务器中，给定表-table1-中有两个字段-ID、LastUpdateDate，ID表示更新的事务号，LastUpdateDate表示更新时的服务器时间，请使用一句SQL语句获得最后更新的事务号。"><a href="#SQLSERVER服务器中，给定表-table1-中有两个字段-ID、LastUpdateDate，ID表示更新的事务号，LastUpdateDate表示更新时的服务器时间，请使用一句SQL语句获得最后更新的事务号。" class="headerlink" title="SQLSERVER服务器中，给定表 table1 中有两个字段 ID、LastUpdateDate，ID表示更新的事务号，LastUpdateDate表示更新时的服务器时间，请使用一句SQL语句获得最后更新的事务号。"></a>SQLSERVER服务器中，给定表 table1 中有两个字段 ID、LastUpdateDate，ID表示更新的事务号，LastUpdateDate表示更新时的服务器时间，请使用一句SQL语句获得最后更新的事务号。</h3><p>Select ID FROM table1 Where LastUpdateDate &#x3D; (Select MAX(LastUpdateDate) FROM table1)</p><h3 id="简要谈一下您对微软-NET-构架下remoting和webservice两项技术的理解以及实际中的应用。"><a href="#简要谈一下您对微软-NET-构架下remoting和webservice两项技术的理解以及实际中的应用。" class="headerlink" title="简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。"></a>简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。</h3><p>WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP&#x2F;IP，二进制传送提高效率。</p><h3 id="NET和C-是什么关系？"><a href="#NET和C-是什么关系？" class="headerlink" title="NET和C#是什么关系？"></a>NET和C#是什么关系？</h3><p>C#就是为宣传.NET而创立的，它直接集成于Visual Studio .NET中，VB也在.NET 1.0发布后对其进行支持， 所以这两门语言与.NET平台耦合度很高，并且.NET上的技术大多都是以C#编程语言为示例，所以经常就.NET和C#混为一谈(实质上它们是相辅相成的两个概念)。<br>而作为一个开发者平台，它不仅仅是包含开发环境、技术框架、社区论坛、服务支持等，它还强调了平台的跨语言、跨平台编程的两个特性</p><h3 id="列举ASP-NET-页面之间传递值的几种方式。-1"><a href="#列举ASP-NET-页面之间传递值的几种方式。-1" class="headerlink" title="列举ASP.NET 页面之间传递值的几种方式。"></a>列举ASP.NET 页面之间传递值的几种方式。</h3><p>QueryString是一种非常简单的传值方式，他可以将传送的值显示在浏览器的地址栏中。如果是传递一个或多个安全性要求不高或是结构简单的数值时，可以使用这个方法。但是对于传递数组或对象的话，就不能用这个方法了。<br>Application对象的作用范围是整个全局，也就是说对所有用户都有效。其常用的方法用Lock和UnLock。<br>Session变量 想必这个肯定是大家使用中最常见的用法了，作用于用户个人，所以，过量的存储会导致服务器内存资源的耗尽。<br>Cookie对象变量这个也是大家常使用的方法，与Session一样，其是什对每一个用户而言的，但是有个本质的区别，即Cookie是存放在客户端的，而session是存放在服务器端的。而且Cookie的使用要配合ASP.NET内置对象Request来使用。<br>Server.Transfer方法这个才可以说是面象对象开发所使用的方法，其使用Server.Transfer方法把流程从当前页面引导到另一个页面中，新的页面使用前一个页面的应答流，所以这个方法是完全面象对象的，简洁有效。</p><h3 id="一列数的规则如下-1、1、2、3、5、8、13、21、34……-求第30位数是多少，-用递归算法实现。"><a href="#一列数的规则如下-1、1、2、3、5、8、13、21、34……-求第30位数是多少，-用递归算法实现。" class="headerlink" title="一列数的规则如下: 1、1、2、3、5、8、13、21、34…… 求第30位数是多少， 用递归算法实现。"></a>一列数的规则如下: 1、1、2、3、5、8、13、21、34…… 求第30位数是多少， 用递归算法实现。</h3><pre><code>public static int Calculate(int x)    &#123;        int retInt = 1;        if (x &gt; 2)        &#123;            return Calculate(x - 2) + Calculate(x - 1);        &#125;        else            return retInt;    &#125;</code></pre><h3 id="C-中的委托是什么？事件是不是一种委托？-1"><a href="#C-中的委托是什么？事件是不是一种委托？-1" class="headerlink" title="C#中的委托是什么？事件是不是一种委托？"></a>C#中的委托是什么？事件是不是一种委托？</h3><p>委托是一种定义方法签名的类型，可以与具有兼容签名的任何方法关联。可以通过委</p><p>托调用方法。委托用于将方法作为参数传递给其他方法。</p><p>委托具有以下特点：</p><p>委托类似于 C++ 函数指针，但它们是类型安全的。<br>委托允许将方法作为参数进行传递。<br>委托可用于定义回调方法。<br>委托可以链接在一起；例如，可以对一个事件调用多个方法。<br>方法不必与委托签名完全匹配。<br>事件是一种特殊的委托。</p><h3 id="override与重载的区别-1"><a href="#override与重载的区别-1" class="headerlink" title="override与重载的区别"></a>override与重载的区别</h3><p>Override：要扩展或修改继承的方法、属性、索引器或事件的抽象实现或虚实现，重写的基方法必须与 override 方法具有相同的签名。</p><p>方法重载：一个类中可以有一个以上的方法拥有相同的名称。但必须有不相同的签名。</p><h3 id="如果在一个B-x2F-S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？-1"><a href="#如果在一个B-x2F-S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？-1" class="headerlink" title="如果在一个B&#x2F;S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？"></a>如果在一个B&#x2F;S结构的系统中需要传递变量值，但是又不能使用Session、Cookie、Application，您有几种方法进行处理？</h3><p>QueryString、 Server.Transfer方法。</p><h3 id="请编程遍历页面上所有TextBox控件并给它赋值为string-Empty？"><a href="#请编程遍历页面上所有TextBox控件并给它赋值为string-Empty？" class="headerlink" title="请编程遍历页面上所有TextBox控件并给它赋值为string.Empty？"></a>请编程遍历页面上所有TextBox控件并给它赋值为string.Empty？</h3><p>foreach (Control control in this.Controls)</p><pre><code>        &#123;            if (control is TextBox)            &#123;                TextBox tb = (TextBox)control;                tb.Text = String.Empty;            &#125;        &#125;</code></pre><h3 id="请编程实现一个冒泡排序算法？"><a href="#请编程实现一个冒泡排序算法？" class="headerlink" title="请编程实现一个冒泡排序算法？"></a>请编程实现一个冒泡排序算法？</h3><p>&#x2F;&#x2F;冒泡排序</p><pre><code>    public static void MaoPaoSort(ref int[] arrays)    &#123;        if (arrays != null &amp;&amp; arrays.Length &gt; 0)        &#123;            for (int i = 1; i &lt; arrays.Length; i++)            &#123;                bool isChange = false;                for (int j = 0; j &lt; arrays.Length - i; j++)                &#123;                    if (arrays[j] &gt; arrays[j + 1])                    &#123;                        int tempValue = arrays[j];                        arrays[j] = arrays[j + 1];                        arrays[j + 1] = tempValue;                        isChange = true;                    &#125;                &#125;                if (!isChange)                    break;            &#125;        &#125;    &#125;</code></pre><h3 id="描述一下C-中索引器的实现过程，是否只能根据数字进行索引？-1"><a href="#描述一下C-中索引器的实现过程，是否只能根据数字进行索引？-1" class="headerlink" title="描述一下C#中索引器的实现过程，是否只能根据数字进行索引？"></a>描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</h3><p>索引器允许类或结构的实例就像数组一样进行索引。索引器类似于属性，不同之处在于它们的访问器采用参数。 Public ReturnType  this[ paramType  index]{get{} set{}}，可以用任何类型进行索引。</p><h3 id="求以下表达式的值，写出您想到的一种或几种实现方法：-1-2-3-4-……-m"><a href="#求以下表达式的值，写出您想到的一种或几种实现方法：-1-2-3-4-……-m" class="headerlink" title="求以下表达式的值，写出您想到的一种或几种实现方法： 1-2+3-4+……+m"></a>求以下表达式的值，写出您想到的一种或几种实现方法： 1-2+3-4+……+m</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public static int sumMethod1(int m)</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           int <span class="built_in">sum</span>=0;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (int i = 1; i &lt;= m; i++)</span><br><span class="line"></span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (i % 2 != 0)</span><br><span class="line"></span><br><span class="line">                   <span class="built_in">sum</span> += i;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                   <span class="built_in">sum</span> -= i;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">return</span> <span class="built_in">sum</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public static int sumMethod2(int m)</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           int <span class="built_in">sum</span> = 0;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (m % 2 != 0)</span><br><span class="line"></span><br><span class="line">               <span class="built_in">sum</span> = m / 2 + 1;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">               <span class="built_in">sum</span> = -(m / 2);</span><br><span class="line"></span><br><span class="line">           <span class="built_in">return</span> <span class="built_in">sum</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="在下面的例子里"><a href="#在下面的例子里" class="headerlink" title="在下面的例子里"></a>在下面的例子里</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        public <span class="function"><span class="title">A</span></span>()</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            PrintFields();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public virtual void <span class="function"><span class="title">PrintFields</span></span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    class B : A</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        int x = 1;</span><br><span class="line"></span><br><span class="line">        int y;</span><br><span class="line"></span><br><span class="line">        public <span class="function"><span class="title">B</span></span>()</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            y = -1;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void <span class="function"><span class="title">PrintFields</span></span>()</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;x=&#123;0&#125;,y=&#123;1&#125;&quot;</span>, x, y);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当使用new B()创建B的实例时，产生什么输出？</p><p>X&#x3D;1,Y&#x3D;0</p><h3 id="什么叫应用程序域？-1"><a href="#什么叫应用程序域？-1" class="headerlink" title="什么叫应用程序域？"></a>什么叫应用程序域？</h3><p>应用程序域 (application domain) (AppDomain) 一种边界，它由公共语言运行库围绕同一应用程序范围内创建的对象建立（即，从应用程序入口点开始，沿着对象激活的序列的任何位置）。应用程序域有助于将在一个应用程序中创建的对象与在其他应用程序中创建的对象隔离，以使运行时行为可以预知。在一个单独的进程中可以存在多个应用程序域</p><h3 id="CTS、CLS、CLR分别作何解释？-1"><a href="#CTS、CLS、CLR分别作何解释？-1" class="headerlink" title="CTS、CLS、CLR分别作何解释？"></a>CTS、CLS、CLR分别作何解释？</h3><p>CTS：通用类型系统。CLS：通用语言规范。CLR：公共语言运行库。</p><h3 id="什么是装箱和拆箱？-1"><a href="#什么是装箱和拆箱？-1" class="headerlink" title="什么是装箱和拆箱？"></a>什么是装箱和拆箱？</h3><p>装箱：装箱转换是指将一个值类型隐式或显式地转换成一个object类型，拆箱：拆箱转换是指将一个对象类型显式地转换成一个值类型。</p><h3 id="什么是受管制的代码？-1"><a href="#什么是受管制的代码？-1" class="headerlink" title="什么是受管制的代码？"></a>什么是受管制的代码？</h3><p>受托管的代码不能直接写内存，是安全的，它受CLR的内存安全管理，而非托管代码是非安全代码，可以使用指针操作内存</p><h3 id="net中读写数据库需要用到那些类？他们的作用？-1"><a href="#net中读写数据库需要用到那些类？他们的作用？-1" class="headerlink" title="net中读写数据库需要用到那些类？他们的作用？"></a>net中读写数据库需要用到那些类？他们的作用？</h3><p>DataSet:数据存储器</p><p>Connection对象，用来创建和打开，关闭数据库连接。</p><p>Command对象，用来执行各种sql语句或者调用存储过程。</p><p>Adapter对象，数据适配器，用来执行SQL语句，配合数据集执行比较多。</p><p>DataReader，只读的对象，有着很高的性能。</p><h3 id="在-net中，配件的意思是？-1"><a href="#在-net中，配件的意思是？-1" class="headerlink" title="在.net中，配件的意思是？"></a>在.net中，配件的意思是？</h3><p>程序集。（中间语言，源数据，资源，装配清单）</p><h3 id="常用的调用WebService的方法有哪些？-1"><a href="#常用的调用WebService的方法有哪些？-1" class="headerlink" title="常用的调用WebService的方法有哪些？"></a>常用的调用WebService的方法有哪些？</h3><p>1.使用WSDL.exe命令行工具。</p><pre><code> 2.使用VS.NET中的Add Web Reference菜单选项</code></pre><h3 id="net-Remoting-的工作原理是什么？"><a href="#net-Remoting-的工作原理是什么？" class="headerlink" title=".net Remoting 的工作原理是什么？"></a>.net Remoting 的工作原理是什么？</h3><p>服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置。</p><h3 id="公司要求开发一个继承System-Windows-Forms-ListView类的组件，要求达到以下的特殊功能：点击ListView-各列列头时，能按照点击列的每行值进行重排视图中的所有行-排序的方式如DataGrid相似-。根据您的知识，请简要谈一下您的思路"><a href="#公司要求开发一个继承System-Windows-Forms-ListView类的组件，要求达到以下的特殊功能：点击ListView-各列列头时，能按照点击列的每行值进行重排视图中的所有行-排序的方式如DataGrid相似-。根据您的知识，请简要谈一下您的思路" class="headerlink" title="公司要求开发一个继承System.Windows.Forms.ListView类的组件，要求达到以下的特殊功能：点击ListView 各列列头时，能按照点击列的每行值进行重排视图中的所有行 (排序的方式如DataGrid相似)。根据您的知识，请简要谈一下您的思路"></a>公司要求开发一个继承System.Windows.Forms.ListView类的组件，要求达到以下的特殊功能：点击ListView 各列列头时，能按照点击列的每行值进行重排视图中的所有行 (排序的方式如DataGrid相似)。根据您的知识，请简要谈一下您的思路</h3><p>根据点击的列头,包该列的名称取出,按照该列名排序后,再绑定到ListView中。</p><h3 id="能用foreach遍历访问的对象需要实现IEnumerable接口或声明GetEnumerator方法的类型。"><a href="#能用foreach遍历访问的对象需要实现IEnumerable接口或声明GetEnumerator方法的类型。" class="headerlink" title="能用foreach遍历访问的对象需要实现IEnumerable接口或声明GetEnumerator方法的类型。"></a>能用foreach遍历访问的对象需要实现IEnumerable接口或声明GetEnumerator方法的类型。</h3><h3 id="GC是什么-为什么要有GC"><a href="#GC是什么-为什么要有GC" class="headerlink" title="GC是什么? 为什么要有GC?"></a>GC是什么? 为什么要有GC?</h3><p>GC是垃圾收集器。程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一： System.GC.Collect()；</p><h3 id="String-s-x3D-new-String-“xyz”-创建了几个String-Object"><a href="#String-s-x3D-new-String-“xyz”-创建了几个String-Object" class="headerlink" title="String s &#x3D; new String(“xyz”);创建了几个String Object?"></a>String s &#x3D; new String(“xyz”);创建了几个String Object?</h3><p>两个对象，一个是“xyx”,一个是指向“xyx”的引用对像s。</p><h3 id="abstract-class和interface有什么区别"><a href="#abstract-class和interface有什么区别" class="headerlink" title="abstract class和interface有什么区别?"></a>abstract class和interface有什么区别?</h3><p>抽象类：</p><p>只能用做其它类的基类，它就是被设计来被继承的。<br>不能创建它的实例。<br>它使用abstract修饰符来声明。<br>抽象类可以包含抽象成员，但不是必须的，它的成员可以抽象成员和普通带实现的成员的任意组合。<br>它自己可以派生自另一个抽象类。任何派生自抽象类的类必须使用override关键字实现该类所有的抽象成员，除非派生类自己也是抽象类。<br>接口：</p><p>接口是表示一组函数成员而不实现成员的引用类型。其它类和结构可以实现接口。<br>接口声明不包括数据成员。<br>接口声明只能包含如下类型的静态成员函数的声明：方法、属性、事件、索引。<br>接口的成员不能包含任何实现代码，而在每一个成员声明的主体后必须使用分号。<br>接口名称必须从大写的I开始。它和类一样，也可以声明成分部接口。<br>接口声明可以有任何的访问类型：public、protected、internal、private。<br>接口成员是隐式Public的，不允许有任何访问修饰符。<br>1， 什么是线程池</p><p>为了帮我们降低创建和销毁线程相关的成本，CLR为每一个进程维护了一个线程池。一开始进程的线程池是空的，如果进程使用的线程被创建，并且完成了线程的执行，它不会被销毁，而是加入到进程的线程池中，这后，如果进程需要一个另外一个线程，CLR就会从池中还原一个线程，这就节省了很多时间。</p><h3 id="启动一个线程是用run-还是start"><a href="#启动一个线程是用run-还是start" class="headerlink" title="启动一个线程是用run()还是start()?"></a>启动一个线程是用run()还是start()?</h3><p>启动一个线程是调用start()方法，这并不意味着线程就会立即运行，只是进入了可运行状态。直接调用run()方法不会产生线程，而是把它当作普通的方法调用，马上执行</p><h3 id="接口是否可继承接口-抽像类是否可实现-implements-接口-抽像类是否可继承实体类-concrete-class"><a href="#接口是否可继承接口-抽像类是否可实现-implements-接口-抽像类是否可继承实体类-concrete-class" class="headerlink" title="接口是否可继承接口? 抽像类是否可实现(implements)接口? 抽像类是否可继承实体类(concrete class)?"></a>接口是否可继承接口? 抽像类是否可实现(implements)接口? 抽像类是否可继承实体类(concrete class)?</h3><p>接口可以继承接口。抽像类可以实现(implements)接口，抽像类是否可继承实体类，但前提是实体类必须有明确的构造函数。</p><h3 id="构造器Constructor是否可被override"><a href="#构造器Constructor是否可被override" class="headerlink" title="构造器Constructor是否可被override?"></a>构造器Constructor是否可被override?</h3><p>构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。</p><p>Constructor不能被继承，所以Constructor也就不能被override。每一个类必须有自己的构造函数，负责构造自己这部分的构造。子类不会覆盖父类的构造函数，相反必须负责在一开始调用父类的构造函数。</p><h3 id="是否可以继承String类"><a href="#是否可以继承String类" class="headerlink" title="是否可以继承String类?"></a>是否可以继承String类?</h3><p>不可以，因为String类是密封类，被Sealed修饰符所修饰。</p><h3 id="两个对像值相同-x-equals-y-x3D-x3D-true-，但却可有不同的hash-code，这句话对不对"><a href="#两个对像值相同-x-equals-y-x3D-x3D-true-，但却可有不同的hash-code，这句话对不对" class="headerlink" title="两个对像值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对?"></a>两个对像值相同(x.equals(y) &#x3D;&#x3D; true)，但却可有不同的hash code，这句话对不对?</h3><p>不对，有相同的hash code。</p><p>Hash Code:可以简单的理解为内存的地址。</p><p>“&#x3D;&#x3D;” : 操作比较的是两个变量的值是否相等，对于引用型变量表示的是两个变量在堆中存储</p><p>的地址是否相同，即栈中的内容是否相同。</p><p>“equals” : 操作表示的两个变量是否是对同一个对象的引用，即堆中的内容是否相同。</p><p>而字符串是一个特殊的引用型类型，在C#语言中，重载了string 对象的很多方法方法(包括equals()方法)，使string对象用起来就像是值类型一样。</p><h3 id="swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上"><a href="#swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上" class="headerlink" title="swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?"></a>swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?</h3><p>可以。</p><h3 id="当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法"><a href="#当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法" class="headerlink" title="当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?"></a>当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?</h3><p>不能，一个对象的一个synchronized方法只能由一个线程访问。</p><h3 id="List-Set-Map是否继承自Collection接口"><a href="#List-Set-Map是否继承自Collection接口" class="headerlink" title="List, Set, Map是否继承自Collection接口?"></a>List, Set, Map是否继承自Collection接口?</h3><p>List，Set是Map不是</p><h3 id="数组有没有length-这个方法-String有没有length-这个方法？"><a href="#数组有没有length-这个方法-String有没有length-这个方法？" class="headerlink" title="数组有没有length()这个方法? String有没有length()这个方法？"></a>数组有没有length()这个方法? String有没有length()这个方法？</h3><p>数组和string都没有Length()方法，只有Length属性。</p><h3 id="sleep-和-wait-有什么区别"><a href="#sleep-和-wait-有什么区别" class="headerlink" title="sleep() 和 wait() 有什么区别?"></a>sleep() 和 wait() 有什么区别?</h3><p>sleep()方法是将当前线程挂起指定的时间。</p><p>wait()释放对象上的锁并阻塞当前线程，直到它重新获取该锁。</p><h3 id="short-s1-x3D-1-s1-x3D-s1-1-有什么错-short-s1-x3D-1-s1-x3D-1-有什么错"><a href="#short-s1-x3D-1-s1-x3D-s1-1-有什么错-short-s1-x3D-1-s1-x3D-1-有什么错" class="headerlink" title="short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有什么错? short s1 &#x3D; 1; s1 +&#x3D; 1;有什么错?"></a>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有什么错? short s1 &#x3D; 1; s1 +&#x3D; 1;有什么错?</h3><p>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错，s1是short型，s1+1是int型,不能隐式转化为short型。可修改为s1 &#x3D;(short)(s1 + 1) 。short s1 &#x3D; 1; s1 +&#x3D; 1正确。</p><p>复合赋值表达式自动地将所执行计算的结果转型为其左侧变量的类型，s1+&#x3D;1等价于s1&#x3D;(short)s1+1；</p><h3 id="如何处理几十万条并发数据？"><a href="#如何处理几十万条并发数据？" class="headerlink" title="如何处理几十万条并发数据？"></a>如何处理几十万条并发数据？</h3><p>用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方式这种方法并发的时候是不会有重复主键的..取得最大标识要有一个存储过程来获取.</p><h3 id="Session有什么重大BUG，微软提出了什么方法加以解决？"><a href="#Session有什么重大BUG，微软提出了什么方法加以解决？" class="headerlink" title="Session有什么重大BUG，微软提出了什么方法加以解决？"></a>Session有什么重大BUG，微软提出了什么方法加以解决？</h3><p>是iis中由于有进程回收机制，系统繁忙的话Session会丢失，可以用Sate server或SQL Server数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的END事件。</p><h3 id="进程和线程的区别？"><a href="#进程和线程的区别？" class="headerlink" title="进程和线程的区别？"></a>进程和线程的区别？</h3><p>进程是系统进行资源分配和调度的单位；线程是CPU调度和分派的单位，一个进程可以有多个线程，这些线程共享这个进程的资源。</p><p>进程：进程就是一组资源，它们构成了一个正在运行的程序。</p><p>线程：在进程中系统创建了一个叫做线程的内核对象，线程体现了一个程序的真实执行情况。</p><h3 id="堆和栈的区别？"><a href="#堆和栈的区别？" class="headerlink" title="堆和栈的区别？"></a>堆和栈的区别？</h3><p>栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小有明确的定义；堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小。</p><p>栈：它是一个内存数组，是一个LIFO的数据结构，数据只能从栈顶插入和删除。</p><p>堆：它是一块内存区域，在堆里可以分配大块的内存用于存储某类型的数据，堆里的内存可以以任意顺序存入和取出。</p><h3 id="成员变量和成员函数前加static的作用？"><a href="#成员变量和成员函数前加static的作用？" class="headerlink" title="成员变量和成员函数前加static的作用？"></a>成员变量和成员函数前加static的作用？</h3><p>它们用来反映类的状态。<br>静态成员它被类的所有实例所共享，所有实例都访问同一内存位置。<br>它们独立于所有的类实例，即使没有类实例，也可以调用类的静态成员。</p><h3 id="ASP-NET与ASP相比，主要有哪些进步？"><a href="#ASP-NET与ASP相比，主要有哪些进步？" class="headerlink" title="ASP.NET与ASP相比，主要有哪些进步？"></a>ASP.NET与ASP相比，主要有哪些进步？</h3><p>asp解释形，aspx编译型，性能提高，可以跟美工的工作分开进行，更有利于团队开发。</p><h3 id="产生一个int数组，长度为100，并向其中随机插入1-100，并且不能重复。"><a href="#产生一个int数组，长度为100，并向其中随机插入1-100，并且不能重复。" class="headerlink" title="产生一个int数组，长度为100，并向其中随机插入1-100，并且不能重复。"></a>产生一个int数组，长度为100，并向其中随机插入1-100，并且不能重复。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public static int[] <span class="function"><span class="title">BuildIntArray</span></span>()</span><br><span class="line"></span><br><span class="line">         &#123;</span><br><span class="line"></span><br><span class="line">            int[] retsInt = new int[100];</span><br><span class="line"></span><br><span class="line">            List&lt;int&gt; tempList = new List&lt;int&gt;();</span><br><span class="line"></span><br><span class="line">            Random random = new Random();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(tempList.Count &lt; 100)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                int num = random.Next(1, 101);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!tempList.Contains(num))</span><br><span class="line"></span><br><span class="line">                   tempList.Add(num);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tempList.Sort();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; tempList.Count; i++)</span><br><span class="line"></span><br><span class="line">                retsInt[i] = tempList[i];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> retsInt;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="请说明在-net中常用的几种页面间传递参数的方法，并说出他们的优缺点。"><a href="#请说明在-net中常用的几种页面间传递参数的方法，并说出他们的优缺点。" class="headerlink" title="请说明在.net中常用的几种页面间传递参数的方法，并说出他们的优缺点。"></a>请说明在.net中常用的几种页面间传递参数的方法，并说出他们的优缺点。</h3><p>QueryString  传递一个或多个安全性要求不高或是结构简单的数值。但是对于传递数组或对象的话，就不能用这个方法了<br>session(viewstate) 简单，但易丢失 作用于用户个人,过量的存储会导致服务器内存资源的耗尽。<br>application 对象的作用范围是整个全局，也就是说对所有用户都有效。其常用的方法用Lock和UnLock<br>cookie 简单，但可能不支持，可能被伪造 Cookie是存放在客户端的，而session是存放在服务器端的。而且Cookie的使用要配合ASP.NET内置对象Request来使用<br>input ttype&#x3D;”hidden” 简单，可能被伪造<br>url参数简单，显示于地址栏，长度有限<br>Server.Transfer  把流程从当前页面引导到另一个页面中，新的页面使用前一个页面的应答流<br>数据库稳定，安全，但性能相对弱</p><h3 id="请指出GAC的含义？"><a href="#请指出GAC的含义？" class="headerlink" title="请指出GAC的含义？"></a>请指出GAC的含义？</h3><p>全局程序集缓存。</p><p>GAC（Global  Assembly Cache），他的作用是可以存放一些有很多程序都要用到的公共Assembly。这样，很多程序就可以从GAC里面取得Assembly，而不需要再把所有要用到的Assembly都拷贝到应用程序的执行目录下面。</p><h3 id="向服务器发送请求有几种方式？"><a href="#向服务器发送请求有几种方式？" class="headerlink" title="向服务器发送请求有几种方式？"></a>向服务器发送请求有几种方式？</h3><p>get,post。get一般为链接方式，post一般为按钮方式。</p><p>区别：</p><pre><code>  Get 方式， 服务器端用Request.Qurystring取变量的值，安全性不高，传送数据量小。  post方式，服务器端用Request.Form获取提交的数据，安全性高。</code></pre><p>建议：</p><p>1、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；</p><p>2、在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式。</p><h3 id="DataReader与Dataset有什么区别？"><a href="#DataReader与Dataset有什么区别？" class="headerlink" title="DataReader与Dataset有什么区别？"></a>DataReader与Dataset有什么区别？</h3><p>连接数据库时DataSet是非面向连接的，而DataReader是面向连接的。<br>DataSet表示一个数据集，是数据在内存中的缓存，可以包括多个表，是保存数据的数据结构。而Datareader不承担保存数据的责任，它只负责从数据源读取数据到本地而已，它不是数据结构，而是网络通讯组件的高层封装。<br>DataSet可以离线处理，前后滚动，而DataReader不能离线处理，且是只读向前的，速度快。<br>DataSet可以存储数据库各种对象的，比如表触发器等，可以更新回原来的数据库。而DataReader只能存储游标记录，不可以更新回原来的数据库， 它类似一个只能向前的游标记录集。</p><h3 id="软件开发过程一般有几个阶段？每个阶段的作用？"><a href="#软件开发过程一般有几个阶段？每个阶段的作用？" class="headerlink" title="软件开发过程一般有几个阶段？每个阶段的作用？"></a>软件开发过程一般有几个阶段？每个阶段的作用？</h3><p>软件开发一般分为五个阶段：</p><p>问题的定义及规划<br>此阶段是软件开发与需求方共同讨论，主要确定软件的开发目标及其可行性。</p><p>需求分析<br>在确定软件开发可行性的情况下，对软件需要实现的各个功能进行详细需求分析。需求分析阶段是一个很重要的阶段，这一阶段做的好，将为整个软件项目的开发打下良好的基础。“唯一不变的是变化本身”，同样软件需求也是在软件开发过程中不断变化和深入的，因此，我们必须定制需求变更计划来应付这种变化，以保护整个项目的正常进行。</p><p>软件设计<br>此阶段中要根据需求分析的结果，对整个软件系统进行设计，如系统框架设计、数据库设计等。软件设计一般分为概要设计和详细设计，软件设计将为软件程序编写打下良好的基础。</p><p>程序编码<br>此阶段是将软件设计的结果转化为计算机可运行的程序代码。在程序编码中必定要制定统一、符合标准的编写规范。以保证程序的可读性、易维护性。提高程序的运行效率。</p><p>软件测试<br>在软件设计完成之后要进行严密的测试，一发现软件在整个软件设计过程中存在的问题并加以纠正。整个测试阶段分为单元测试、组装测试、系统测试三个阶段进行。测试方法主要有白盒测试和黑盒测试。</p><h3 id="在c-中using和new这两个关键字有什么意义，请写出你所知道的意义？"><a href="#在c-中using和new这两个关键字有什么意义，请写出你所知道的意义？" class="headerlink" title="在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？"></a>在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？</h3><p>Uning:<br>using做为命名空间指令：通过在源文件顶端放置Using命名空间指令以避免不得不使用长名称，它通知编译器你将要使用来自某个指定命名空间的类型。<br>using做为别名指令：它允许对一个命名空间或命名空间中的一个类型起一个别名。<br>using语句：某些类型的非托管对象有数量限制或很耗费系统资源，这样在代码使用完它们后，就得尽可能快的释放它们，using语句有助于简化该过程并确保这些资源被适当的处置。</p><p>New :<br>创建类和结构的实例。<br>隐藏基类的方法。<br>创建匿名类型（var和new关键字一起使用时可以创建匿名类型，匿名类型只是一个继承了Object的、没有名称的类，该类的定义从初始化器中推断，类似于隐匿类型化的变量）。</p><h3 id="需要实现对一个字符串的处理-首先将该字符串首尾的空格去掉-如果字符串中间还有连续空格的话-仅保留一个空格-即允许字符串中间有多个空格-但连续的空格数不可超过一个"><a href="#需要实现对一个字符串的处理-首先将该字符串首尾的空格去掉-如果字符串中间还有连续空格的话-仅保留一个空格-即允许字符串中间有多个空格-但连续的空格数不可超过一个" class="headerlink" title="需要实现对一个字符串的处理,首先将该字符串首尾的空格去掉,如果字符串中间还有连续空格的话,仅保留一个空格,即允许字符串中间有多个空格,但连续的空格数不可超过一个."></a>需要实现对一个字符串的处理,首先将该字符串首尾的空格去掉,如果字符串中间还有连续空格的话,仅保留一个空格,即允许字符串中间有多个空格,但连续的空格数不可超过一个.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    string str = <span class="string">&quot;  afdkd   askdfji  ksdafj   &quot;</span>;</span><br><span class="line">    string strAfter = Regex.Replace(str.Trim(), @<span class="string">&quot;\s+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">### 下面这段代码输出什么？为什么？</span></span><br><span class="line">```bash</span><br><span class="line">int i = 5;</span><br><span class="line"></span><br><span class="line">            int j = 5;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Object.ReferenceEquals(i, j))</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Equal&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Not Equal&quot;</span>);</span><br></pre></td></tr></table></figure><p>Not Equal，因为ReferenceEquals是Object的静态方法，用于比较两个引用类型的对象是否是对于同一个对象的引用，对于值类型它总是返回false。</p><h3 id="ReferenceEquals-x3D-x3D-Equals的区别"><a href="#ReferenceEquals-x3D-x3D-Equals的区别" class="headerlink" title="ReferenceEquals, &#x3D;&#x3D; , Equals的区别"></a>ReferenceEquals, &#x3D;&#x3D; , Equals的区别</h3><p>String对于声明的相同的字符串在堆上只保留一个Copy，所以有相同字符串值的两个字符串变量将会指向相同的Reference。<br>ReferenceEquals：<br>它是Object的静态方法，用于比较两个引用类型的对象是否是对于同一个对象的引用，对于值类型它总是返回false。<br>&#x3D;&#x3D;：<br>它是一个可以重载的二元操作符,可以用于比较两个对象是否相等。<br>对于内置值类型，&#x3D;&#x3D;判断的是两个对象的代数值是否相等。它会根据需要自动进行必要的类型转换，并根据两个对象的值是否相等返回true或者false，而对于用户定义的值类型，如果没有重载&#x3D;&#x3D;操作符，&#x3D;&#x3D;将是不能够使用的。<br>对于引用类型，&#x3D;&#x3D; 默认的行为与ReferenceEquals的行为相同，仅有两个对象指向同一个Reference的时候才返回true。但是.NET Framework中的类很多对&#x3D;&#x3D;进行了重载，例如String类的&#x3D;&#x3D;与Equals的行为相同，判断两个字符串的内容是否相等。所以在应用中，对于 系统定义的引用类型建议不要使用&#x3D;&#x3D;操作符，以免程序出现与预期不同的运行结果。<br>Equals():<br>它对于值类型和引用类型的定义不同，对于值类型，类型相同，并且数值相同(对于struct的每个成员都必须相同)，则Equals返回 true,否则返回false。而对于引用类型，默认的行为与ReferenceEquals的行为相同，仅有两个对象指向同一个Reference的时 候才返回true。可以根据需要对Equals进行重载，例如String类的Equals用于判断两个字符串的内容是否相等。</p><h3 id="什么叫做SQL注入，如何防止？请举例说明。"><a href="#什么叫做SQL注入，如何防止？请举例说明。" class="headerlink" title="什么叫做SQL注入，如何防止？请举例说明。"></a>什么叫做SQL注入，如何防止？请举例说明。</h3><p>利用sql语言漏洞获得合法身份登陆系统。如身份验证的程序设计成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SqlCommand com=new SqlCommand(<span class="string">&quot;Select * from users where username=&#x27;&quot;</span>+t_name.text+<span class="string">&quot;&#x27; and pwd=&#x27;&quot;</span>+t_pwd.text+<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">object obj=com.ExcuteScale();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(obj!=null)</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    //通过验证</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这段代码容易被sql注入。如用户在t_name中随便输入，在t_pwd中输入1’ or 1&#x3D;’1  就可以进入系统了。可以采用参数化查询语句进行防止。</p><h3 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h3><p>有关程序及其类型的数据被称为元数据（metadata），它们保存在程序的程序集中。程序在运行时，可以查看其它程序集及其本身的元数据，一个运行的程序查看本身及其它程序集的元数据的行为叫做反射（reflection）。</p><h3 id="用Singleton如何写设计模式"><a href="#用Singleton如何写设计模式" class="headerlink" title="用Singleton如何写设计模式"></a>用Singleton如何写设计模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">public sealed class Sun</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        private static Sun instance = null;</span><br><span class="line"></span><br><span class="line">        private <span class="function"><span class="title">Sun</span></span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">        public static Sun Instance</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            get</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> instance == null ? instance = new Sun() : instance;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line"><span class="comment">### 什么是Application Pool？</span></span><br><span class="line"></span><br><span class="line">Web应用，类似Thread Pool，提高并发性能。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 什么是虚函数？什么是抽像函数？</span></span><br><span class="line"></span><br><span class="line">虚函数：使它们可以在派生类中被重写，它自身可以有函数的实现。</span><br><span class="line">抽像函数：规定其非虚子类必须实现的函数，必须被重写，它自身不可有函数的实现</span><br><span class="line"><span class="comment">### 什么是XML？</span></span><br><span class="line"></span><br><span class="line">XML即可扩展标记语言（Extensible Markup Language）。它是一种以简单文本格式存储数据的方式，这意味着它可以被任何计算机读取，它在.Net中执行大量的任务，包括描述应用程序的配置、在Web服务之间传输信息等。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 什么是ASP.net中的用户控件？</span></span><br><span class="line"></span><br><span class="line">用户控件是能够在其中放置标记和 Web 服务器控件的容器。然后，可以将用户控件作为一个单元对待，为其定义属性和方法。有了用户控件，就不必为每个需要相同内容的页面多次创建用户界面，编写代码，而只需要创建一个用户控件，在几个页面中多次使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 列举一下你所了解的XML技术及其应用</span></span><br><span class="line"></span><br><span class="line">xml用于配置,用于保存静态数据类型.接触XML最多的是web Services..和config,soap协议</span><br><span class="line"></span><br><span class="line"><span class="comment">### ADO.net中常用的对象有哪些？分别描述一下。</span></span><br><span class="line"></span><br><span class="line">提供者对象：</span><br><span class="line"></span><br><span class="line">Connection 提供到数据源的基本连接。</span><br><span class="line">Command 使用它对数据源发出命令。</span><br><span class="line">CommandBuilder 此对象用于构建Sql命令，在基于单一表查询的对象中进行数据修改。</span><br><span class="line">DataReader 这是一个快速而易用的对象，可以从数据源中读取仅能前向和只读的数据流。</span><br><span class="line">DataAdapter 它是一个通用的类，可以执行针对数据源的各种操作，包括更新变动的数据，填充DataSet对象以及其它操作。</span><br><span class="line">用户对象：</span><br><span class="line"></span><br><span class="line">DataSet 它表示一组相关表，在应用程序中这些表作为一个单元来引用。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 什么是code-Behind技术。</span></span><br><span class="line"></span><br><span class="line">Code-Behind技术也称为代码隐藏技术，在ASP.NET中通过ASPX页面指向CS文件的方法实现显示逻辑和处理逻辑的分离，这样有助于web应用程序的创建。比如分工，美工和编程的可以个干各的，不用再像以前asp那样都代码和html代码混在一起，难以维护。 </span><br><span class="line"></span><br><span class="line"><span class="comment">### 什么是SOAP,有哪些应用。</span></span><br><span class="line"></span><br><span class="line">答:SOAP（Simple Object Access Protocol ）简单对象访问协议，是在分散或分布式的环境中交换信息并执行远程过程调用的协议，是一个基于XML的协议。使用SOAP，不用考虑任何特定的传输协议（最常用的还是HTTP协议），可以允许任何类型的对象或代码，在任何平台上，以任何一种语言相互通信。这种相互通信采用的是XML格式的消息。</span><br><span class="line"></span><br><span class="line"><span class="comment">### C#中 property 与 attribute的区别，他们各有什么用处，这种机制的好处在哪里？</span></span><br><span class="line"></span><br><span class="line">Attribute是Microsoft .NET Framework文件的元数据，可以用来向运行时描述你的代码，或者在程序运行的时候影响应用程序的行为。Attribute是派生于System.Attribute类之下，它的主要作用是描述</span><br><span class="line">Property是面向对象编程的基本概念，提供了对私有字段的访问封装，在C<span class="comment">#中以get和set访问器方法实现对可读可写属性的操作，提供了安全和灵活的数据访问封装。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### XML 与 HTML 的主要区别</span></span><br><span class="line"></span><br><span class="line">XML是HTML的补充，而不是HTML的替代品，XML和HTML是两种不同用途的语言。</span><br><span class="line">XML是被设计用来描述数据的，重点是：什么是数据，如何存放数据。而HTML是被设计用来显示数据的，重点是：显示数据以及如何显示数据更好上面。</span><br><span class="line">XML是自由的、可以扩展的,XML标记并不是预先规定好的，你必须创造你自XML标记并不是，而在HTML文档中必须使用规则中定义好的标记</span><br><span class="line">XML是区分大小写字母的，HTML不区分。</span><br><span class="line">在HTML中，如果上下文清楚地显示出段落或者列表键在何处结尾，那么你可以省略&lt;/p&gt;或者&lt;/li&gt;之类的结束 标记。在XML中，绝对不能省略掉结束标记。</span><br><span class="line">在XML中，拥有单个标记而没有匹配的结束标记的元素必须用一个 / 字符作为结尾。这样分析器就知道不用 查找结束标记了。</span><br><span class="line">在XML中，属性值必须封装在引号中。在HTML中，引号是可用可不用的。</span><br><span class="line">在HTML中，可以拥有不带值的属性名。在XML中，所有的属性都必须带有相应的值。</span><br><span class="line"></span><br><span class="line"><span class="comment">### c#中的三元运算符是？</span></span><br><span class="line"></span><br><span class="line">？：</span><br><span class="line"></span><br><span class="line"><span class="comment">### 当整数a赋值给一个object对像时，整数a将会被？</span></span><br><span class="line"></span><br><span class="line">装箱。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 类成员有5种可访问形式？</span></span><br><span class="line"></span><br><span class="line">public</span><br><span class="line">private</span><br><span class="line">protected</span><br><span class="line">internal </span><br><span class="line">protected internal</span><br><span class="line"></span><br><span class="line"><span class="comment">### public static const int A=1;这段代码有错误么？是什么？</span></span><br><span class="line"></span><br><span class="line">const表现的很像静态变量，它们对类的每个实例都是可见的，而且即使没有类的实例它们也可以使用，而与静态变量不同的是它没有自己的存储位置，而是在编译时被编译器替换，因此它不能声明为Static。</span><br><span class="line"></span><br><span class="line"><span class="comment">### float f=-123.567F; int i=(int)f;i的值现在是 </span></span><br><span class="line">-123  </span><br><span class="line">将f的值强制转换成int型，也就是将小数点后面的部分直接截取，保留整数部分。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 委托声明的关键字是 </span></span><br><span class="line">Delegate。 </span><br><span class="line"></span><br><span class="line"><span class="comment">### 在Asp.net中所有的自定义用户控件都必须继承自 </span></span><br><span class="line">Control。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 在.Net中所有可序列化的类都被标记为 </span></span><br><span class="line">[Serializable]。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 在.Net托管代码中我们不用担心内存漏洞,这是因为?</span></span><br><span class="line">有GC垃圾回收机制。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 下面的代码中有什么错误吗？_______</span></span><br><span class="line">```bash</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">class A</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public virtual void <span class="function"><span class="title">F</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;A.F&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class B:A</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public abstract override void F();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>abstract override 是不可以一起修饰.</p><h3 id="当类T只声明了私有实例构造函数时，则在T的程序文本外部，不可以从T派生出新的类？"><a href="#当类T只声明了私有实例构造函数时，则在T的程序文本外部，不可以从T派生出新的类？" class="headerlink" title="当类T只声明了私有实例构造函数时，则在T的程序文本外部，不可以从T派生出新的类？"></a>当类T只声明了私有实例构造函数时，则在T的程序文本外部，不可以从T派生出新的类？</h3><p>因为子类无法调用父类的构造函数，不可以直接创建T的任何实例。</p><h3 id="Switch语句的格式"><a href="#Switch语句的格式" class="headerlink" title="Switch语句的格式?"></a>Switch语句的格式?</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">switch (1 + 1)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> 1:</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> 2:</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;right&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">                default:</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;jiaoyanqing&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="在-Net中，类System-Web-UI-Page-可以被继承么？"><a href="#在-Net中，类System-Web-UI-Page-可以被继承么？" class="headerlink" title="在.Net中，类System.Web.UI.Page 可以被继承么？"></a>在.Net中，类System.Web.UI.Page 可以被继承么？</h3><p>可以。</p><h3 id="net的错误处理机制是什么？"><a href="#net的错误处理机制是什么？" class="headerlink" title=".net的错误处理机制是什么？"></a>.net的错误处理机制是什么？</h3><p>.net错误处理机制采用try-&gt;catch-&gt;finally结构，发生错误时，层层上抛，直到找到匹配的Catch为止。</p><p>异常：它是程序中的运行时错误，它违反了一个系统约束或应用程序约束，或出现了在正常操作时未预料的情形，如果程序没有提供处理该异常的代码，系统会挂起这个程序。</p><p>即使在Try块中有Return语句，Finally块也总是会在返回到调用代码之前执行。</p><h3 id="利用operator声明且仅声明了-x3D-x3D-，有什么错误么"><a href="#利用operator声明且仅声明了-x3D-x3D-，有什么错误么" class="headerlink" title="利用operator声明且仅声明了&#x3D;&#x3D;，有什么错误么?"></a>利用operator声明且仅声明了&#x3D;&#x3D;，有什么错误么?</h3><p>要同时修改Equale和GetHash() ? 重载了”&#x3D;&#x3D;” 就必须重载 “!&#x3D;” </p><h3 id="62-63-x3D-1-等式不成立，请移动一个数字（不可以移动减号和等于号），使得等式成立，如何移动？"><a href="#62-63-x3D-1-等式不成立，请移动一个数字（不可以移动减号和等于号），使得等式成立，如何移动？" class="headerlink" title="62-63&#x3D;1 等式不成立，请移动一个数字（不可以移动减号和等于号），使得等式成立，如何移动？"></a>62-63&#x3D;1 等式不成立，请移动一个数字（不可以移动减号和等于号），使得等式成立，如何移动？</h3><p>62移动成2的6次方</p><h3 id="对于这样的一个枚举类型：enum-Color-byte-Red-Green-Blue-Orange"><a href="#对于这样的一个枚举类型：enum-Color-byte-Red-Green-Blue-Orange" class="headerlink" title="对于这样的一个枚举类型：enum Color : byte { Red, Green, Blue, Orange };"></a>对于这样的一个枚举类型：enum Color : byte { Red, Green, Blue, Orange };</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string[] ss = Enum.GetNames(typeof(Color));</span><br><span class="line"></span><br><span class="line">Array array = Enum.GetValues(typeof(Color));</span><br></pre></td></tr></table></figure><h3 id="C-可否对内存进行直接的操作？"><a href="#C-可否对内存进行直接的操作？" class="headerlink" title="C#可否对内存进行直接的操作？"></a>C#可否对内存进行直接的操作？</h3><p>C#可以直接对内存进行操作。但是默认情况下，为了保持类型安全，C#不支持指针运算。不过，通过使用 unsafe 关键字，可以定义可使用指针的不安全上下文。在不安全的上下文中，类型可以是指针类型以及值类型或引用类型。</p><h3 id="ADO-NET相对于ADO等主要有什么改进？"><a href="#ADO-NET相对于ADO等主要有什么改进？" class="headerlink" title="ADO.NET相对于ADO等主要有什么改进？"></a>ADO.NET相对于ADO等主要有什么改进？</h3><p>ADO.NET不依赖于数据提供程序,而是使用.Net托管提供的程序。<br>不使用com<br>不在支持动态游标和服务器端游<br>可以断开connection而保留当前数据集可用<br>强类型转换<br>xml支持</p><h3 id="大概描述一下ASP-NET服务器控件的生命周期"><a href="#大概描述一下ASP-NET服务器控件的生命周期" class="headerlink" title="大概描述一下ASP.NET服务器控件的生命周期"></a>大概描述一下ASP.NET服务器控件的生命周期</h3><p>初始化 加载视图状态 处理回发数据 加载 发送回发更改通知 处理回发事件 预呈现 保存状态 呈现 处置 卸载</p><h3 id="匿名内部类是否可以继承其它类，是否可以实现接口"><a href="#匿名内部类是否可以继承其它类，是否可以实现接口" class="headerlink" title="匿名内部类是否可以继承其它类，是否可以实现接口?"></a>匿名内部类是否可以继承其它类，是否可以实现接口?</h3><p>不能，可以实现接口</p><h3 id="amp-和-amp-amp-的区别。"><a href="#amp-和-amp-amp-的区别。" class="headerlink" title="&amp;和&amp;&amp;的区别。"></a>&amp;和&amp;&amp;的区别。</h3><p>&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）.</p><h3 id="HashMap和Hashtable的区别。"><a href="#HashMap和Hashtable的区别。" class="headerlink" title="HashMap和Hashtable的区别。"></a>HashMap和Hashtable的区别。</h3><p>HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable.</p><h3 id="重载方法可以改变返回值的类型"><a href="#重载方法可以改变返回值的类型" class="headerlink" title="重载方法可以改变返回值的类型?"></a>重载方法可以改变返回值的类型?</h3><h3 id="error和exception有什么区别"><a href="#error和exception有什么区别" class="headerlink" title="error和exception有什么区别?"></a>error和exception有什么区别?</h3><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。</p><p>exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</p><h3 id="lt-gt-和-lt-gt-有什么区别？"><a href="#lt-gt-和-lt-gt-有什么区别？" class="headerlink" title="&lt;%# %&gt; 和 &lt;% %&gt; 有什么区别？"></a>&lt;%# %&gt; 和 &lt;% %&gt; 有什么区别？</h3><p>&lt;%# %&gt;表示绑定的数据源</p><p>&lt;% %&gt;是服务器端代码块</p><h3 id="重载与覆盖的区别？"><a href="#重载与覆盖的区别？" class="headerlink" title="重载与覆盖的区别？"></a>重载与覆盖的区别？</h3><p>方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系<br>覆盖是一个方法或一对方法产生关系；方法的重载是多个方法之间的关系。<br>覆盖要求参数列表相同；重载要求参数列表不同。<br>覆盖关系中，调用那个方法体，是根据对象的类型（对象对应存储空间类型）来决定；重载关系，是根据调用时的实参表与形参表来选择方法体的。</p><h3 id="分析以下代码。"><a href="#分析以下代码。" class="headerlink" title="分析以下代码。"></a>分析以下代码。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public static void <span class="built_in">test</span>(string ConnectString)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection();</span><br><span class="line"></span><br><span class="line">conn.ConnectionString = ConnectString;</span><br><span class="line"></span><br><span class="line">try</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">conn.Open();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">catch(Exception Ex)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">MessageBox.Show(Ex.ToString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">finally</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!conn.State.Equals(ConnectionState.Closed))</span><br><span class="line"></span><br><span class="line">conn.Close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问</p><ol><li>以上代码可以正确使用连接池吗？</li></ol><p>如果传入的connectionString是一模一样的话，可以正确使用连接池。不过一模一样的意思是，连字符的空格数，顺序完全一致。</p><h3 id="什么是WSE？目前最新的版本是多少？"><a href="#什么是WSE？目前最新的版本是多少？" class="headerlink" title="什么是WSE？目前最新的版本是多少？"></a>什么是WSE？目前最新的版本是多少？</h3><p>WSE (Web Service Extension) 包来提供最新的WEB服务安全保证，目前最新版本2.0。</p><h3 id="下面的例子中"><a href="#下面的例子中" class="headerlink" title="下面的例子中"></a>下面的例子中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        public static int X;</span><br><span class="line"></span><br><span class="line">        static <span class="function"><span class="title">A</span></span>()</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            X = B.Y + 1;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class B</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        public static int Y = A.X + 1;</span><br><span class="line"></span><br><span class="line">        static <span class="function"><span class="title">B</span></span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">static void <span class="function"><span class="title">Main</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;X=&#123;0&#125;,Y=&#123;1&#125;&quot;</span>, mytest.A.X, mytest.B.Y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生的输出结果是什么？</p><p>X&#x3D;2,Y&#x3D;1; </p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#中的值类型和引用类型</title>
      <link href="/2023/02/02/dotnet3/"/>
      <url>/2023/02/02/dotnet3/</url>
      
        <content type="html"><![CDATA[<p>1.1 值类型和引用类型的使用特点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1). 值类型：变量直接存储值，内存通常在栈中分配</span><br><span class="line">2). 引用类型：变量存储的是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆上分配，</span><br><span class="line">当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收</span><br></pre></td></tr></table></figure><p>1.2值类型和引用类型的说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1). 值类型：主要有 int（整型），bool（bool型），<span class="built_in">float</span>（单精度浮点数），double（双精度浮点数），</span><br><span class="line">char（字符串类型），struct（结构体），enum（枚举），sbyte，byte，short，ushort，uint，long，ulong</span><br><span class="line">2). 引用类型：主要有 string（字符串），object（对象），list（集合），class（类），interface（接口），</span><br><span class="line">array（数组），delegate（委托）、指针、slice切片、map、管道chan等都是引用类型</span><br></pre></td></tr></table></figure><p>指针类型</p><p>在不安全的上下文中，类型可以是指针类型、值类型或引用类型。 指针类型声明采用下列形式之一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>* identifier;</span><br><span class="line">void* identifier; //allowed but not recommended</span><br></pre></td></tr></table></figure><p>以下任一类型均可为指针类型：</p><p>sbyte、byte、short、ushort、int、uint、long、ulong、char、float、double、decimal 或 bool。</p><p>任何枚举类型。<br>任何指针类型。<br>任何仅包含非托管类型字段的用户定义的结构类型</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6新特性有哪些？</title>
      <link href="/2023/02/02/javascript6/"/>
      <url>/2023/02/02/javascript6/</url>
      
        <content type="html"><![CDATA[<p>es6新特性：const与let变量、模板字面量、解构、增强的对象字面量、for…of循环、展开运算符(…)、剩余参数(可变参数)、ES6箭头函数、类的支持、字符串模板、iterator、generator、模块、Symbols等。</p><p>1.let const<br>let 表示申明变量。const 表示申明常量。</p><p>常量定义了就不能改了。对象除外，因为对象指向的地址没变。</p><p>const在申明是必须被赋值。</p><p>两者都为块级作用域。</p><p>块级作用域与函数作用域。任何一对花括号({和｝)中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。函数作用域就好理解了，定义在函数中的参数和变量在函数外部是不可见的。</p><p>const a &#x3D; 1<br>a &#x3D; 0 &#x2F;&#x2F;报错</p><span id="more"></span><p>2.模块字符串<code> 可以使用反引号</code>来进行字符拼接。${}</p><p>3.解构<br>可以使用{}来对数组和对象进行解构。</p><p>4.函数的参数默认值<br>函数传参可以有默认值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// ES6；</span><br><span class="line"><span class="keyword">function</span> printText(text = <span class="string">&#x27;default&#x27;</span>) &#123;</span><br><span class="line">    console.log(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Spread &#x2F; Rest 操作符…<br>Spread &#x2F; Rest 操作符指的是 …，具体是 Spread 还是 Rest 需要看上下文语境。</li></ol><p>当被用于迭代器中时，它是一个 Spread 操作符：迭代器 (Iterator)是按照一定的顺序对一个或多个容器中的元素行进遍历的一种机制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(x,y,z) &#123;</span><br><span class="line">  console.log(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">let</span> arr = [1,2,3];</span><br><span class="line">foo(...arr); // 1 2 3</span><br></pre></td></tr></table></figure><p>当被用于函数传参时，是一个 Rest 操作符：当被用于函数传参时，是一个 Rest 操作符：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(...args) &#123;</span><br><span class="line">  console.log(args);</span><br><span class="line">&#125;</span><br><span class="line">foo( 1, 2, 3, 4, 5); // [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>6.箭头函数<br>不需要 function 关键字来创建函数</p><p>省略 return 关键字</p><p>this始终指向函数申明时所在作用域下的this值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//es5</span><br><span class="line">var fun = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line">//es6</span><br><span class="line">var fn = () =&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.for of<br>for of遍历的是键值对中的值</p><p>for in遍历的是键值对中的键</p><p>8.class类<br>ES6 中支持 class 语法，不过，ES6的class不是新的对象继承模型，它只是原型链的语法表现形式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;I&#x27;m a student.&quot;</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="title">study</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">&#x27;study!&#x27;</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  static <span class="function"><span class="title">read</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">&quot;Reading Now.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">console.log(typeof Student); // <span class="keyword">function</span></span><br><span class="line"><span class="built_in">let</span> stu = new Student(); // <span class="string">&quot;I&#x27;m a student.&quot;</span></span><br><span class="line">stu.study(); // <span class="string">&quot;study!&quot;</span></span><br><span class="line">stu.read(); // <span class="string">&quot;Reading Now.&quot;</span></span><br></pre></td></tr></table></figure><p>9.导入导出<br>导入improt</p><p>导出export default</p><p>10.promise<br>Promise 用于更优雅地处理异步请求。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  new Promise((resolve,reject) =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;成功了！&#x27;</span>)</span><br><span class="line">    &#125;,1000)</span><br><span class="line">    // reject(<span class="string">&quot;失败了，wuwu&quot;</span>)</span><br><span class="line">  &#125;).<span class="keyword">then</span>(data =&gt; &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>11.async&#x2F;await<br>比promise更好的解决了回调。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">async <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">  awiat fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.Symbol<br>新的基本类型</p><p>13.Set集合<br>存储任何类型的唯一值，即集合中所保存的数据元素是不重复的。类数组结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = [1,2,3,1]</span><br><span class="line"><span class="built_in">let</span> arrNew = new Set(arr)</span><br><span class="line">arrNew = [1,2,3]</span><br></pre></td></tr></table></figure><p>类数组不是数组，要转化为数组Array.form(arrNew)这样arrNew才是数组了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET.MVC 网站创建流程</title>
      <link href="/2023/02/02/dotnet2/"/>
      <url>/2023/02/02/dotnet2/</url>
      
        <content type="html"><![CDATA[<p>1).创建空解决方案文件夹：Test<br>2).右键Test&#x3D;》添加&#x3D;》新建解决方案文件夹（3个）<br>（1）Common<br>    右键&#x3D;》添加&#x3D;》新建项目&#x3D;》类库(.NET Standard),名为Common,用于存放通用类（连接类，加密算法…）<br>（2）DAL 为其添加2个类库<br>    Domain：添加实体类型数据类型<br>    Severice：存放业务接口<br>（3）Web<br>    右键&#x3D;》添加新建项目&#x3D;》ASP.NET应用程序（.NET Framework）选择MVC，去掉https项，创建MVC网站</p><p>至此 MVC项目网站创建完毕。        </p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET.MVC中Linq的基本语法</title>
      <link href="/2023/02/02/dotnet1/"/>
      <url>/2023/02/02/dotnet1/</url>
      
        <content type="html"><![CDATA[<p>LINQ即Language Integrated  Query(语言集成查询)<br>在平常的编写代码中，Linq提供了丰富的查询功能，就是有一点要注意，Linq中 where 的查询与SQL命令中的 Where 作用相似，都是起到范围限定，也就是的过滤作用，而判断条件就是它后面所接的子句<br>一、整理了一下，LINQ的基本语法有8种上下文关键字，注意是关键字，这些关键字的具体说明如下：<br>①from：指定范围变量和数据源<br>②where：根据bool表达式从数据源中筛选数据<br>③select：指定查询结果中的元素所具有的类型或变现形式<br>④group：对查询结果按照键值进行分组<br>⑤into：提供一个标识符，它可以充当对join、group、或者select子句结果的引用<br>⑥orderby：对查询出的元素进行排序<br>⑦join：按照两个指定匹配条件并使用 equals 来连接两个数据源<br>⑧let：产生一个用于储存查询表达式中的子表达式查询结果的变量范围</p><span id="more"></span><p>二、Linq单表查询的写法<br>(from 自定义的表名 in 声明的Model对象.查询的表<br>where 自定义的表名.字段1 关系运算符 值 &amp;&amp; 自定义的表名.字段2 关系运算符 值】<br>【orderby 自定义的表名.字段】<br>【select 自定义的表名】<br>【select new {<br>自定义的表名.字段1,<br>自定义的表名.字段2,<br>自定义的表名.字段3,<br>…<br>}】.ToList();<br>或者<br>(from 自定义的表名 in 声明的Model对象.查询的表<br>where 自定义的表名.字段1 关系运算符 值 &amp;&amp; 自定义的表名.字段2 关系运算符 值】<br>【orderby 自定义的表名.字段】<br>【select 自定义的表名】<br>【select new 类名{<br>类的属性1&#x3D;自定义的表名.字段1，<br>类的属性2&#x3D;自定义的表名.字段2，<br>…<br>}】.Single();<br>然后就是结尾提取数据的方式：<br>①Count： —-&gt;统计 或者 查询有多少条数据<br>②Single： —-&gt; 查询单个数据（结果只能有一条数据，必须&#x3D;1）<br>③ToList： —-&gt; 查询多条数据并转化为List （列表的方法）<br>④ToArray： —-&gt;查询多条（数组的方法）</p><p>再给出一个例子以便对照学习</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">var nba_stars = new List&lt;NBA_Star&gt; &#123;</span><br><span class="line">                new NBA_Star&#123; FirstName=<span class="string">&quot;迈克尔&quot;</span>, LastName=<span class="string">&quot;乔丹&quot;</span>, Champion=6&#125;,</span><br><span class="line">                new NBA_Star&#123; FirstName=<span class="string">&quot;蒂姆&quot;</span>, LastName=<span class="string">&quot;邓肯&quot;</span>, Champion=5&#125;,</span><br><span class="line">                new NBA_Star&#123; FirstName=<span class="string">&quot;勒布朗&quot;</span>, LastName=<span class="string">&quot;詹姆斯&quot;</span>, Champion=3&#125;,</span><br><span class="line">                new NBA_Star&#123; FirstName=<span class="string">&quot;史蒂芬 &quot;</span>, LastName=<span class="string">&quot;库里&quot;</span>, Champion=3&#125;,</span><br><span class="line">                new NBA_Star&#123; FirstName=<span class="string">&quot;史蒂夫 &quot;</span>, LastName=<span class="string">&quot;纳什&quot;</span>, Champion=0&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询语法查询出，至少得到5个总冠的球星</span><br><span class="line"> </span><br><span class="line">            var starts = from star <span class="keyword">in</span> nba_stars</span><br><span class="line">                         <span class="built_in">where</span> star.Champion &gt;= 5</span><br><span class="line">                         select new</span><br><span class="line">                         &#123;</span><br><span class="line">                             Name = star.FirstName + <span class="string">&quot;.&quot;</span> + star.LastName,</span><br><span class="line">                             Champion = star.Champion</span><br><span class="line">                         &#125;;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;至少五个总冠军的球星&quot;</span>);</span><br><span class="line">            foreach (var item <span class="keyword">in</span> starts)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($<span class="string">&quot;姓名：&#123;item.Name&#125;,总冠军:&#123;item.Champion&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"> </span><br><span class="line">            //查找至少得到5个总冠的球星的Lambda</span><br><span class="line">            var starts2 = nba_stars.Where(s =&gt; s.Champion &gt;= 5).Select(s =&gt; new</span><br><span class="line">            &#123;</span><br><span class="line">                Name = s.FirstName + <span class="string">&quot;.&quot;</span> + s.LastName,</span><br><span class="line">                Champion = s.Champion</span><br><span class="line">            &#125;);</span><br><span class="line"> </span><br><span class="line">            foreach (var item <span class="keyword">in</span> starts2)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($<span class="string">&quot;姓名：&#123;item.Name&#125;,总冠军:&#123;item.Champion&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            //五个总冠军的人数</span><br><span class="line">            var starts3 = nba_stars.Where(s =&gt; s.Champion &gt;= 5).Count();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;至少得到5个总冠的球星人数&quot;</span>+starts3);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"> </span><br><span class="line">            //最后一个冠军</span><br><span class="line">            var last_star = nba_stars.LastOrDefault();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最后一个夺冠球星&quot;</span>+last_star.FirstName+<span class="string">&quot;.&quot;</span>+last_star.LastName);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            //得到六冠的球星是</span><br><span class="line">            var Six_Star = nba_stars.Select(ss =&gt; new</span><br><span class="line">            &#123;</span><br><span class="line">                Name = ss.FirstName + <span class="string">&quot;.&quot;</span> + ss.LastName,</span><br><span class="line">                Champion = ss.Champion</span><br><span class="line">            &#125;).FirstOrDefault(s =&gt; s.Champion == 6);</span><br><span class="line">            Console.WriteLine($<span class="string">&quot;得到6冠的球星是&#123;Six_Star.Name&#125;&quot;</span>);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line"></span><br><span class="line">    ---Linq的增删改</span><br><span class="line">    InsertOnSubmit()  插入数据</span><br><span class="line">    SubmitChanges() 更新数据  </span><br><span class="line">    DeleteOnSubmit() 删除数据</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> Linq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json 和 package-lock.json 解析</title>
      <link href="/2022/10/21/vue28/"/>
      <url>/2022/10/21/vue28/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p> <a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json" title="" target="">package.json npm官方文档</a> </p>前端每个项目的根目录上有一个 package.json 文件，定义了当前项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等）。当运行 npm install命令时，会根据文件中的配置自动下载所需的模块配置项目所需的运行和开发环境。<p>package.json文件是一个JSON对象，该对象的每一个成员就是当前项目的一项设置。比如name就是项目名称，version是版本号。</p><span id="more"></span><p>下面是一个更完整的package.json文件，详细解释一下每个字段的真实含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;nhjkl </span><br><span class="line">    &quot;name&quot;: &quot;edemao&quot;, // 项目名称，必填</span><br><span class="line">    &quot;version&quot;:&quot;0.0.1&quot;, // 版本，必填</span><br><span class="line">    &quot;description&quot;: &quot;blog-site&quot;, // 描述信息</span><br><span class="line">    &quot;keywords&quot;:[&quot;node.js&quot;,&quot;blog&quot;, &quot;react&quot;], // 关键字信息数组</span><br><span class="line">    &quot;homepage&quot;: &quot;https://edemao.top&quot;, // 项目的主页地址</span><br><span class="line">    &quot;bugs&quot;:&#123;&quot;url&quot;: &quot;https://github.com/owner/project/issues&quot;,&quot;email&quot;:&quot;edemao@xxxx.com&quot; &#125;,</span><br><span class="line">    &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;edemao&quot;,</span><br><span class="line">    &quot;contributors&quot;:[&#123;&quot;name&quot;:&quot;edemao&quot;,&quot;email&quot;:&quot;edemao@xxxx.com&quot;&#125;],</span><br><span class="line">    &quot;files&quot;: [],</span><br><span class="line">    &quot;main&quot;: &quot;./dist/default.js&quot;,</span><br><span class="line">    &quot;bin&quot;: &#123;&#125;,</span><br><span class="line">    &quot;man&quot;: [],</span><br><span class="line">    &quot;directories&quot;: &quot;&quot;,</span><br><span class="line">    &quot;repository&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;git&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://path/to/url&quot;</span><br><span class="line">&#125;,</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">      &quot;start&quot;: &quot;webpack serve --config webpack.config.dev.js --progress&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;config&quot;: &#123; &quot;port&quot; : &quot;8080&quot; &#125;,</span><br><span class="line">    &quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">    &quot;devDependencies&quot;: &#123;</span><br><span class="line">        &quot;@babel/core&quot;: &quot;^7.14.3&quot;,</span><br><span class="line">        &quot;@babel/preset-env&quot;: &quot;^7.14.4&quot;,</span><br><span class="line">        &quot;@babel/preset-react&quot;: &quot;^7.13.13&quot;,</span><br><span class="line">        &quot;babel-loader&quot;: &quot;^8.2.2&quot;,</span><br><span class="line">        &quot;babel-plugin-import&quot;: &quot;^1.13.3&quot;,</span><br><span class="line">        &quot;glob&quot;: &quot;^7.1.7&quot;,</span><br><span class="line">        &quot;less&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">        &quot;less-loader&quot;: &quot;^9.0.0&quot;,</span><br><span class="line">        &quot;style-loader&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">        &quot;webpack&quot;: &quot;^5.38.1&quot;,</span><br><span class="line">        &quot;webpack-cli&quot;: &quot;^4.7.0&quot;,</span><br><span class="line">        &quot;webpack-dev-server&quot;: &quot;^3.11.2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;peerDependencies&quot;: &#123;</span><br><span class="line">        &quot;tea&quot;: &quot;2.x&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;bundledDependencies&quot;: [</span><br><span class="line">        &quot;renderized&quot;, &quot;super-streams&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;engines&quot;: &#123;&quot;node&quot;: &quot;0.10.x&quot;, &quot;npm&quot; : &quot;~1.0.20&quot;&#125;,</span><br><span class="line">&quot;os&quot; : [ &quot;win32&quot;, &quot;darwin&quot;, &quot;linux&quot; ],</span><br><span class="line">    &quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ],</span><br><span class="line">    &quot;private&quot;: true,</span><br><span class="line">    &quot;publishConfig&quot;: &#123;</span><br><span class="line">      &quot;tag&quot;: &quot;1.0.0&quot;,</span><br><span class="line">      &quot;registry&quot;: &quot;https://registry.npmjs.org/&quot;,</span><br><span class="line">      &quot;access&quot;: &quot;public&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;browser&quot;: &#123;</span><br><span class="line">      &quot;tipso&quot;: &quot;./node_modules/tipso/src/tipso.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;preferGlobal&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>name 字段<br>name必须小于等于214个字符，不能以.或_开头，不能有大写字母，因为名称最终成为 URL 的一部分，因此不能包含任何非URL安全字符。 npm官方建议我们不要使用与核心 node模块相同的名称。不要在名称中加 js或 node。如果需要可以使用engines来指定运行环境。name会作为参数传递给 require，因此它应该是简短的，但也需要具有合理的描述性。</p></li><li><p>version 字段<br>格式为 x.x.x，name 和 version 一起构成一个标识符，该标识符被认为是完全唯一的。每次发布时 version不能与已存在的一致。</p></li><li><p>description 字段<br>用于编写描述信息的字符串。有助于模块在 npm库被搜索发现。</p></li><li><p>keywords 字段<br>字符串组成的数组，有助于模块在 npm库被搜索发现。</p></li><li><p>homepage 字段<br>项目的主页地址。</p></li><li><p>bugs 字段<br>用于反馈项目问题的 issue 地址或者邮箱。</p></li><li><p>license字段<br>当前项目的协议—— 模块使用权限和限制。</p></li><li><p>author字段 &amp; contributors字段<br>author和 contributors均表示当前项目的共享者。</p></li></ol><p>contributors是对象数组，具有 name字段和可选的 url及 email字段。</p><p>author 可以是具有 name字段和可选的 url及 email字段的对象，或包括name, url 和 email 字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;author&quot;: &quot;edemao edemao@xx.com (https://edemao.top/)&quot;</span><br></pre></td></tr></table></figure><p>&#x2F;** 或 *&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;author&quot;: &#123;</span><br><span class="line">  &quot;name&quot; : &quot;edemao&quot;,</span><br><span class="line">  &quot;email&quot; : &quot;edemao@xx.com&quot;,</span><br><span class="line">  &quot;url&quot; : &quot;https://edemao.top/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><p>files字段<br>是模块下文件名或者文件夹名构成的数组，如果是文件夹名，则文件夹下所有的文件也会被包含进来（除非文件被另一些配置排除了）。可以在模块根目录下创建一个.npmignore文件，写在这个文件里边的文件即便被写在files属性里边也会被排除在外，这个文件的写法与.gitignore类似。</p></li><li><p>main字段<br>指定加载的入口文件，require导入的时候会加载这个文件。默认值是模块根目录下面的index.js。</p></li><li><p>bin字段<br>用来指定每个内部命令对应的可执行文件的位置。node工具必然会用到该字段。</p></li></ol><p>当我们编写一个cli工具的时候，需要指定工具的运行命令，比如webpack执行 bin&#x2F;index.js文件中的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;bin&quot;: &#123;</span><br><span class="line">  &quot;webpack&quot;: &quot;bin/index.js&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>档模块以依赖的方式被安装，如果存在bin选项，会在node_modules&#x2F;.bin&#x2F;生成对应的文件，并建立符号链接。由于node_modules&#x2F;.bin&#x2F;目录会在运行时加入系统的 PATH 变量，所以 npm run 就可以不带路径，直接通过命令来调用这些脚本文件。</p><p>所有 node_modules&#x2F;.bin&#x2F; 目录下的命令，都可以用 npm run [命令] 的格式运行。在命令行键入npm run，按tab键会显示所有可以使用的命令。</p><ol start="13"><li><p>man 字段<br>用来指定当前模块的 man文档的位置。</p></li><li><p>directories 字段<br>directories制定一些方法来描述模块的结构, 用于告诉用户每个目录在什么位置。</p></li><li><p>repository 字段<br>指定一个源代码存放地址。</p></li><li><p>scripts字段<br>指定了运行脚本命令的 npm 命令行缩写。使用 scripts字段可以快速的执行 shell 命令，可以理解为 alias。scripts可以直接使用node_modules中安装的模块，否则需要使用npx命令才能直接运行：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; npm run build 相当于 npx webpack<br>17. config 字段<br>用于添加命令行的环境变量。在server.js脚本就可以引用config字段的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(process.env.npm_package_config_port); // 8080</span><br></pre></td></tr></table></figure><p>也可以通过npm config set进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set edemao:port 8000</span><br></pre></td></tr></table></figure><ol start="18"><li>dependencies字段 &amp; devDependencies字段<br>dependencies指定项目运行所依赖的模块，devDependencies指定项目开发所需要的模块。</li></ol><p>值对象的每一项为一个键值对，前面是模块名称，后面是对应模块的版本范围。版本号遵循“major.minor.patch”的格式规定（主版本号.次版本号.修补版本号）。</p><p>修补版本中的更改表示不会破坏任何内容的错误修复。<br>次要版本的更改表示不会破坏任何内容的新功能。<br>主要版本的更改代表了一个破坏兼容性的大变化。 如果用户不适应主要版本更改，则内容将无法正常工作。</p><ol><li><p>固定版本：比如 5.3.1，安装时只安装指定版本。</p></li><li><p>波浪号：比如 ~5.3.1, 表示安装 5.3.x 的最新版本（不低于5.3.1），但是不安装5.4.x，也就是说安装时不改变大版本号和次要版本号。</p></li><li><p>插入号：比如 ˆ5.3.1, ，表示安装 5.x.x 的最新版本（不低于5.3.1），但是不安装 6.x.x，也就是说安装时不改变大版本号。需要注意的是，如果大版本号为 0，则插入号的行为与波浪号相同，这是因为此时处于开发阶段，即使是次要版本号变动，也可能带来程序的不兼容。</p></li><li><p>latest：安装最新版本。</p></li></ol><p>依赖安装时，–save参数表示写入dependencies，–save-dev表示写入devDependencies。</p><ol start="19"><li>peerDependencies 字段<br>peerDependencies字段，就是用来供插件指定其所需要的主工具的版本。</li></ol><p>比如，项目依赖 A 模块和 B 模块的 1.0.0 版本，而 A 模块本身又依赖 B 模块的 2.0.0 版本，用 peerDepedencies 指定 A 模块 使用 B 的时候，必须是 2.0.0 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;A&quot;,</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;B&quot;: &quot;2.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，从npm 3.0版开始，初始化的时候 peerDependencies不会默认带出。</p><ol start="20"><li><p>bundledDependencies 字段<br>指定发布的时候会被一起打包的模块。</p></li><li><p>optionalDependencies 字段<br>可选的项目运行依赖，写法和dependencies一样，不同之处在于如果安装失败不会导致 npm install失败。</p></li><li><p>engines 字段<br>指明模块运行的平台限制，比如 Node或者 npm的某个版本或者浏览器。</p></li><li><p>os 字段<br>指定模块能运行的操作系统。</p></li><li><p>cpu 字段<br>限制模块只能在某种架构的cpu下运行。</p></li><li><p>private 字段<br>布尔值，可以防止一个私有模块被无意间发布，true则 npm拒绝发布它。</p></li><li><p>publishConfig 字段<br>在模块发布时生效，用于设置发布用到的一些值的集合。如果你不想模块被默认标记 tag 为最新的，或者默认发布到公共仓库，可以在这里配置 tag 或仓库地址。如果只想让模块被发布到一个特定的 npm仓库，通常 publishConfig会配合 private来使用。</p></li><li><p>preferGlobal字段<br>布尔值，表示当用户不将该模块安装为全局模块时（即不用–global参数），true 表示显示警告。</p></li><li><p>browser 字段<br>指定供浏览器使用的模块版本。指定浏览器打包工具比如 Browserify该打包的文件。</p></li></ol><h2 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h2><p> <a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-lock-json" title="" target="">package-lock.json npm官方文档</a> </p><p>package-lock.json 目的是对整个依赖树进行版本固定的（锁死），会在 npm 更改 node_modules 目录树 或者 package.json 时自动生成的 ，它准确的描述了当前项目 npm 包的依赖树，并且在随后的安装中会根据 package-lock.json 来安装，保证是相同的一个依赖树，不考虑这个过程中是否有某个依赖有小版本的更新。项目中有 package-lock.json 文件，会根据 package-lock.json 里的内容来处理和安装依赖而不再根据 package.json，除非对 package.json 中依赖的版本进行了修改。</p><p>注意，使用cnpm install时候，并不会生成 package-lock.json 文件，也不会根据 package-lock.json 来安装依赖包，还是会使用 package.json 来安装。</p><p>package-lock.json 可能被意外更改的原因：</p><p>package.json 文件修改了；</p><p>挪动了包的位置：将部分包的位置从 dependencies 移动到 devDependencies 这种操作，虽然包未变，但是也会影响 package-lock.json，会将部分包的 dev 字段设置为 true；</p><p>registry 的影响：安装源 registry 不同，执行 npm i 时也会修改 package-lock.json<br>使用 npm ci来 而不是 npm i 安装依赖，可以避免异常的修改 package-lock.json。</p><p>目前很多项目代码 lockfileVersion &#x3D; 1，如果不小心更新node &gt; 14，可能会导致 lockfileVersion &#x3D; 2，而且会出现以下告警：</p><p>npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I’ll try to do my best with it!<br>v1&#x3D;&gt; npm v5 和 v6。<br>v2: &#x3D;&gt; npm v7&amp;v8，向后兼容 v1 锁文件。<br>v3: &#x3D;&gt; npm v7&amp;v8 没有 向后兼容性<br>需要在确定升级到 npm 8 和 package-lock.json 2 之前，对 npm 版本进行降级：</p><p>&#x2F;** 1. mac 或 linux 上需要先 运行： <em>&#x2F;<br>rm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm &amp;&amp; ln -s ~&#x2F;.npm-packages&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<br>&#x2F;</em>* 2. 全局安装旧 npm *&#x2F;</p><p>————————————————<br>版权声明：本文为CSDN博主「爱编程的喵汪人」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_42415326/article/details/124990255">https://blog.csdn.net/qq_42415326/article/details/124990255</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘 硬盘 软盘和内存之间的关系</title>
      <link href="/2022/10/20/html9/"/>
      <url>/2022/10/20/html9/</url>
      
        <content type="html"><![CDATA[<p>对于“软盘、硬盘、磁盘和内存”这4个概念想必很多小伙伴都有听说过。</p><p>尤其是硬盘和内存。我们去买电脑时有两个必须要考虑的参数，就是内存大小和硬盘大小，一般来说内存越大电脑运行速度会越快，硬盘越大能够存储的文件就越多。这么看来硬盘和内存好像毫无关联，其实不然，不管是内存和硬盘还是软盘和磁盘，它们本质上来说都是用来存储数据的。</p><p>一、磁盘</p><p>先来说说磁盘、硬盘和软盘之间的关系。</p><p>磁盘分为硬盘和软盘，它们都是外部存储器。外部存储器的特点就是不受断电的影响。那硬盘和软盘又有什么区别呢？</p><p>硬盘一般都装在机箱里面，容量较大，能够存储的文件比较多。</p><p>而软盘并不是装在电脑里面的，而是可移动的，一般用来存储文件和不同电脑之间进行拷贝文件，就功能上来说它和现在的U盘是一样的，只是外形、存储原理不一样，它的容量要比硬盘小的多，比如最常用的3.5英寸的软盘容量只有1.44MB，这么小的存储空间对于目前的我们来说基本上什么也干不了，而且它的存储速度要比硬盘慢很多。所以只有早期的电脑才会用软盘，目前已经被淘汰。</p><p>二、内存</p><p>前面说了外部存储器，再来说说内部存储器，也就是我们所说的内存。内存的的存储速度要比硬盘快很多，但是内存会受断电的影响，也就是说一断电里面存储的所有数据都会丢失。</p><p>举个例子，如果我们做了半天的word没点保存键，结果这时候家里停电了（或者死机了），那么再开机的时候我们做的那份word就没了。因为没点保存键的话，这些还没保存的数据就是暂时存储在内存里面的，一旦断电就会丢失，只有我们点击保存按钮后才会永久存储在磁盘中。 之前在网上看到了一个特别通俗好理解的说法：</p><p>做菜时，我们聪明的大脑和灵巧的双手就好比是CPU，切下来的菜好比是数据，切下来的菜总是先临时放在砧板上，砧板就好比是内存，砧板小了菜容易掉到地上，就象内存小了容易卡一样，最后菜才进锅子（硬盘）。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对HTML转义符号转换</title>
      <link href="/2022/10/19/html8/"/>
      <url>/2022/10/19/html8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> function escape2Html(str) &#123;</span><br><span class="line">    var arrEntities=&#123;&#x27;lt&#x27;:&#x27;&lt;&#x27;,&#x27;gt&#x27;:&#x27;&gt;&#x27;,&#x27;nbsp&#x27;:&#x27; &#x27;,&#x27;amp&#x27;:&#x27;&amp;&#x27;,&#x27;quot&#x27;:&#x27;&quot;&#x27;&#125;;</span><br><span class="line">   return str.replace(/&amp;(lt|gt|nbsp|amp|quot);/ig,function(all,t)&#123;return arrEntities[t];&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var s = escape2Html(&quot;&amp;lt;p&amp;gt;fasfas&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;fkasjfkas&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;kasfjalsk&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;kasjfkas&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;https://t12.baidu.com/it/u=2506809329,284241162&amp;amp;amp;fm=76&amp;quot; style=&amp;quot;max-width:100%;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&quot;);</span><br><span class="line"> </span><br><span class="line">alert(s);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron中使用Vue2网站构建跨平台的桌面应用程序</title>
      <link href="/2022/10/19/electron2/"/>
      <url>/2022/10/19/electron2/</url>
      
        <content type="html"><![CDATA[<p>Electron是一个可使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序的工具；</p><p>详细信息可查看博主整理的文档：<a href="https://xuexiup.github.io/2022/10/13/special3/">https://xuexiup.github.io/2022/10/13/special3/</a></p><p>这里我们详细介绍下Electron结合Vue2的使用（Vue3项目类似只是网站开发方式变了，Vue3用到了TS）</p><p>1）搭建 <a href="https://www.romanticlife.top/blog/0/256" title="" target="">Vue2.x的网站</a> 这里我命名为：my_electron_vue</p><p>2）进入网站目录安装Electron及打包工具</p><p>cd my_electron_vue</p><p>cnpm install –save-dev electron electron-packager</p><p>3)执行命令：cnpm install</p><p>4)在根目录下创建一个名为：main.js的文件</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*main.js */</span><br><span class="line">const &#123;</span><br><span class="line">    app,    </span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(&#x27;electron&#x27;)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">        webPreferences: &#123;&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    //这是vue项目启动的地址</span><br><span class="line">    win.loadURL(&#x27;http://localhost:8080&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().then(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(&#x27;window-all-closed&#x27;, () =&gt; &#123;</span><br><span class="line">    if (process.platform !== &#x27;darwin&#x27;) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在package.json文件中增加（最后会给出完整的packge.json文件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;my_electron_vue&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A Vue.js project&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;xjl&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br></pre></td></tr></table></figure><p>增加vue网站启动项和Electron启动项的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,</span><br><span class="line">  &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">  &quot;electron&quot;: &quot;electron-forge start&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;node build/build.js&quot;,    </span><br><span class="line">  &quot;serve&quot;: &quot;concurrently \&quot;npm run start\&quot; \&quot;npm run electron\&quot;&quot;,</span><br><span class="line">  &quot;package&quot;:&quot;electron-packager . Electron_Vue应用 --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里的serve指令是 指令start和electron的集合(点我查看npm一次执行多条指令的方法)</p><p>这样，通过执行指令：npm run serve便实现了：</p><p>1）先执行：npm run dev</p><p>启动Vue网站（这里网站地址为：<a href="http://localhost:8080），这个“端口号”以及“网站启动时是否默认在浏览器中打开”是可以在config》index.js中修改的。">http://localhost:8080），这个“端口号”以及“网站启动时是否默认在浏览器中打开”是可以在config》index.js中修改的。</a></p><p>2）接着自动执行：npm run electron</p><p>就会打开Electron窗体，由于我们在Electron入口main.js中使用了加载外部url的指令：win.loadURL(‘<a href="http://localhost:8080&#39;">http://localhost:8080&#39;</a>)</p><p>这个url也即是1）执行后启动的Vue网站。</p><p>这样，我们便实现了Electron结合Vue实现跨平台桌面应用的程序开发。</p><p>这里有一点是Electron默认不是热重载的，如果我们要实现Vue中的内容修改后保存Electron界面上的内容自动修改，请查看内容：Electron项目开发时如何实现热重载？</p><p>完整的package.json文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my_electron_vue&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A Vue.js project&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;xjl&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">    &quot;electron&quot;: &quot;electron-forge start&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;node build/build.js&quot;,    </span><br><span class="line">    &quot;serve&quot;: &quot;concurrently \&quot;npm run start\&quot; \&quot;npm run electron\&quot;&quot;,</span><br><span class="line">    &quot;package&quot;:&quot;electron-packager . Electron_Vue应用 --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;concurrently&quot;: &quot;^7.3.0&quot;,</span><br><span class="line">    &quot;vue&quot;: &quot;^2.5.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^7.1.2&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.22.1&quot;,</span><br><span class="line">    &quot;babel-helper-vue-jsx-merge-props&quot;: &quot;^2.0.3&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^7.1.1&quot;,</span><br><span class="line">    &quot;babel-plugin-syntax-jsx&quot;: &quot;^6.18.0&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.22.0&quot;,</span><br><span class="line">    &quot;babel-plugin-transform-vue-jsx&quot;: &quot;^3.5.0&quot;,</span><br><span class="line">    &quot;babel-preset-env&quot;: &quot;^1.3.2&quot;,</span><br><span class="line">    &quot;babel-preset-stage-2&quot;: &quot;^6.22.0&quot;,</span><br><span class="line">    &quot;chalk&quot;: &quot;^2.0.1&quot;,</span><br><span class="line">    &quot;copy-webpack-plugin&quot;: &quot;^4.0.1&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^0.28.0&quot;,</span><br><span class="line">    &quot;electron&quot;: &quot;^20.0.2&quot;,</span><br><span class="line">    &quot;electron-packager&quot;: &quot;^15.5.1&quot;,</span><br><span class="line">    &quot;electron-reloader&quot;: &quot;^1.2.3&quot;,</span><br><span class="line">    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;file-loader&quot;: &quot;^1.1.4&quot;,</span><br><span class="line">    &quot;friendly-errors-webpack-plugin&quot;: &quot;^1.6.1&quot;,</span><br><span class="line">    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,</span><br><span class="line">    &quot;node-notifier&quot;: &quot;^5.1.2&quot;,</span><br><span class="line">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;ora&quot;: &quot;^1.2.0&quot;,</span><br><span class="line">    &quot;portfinder&quot;: &quot;^1.0.13&quot;,</span><br><span class="line">    &quot;postcss-import&quot;: &quot;^11.0.0&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,</span><br><span class="line">    &quot;postcss-url&quot;: &quot;^7.2.1&quot;,</span><br><span class="line">    &quot;rimraf&quot;: &quot;^2.6.0&quot;,</span><br><span class="line">    &quot;semver&quot;: &quot;^5.3.0&quot;,</span><br><span class="line">    &quot;shelljs&quot;: &quot;^0.7.6&quot;,</span><br><span class="line">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.1.1&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^0.5.8&quot;,</span><br><span class="line">    &quot;vue-loader&quot;: &quot;^13.3.0&quot;,</span><br><span class="line">    &quot;vue-style-loader&quot;: &quot;^3.0.1&quot;,</span><br><span class="line">    &quot;vue-template-compiler&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.6.0&quot;,</span><br><span class="line">    &quot;webpack-bundle-analyzer&quot;: &quot;^2.9.0&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^2.9.1&quot;,</span><br><span class="line">    &quot;webpack-merge&quot;: &quot;^4.1.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;= 6.0.0&quot;,</span><br><span class="line">    &quot;npm&quot;: &quot;&gt;= 3.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;,</span><br><span class="line">    &quot;not ie &lt;= 8&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium和Python的区别</title>
      <link href="/2022/10/18/tool11/"/>
      <url>/2022/10/18/tool11/</url>
      
        <content type="html"><![CDATA[<p>Python是一门编程语言；<br>Selenium是一个用于Web应用程序测试的工具（IDE）。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样；<br>也就是说 selenium ide是用来录制， 录制完的脚本，通过RC启动不同浏览器运行测试；<br>python+selenium，是需要自己搭框架的，搭完框架后需要自己去写脚本，需要对selenium进行二次封装；<br>总结：Selenium可以用python语言来调用它(Selenium RC)进行测试，这样写脚本会更加灵活，更有效率，可读性强，重复运行稳定性高，而且也易于维护。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Selenium </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习之路</title>
      <link href="/2022/10/18/special5/"/>
      <url>/2022/10/18/special5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、解决nginx报错：No mapping for the Unicode character exists in the target multi-byte code pa.. </p></blockquote><h2 id="原因：nginx-路径中有中文"><a href="#原因：nginx-路径中有中文" class="headerlink" title="原因：nginx 路径中有中文"></a>原因：nginx 路径中有中文</h2><blockquote><p>2、[emerg] 12080#3204: bind() to 0.0.0.0:10099 failed (10013: An attempt was made to access a socket in a way forbidden by its access permissions)</p></blockquote><h2 id="原因：10099端口被占用了"><a href="#原因：10099端口被占用了" class="headerlink" title="原因：10099端口被占用了"></a>原因：10099端口被占用了</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">切换另一个没被占用的端口便可以解决问题。</span><br></pre></td></tr></table></figure><h3 id="如果我们想要查看10099端口被什么应用占用？"><a href="#如果我们想要查看10099端口被什么应用占用？" class="headerlink" title="如果我们想要查看10099端口被什么应用占用？"></a>如果我们想要查看10099端口被什么应用占用？</h3><p>1、按键盘win+r 打开运行界面，输入cmd，确定，打开管理员界<br>2、输入netstat -aon | findstr :10099  –查看对应的pid<br>3、输入 tasklist|findstr “对应的pid”    </p><span id="more"></span><blockquote><p>3、nginx常用的命令？</p></blockquote><p><a href="https://xuexiup.github.io/2022/10/13/tool3/" title="" target="">点我查看</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不要制止雨，愿将此生化作雨</title>
      <link href="/2022/10/13/article1/"/>
      <url>/2022/10/13/article1/</url>
      
        <content type="html"><![CDATA[<p>阳春三月，细雨霏霏，连绵不绝。而此刻，想必江南已是烟雨迷蒙时，只撑一把油纸伞，轻轻地踱步在其青石小巷上，便能够邂逅那份纯净与美好。</p><p>而在这春日芳菲的季节里，一场雨的到来，就足以给予世间万物以生机。也许在众人眼中，晴天乃是真正的挚爱，然于我而言，晴天虽好，若一味只是晴天，万物便会陷入贫瘠枯萎的境地;而雨天，却能润泽万物，洗涤净所有的尘埃，带走所有的阴霾与不快，留下的是纯净与质朴，清新与湿润的美好。</p><p>一场雨，在不同的人看来，自是有着不同的意义，也拥有着不同的情感。许是我们世人给予了雨水以生命，又或许是雨水本就同我们一般，拥有着专属于自己的情感。或喜或悲，或怒或伤，在不同的季节里，它总以自己独特得方式，带给人们更多的感动。</p><p>在诗词的境界里，有其清新明媚的雨，一如王维所看到的雨：“空山新雨后，天气晚来秋。明月松间照，清泉石上流。”此等雨水，饱含生机，如幽静山谷里的溪流，缓缓流淌，润物细无声。亦有沧桑之雨的状态：“雨中黄叶树，灯下白头人。”下着这般的雨，却让人有着历经沧桑世态过后的几许悲凉感叹。而在纳兰容若看来，却是一场极为深情的雨：“一往情深深几许?深山夕照深秋雨。”</p><p>亦有李商隐笔下最为缠绵之雨∶“何当共剪西窗烛，却话巴山夜雨时。”而在李清照看来，却是另一番的忧愁∶“梧桐更兼细雨，到黄昏，点点滴滴。这次第，怎一个愁字了得?”然我最喜欢的雨，是其宋代诗人蒋捷的诗∶“悲欢离合总无情，一任阶前，点滴到天明。”</p><p>也许一场雨的到来，总能够让我们世人为此而触景生情，得以挥洒出不同的行文来记录于此，但或许在千万人之中，没有谁能与自己的想法一致。同样一场雨，然赏雨之人、听雨之人，心境却大不相同。可在我看来，雨就是雨，它就是如此来去匆匆，去留无意，无论是春日的绵绵细雨，还是夏日里的滂沱大雨，又或是秋日里的缠绵细雨，或是那冬日里深沉寂静的冬雨，它都是一如既往，在该来的时候来，在离去的时候潇洒离去。</p><p>我爱雨，亦惜雨。每逢雨天，总爱倚着门扉听雨，听那豆的雨滴敲打我的屋檐，听那雨水的欢唱，随着门前的溪流缓缓流淌，泉水叮咚响，别有一番情趣。亦或是，独自一人，沏一盏茶，漫漫细饮，回忆一段经年往事。也可以独自品读一本好书，从初时落雨敲窗，直至风停雨住。那空气中泛着湿润的气息，而那书卷里，亦夹杂着旧日的余温，乃至淡淡的书香。我总可以，在雨天搁置下平日里的繁杂琐事，洒扫庭除、倚楼听雨、赌书泼茶，如此岁月，莫不静好。</p><p>当雨期渐渐久些的时候，身旁所有人都在抱怨雨天出行不便的怨言之时，我却不以为然，反倒一直乐在其中。我从不刻意地期盼雨过天晴，因为我知道，每一场雨的到来，都自有它的安排与道理，我们又何须执着，何须追问它何去何从?与其抱怨雨天，不如怀揣希望，等待雨过天晴之后，万物欣荣繁茂的景象，乃至空气间弥漫着的清新与温润，如此纯净的美景，置身其中，又何尝不是一件人生乐事?</p><p>不要制止风，愿将此生化作风;不要制止雨，愿将此生化作雨。如若可以，我愿化作那一场雨，或细腻柔情，或大气磅礴，每次来到人间，都以最好的姿态，洗礼与滋润万物，涤荡净人世的丑恶与肮脏，只留下至真、至善、至美，乃至留下一丝温情与感动。不问是否能停留于世间多久，尽管尽到自己本职，挥洒甘霖，沐浴众生。</p><p>每逢雨天，我也常常这般祈愿：但愿这世间的雨，不会像天上的雨那般滂沱;但愿这天上的雨，不会如人间的泪如此污浊;但愿人人都能因雨水的洗礼而成为明净的人。也愿人人都能找寻到属于自己那柄可以遮挡风雨的伞。</p><p>但或许，我们从无需刻意去找寻可以躲避风雨的屋檐，也无需苦苦等待那把属于自己的伞出现，时机一到，该来的终会来，该散的亦终会散，你又何须急于一时，而忽视了当下。</p><p>等风来，不如追风去;等雨停，不如同那暴风雨搏斗到底，在风雨中穿行，终有一日，走到风停雨住，便是生命的美好晴天。</p><p>人世红尘，修行之路更是如此。虽千难万险，布满荆棘，可如若你一味地退缩与逃避，就只会止步于前。唯有不断迎难而上，克服重重困难与考验，你才能从荒芜之地，走向那繁华似锦的地方，领略到那山清水秀，天地万物纯净明朗的一番美景。</p><p>雨声依旧，我心仍如明镜秋水，不为外物所动。一个人听雨，一个人做梦。掩上门扉，卸下心上的重担，得以在雨天放松自己的身心。任那窗外风雨飘摇，我只守着那片刻的安稳与宁静。在寂寞的时候，可以清澈地看到自己的内心，没有纷扰与纷乱，亦无恐惧与愁烦。</p><p>此后，无论晴天雨季，都坦然接受，欣然面对。只因我深信，无风雨不人生，而人生本就是风霜雨雪俱全，唯有百味皆尝，世情百态皆亲历亲尝，才能享受到最后那份怡然自得的满足与幸福，亦才能知晓其人生的真理。</p>]]></content>
      
      
      <categories>
          
          <category> 文化角 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis简介</title>
      <link href="/2022/10/13/redis8/"/>
      <url>/2022/10/13/redis8/</url>
      
        <content type="html"><![CDATA[<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>它通常被称为数据结构服务器，因为值（value）支持五种数据类型：</p><blockquote><p>string（字符串）<br>hash（哈希）<br>list（列表）<br>set（集合）<br>zset(sorted set：有序集合)。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置与命令</title>
      <link href="/2022/10/13/redis7/"/>
      <url>/2022/10/13/redis7/</url>
      
        <content type="html"><![CDATA[<p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。<br>你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.redis 127.0.0.1:6379&gt; CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE</span><br><span class="line">实例</span><br><span class="line">1.redis 127.0.0.1:6379&gt; CONFIG SET loglevel <span class="string">&quot;notice&quot;</span></span><br><span class="line">2.OK</span><br><span class="line">3.redis 127.0.0.1:6379&gt; CONFIG GET loglevel</span><br><span class="line">4. </span><br><span class="line">5.1) <span class="string">&quot;loglevel&quot;</span></span><br><span class="line">6.2) <span class="string">&quot;notice&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>redis.conf 配置项说明如下：</p><blockquote><ol><li><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p><p> daemonize no</p></li><li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入&#x2F;var&#x2F;run&#x2F;redis.pid文件，可以通过pidfile指定</p><p> pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</p></li><li><p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p><p> port 6379</p></li><li><p>绑定的主机地址</p><p> bind 127.0.0.1</p></li></ol><p>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p><pre><code>timeout 300</code></pre><ol start="6"><li><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p><p> loglevel verbose</p></li><li><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给&#x2F;dev&#x2F;null</p><p> logfile stdout</p></li><li><p>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</p><p> databases 16</p></li><li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><p> save <seconds> <changes></p><p> Redis默认配置文件中提供了三个条件：</p><p> save 900 1</p><p> save 300 10</p><p> save 60 10000</p><p> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p></li><li><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><p>rdbcompression yes</p></li><li><p>指定本地数据库文件名，默认值为dump.rdb</p><p>dbfilename dump.rdb</p></li><li><p>指定本地数据库存放目录</p><p>dir .&#x2F;</p></li><li><p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><p>slaveof <masterip> <masterport></p></li><li><p>当master服务设置了密码保护时，slav服务连接master的密码</p><p>masterauth <master-password></p></li><li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</p><p>requirepass foobared</p></li><li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><p>maxclients 128</p></li><li><p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><p>maxmemory <bytes></p></li><li><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><p>appendonly no</p></li><li><p>指定更新日志文件名，默认为appendonly.aof</p><p> appendfilename appendonly.aof</p></li><li><p>指定更新日志条件，共有3个可选值：     no：表示等操作系统进行数据缓存同步到磁盘（快）     always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）     everysec：表示每秒同步一次（折衷，默认值）</p><p>appendfsync everysec</p></li><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><p> vm-enabled no</p></li><li><p>虚拟内存文件路径，默认值为&#x2F;tmp&#x2F;redis.swap，不可多个Redis实例共享</p><p> vm-swap-file &#x2F;tmp&#x2F;redis.swap</p></li><li><p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><p> vm-max-memory 0</p></li><li><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><p> vm-page-size 32</p></li><li><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p><p> vm-pages 134217728</p></li><li><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><p> vm-max-threads 4</p></li><li><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><p>glueoutputbuf yes</p></li><li><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><p>hash-max-zipmap-entries 64</p><p>hash-max-zipmap-value 512</p></li><li><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><p>activerehashing yes</p></li><li><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><p>include &#x2F;path&#x2F;to&#x2F;local.conf</p></li></ol></blockquote>    ]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis keys 命令</title>
      <link href="/2022/10/13/redis6/"/>
      <url>/2022/10/13/redis6/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>1</th><th><a href="https://www.redis.net.cn/order/3528.html">DEL key 该命令用于在 key 存在是删除 key。</a></th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3529.html">DUMP key 序列化给定 key ，并返回被序列化的值。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3530.html">EXISTS key 检查给定 key 是否存在。</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3531.html">EXPIRE key seconds 为给定 key 设置过期时间。</a></td></tr><tr><td>5</td><td><a href="https://www.redis.net.cn/order/3532.html">EXPIREAT key timestamp EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</a></td></tr><tr><td>6</td><td><a href="https://www.redis.net.cn/order/3533.html">PEXPIRE key milliseconds 设置 key 的过期时间亿以毫秒计。</a></td></tr><tr><td>7</td><td><a href="https://www.redis.net.cn/order/3534.html">PEXPIREAT key milliseconds-timestamp 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</a></td></tr><tr><td>8</td><td><a href="https://www.redis.net.cn/order/3535.html">KEYS pattern 查找所有符合给定模式( pattern)的 key 。</a></td></tr><tr><td>9</td><td><a href="https://www.redis.net.cn/order/3536.html">MOVE key db 将当前数据库的 key 移动到给定的数据库 db 当中。</a></td></tr><tr><td>10</td><td><a href="https://www.redis.net.cn/order/3537.html">PERSIST key 移除 key 的过期时间，key 将持久保持。</a></td></tr><tr><td>11</td><td><a href="https://www.redis.net.cn/order/3538.html">PTTL key 以毫秒为单位返回 key 的剩余的过期时间。</a></td></tr><tr><td>12</td><td><a href="https://www.redis.net.cn/order/3539.html">TTL key 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</a></td></tr><tr><td>13</td><td><a href="https://www.redis.net.cn/order/3540.html">RANDOMKEY 从当前数据库中随机返回一个 key 。</a></td></tr><tr><td>14</td><td><a href="https://www.redis.net.cn/order/3541.html">RENAME key newkey 修改 key 的名称</a></td></tr><tr><td>15</td><td><a href="https://www.redis.net.cn/order/3542.html">RENAMENX key newkey 仅当 newkey 不存在时，将 key 改名为 newkey 。</a></td></tr><tr><td>16</td><td><a href="https://www.redis.net.cn/order/3543.html">TYPE key 返回 key 所储存的值的类型。</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五大数据类型的基本使用</title>
      <link href="/2022/10/13/redis5/"/>
      <url>/2022/10/13/redis5/</url>
      
        <content type="html"><![CDATA[<p>1.string</p><p>redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</p><p>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. redis 127.0.0.1:6379&gt; SET name <span class="string">&quot;redis.net.cn&quot;</span></span><br><span class="line"></span><br><span class="line">2. OK</span><br><span class="line"></span><br><span class="line">3. redis 127.0.0.1:6379&gt; GET name</span><br><span class="line"></span><br><span class="line">4. <span class="string">&quot;redis.net.cn&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.Hash（哈希）<br>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>每个 hash 可以存储 232 - 1 键值对（40多亿）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1. redis 127.0.0.1:6379&gt; HMSET user:1 username redis.net.cn password redis.net.cn points 200</span><br><span class="line"></span><br><span class="line">2. OK</span><br><span class="line"></span><br><span class="line">3. redis 127.0.0.1:6379&gt; HGETALL user:1</span><br><span class="line"></span><br><span class="line">4. 1) <span class="string">&quot;username&quot;</span></span><br><span class="line"></span><br><span class="line">5. 2) <span class="string">&quot;redis.net.cn&quot;</span></span><br><span class="line"></span><br><span class="line">6. 3) <span class="string">&quot;password&quot;</span></span><br><span class="line"></span><br><span class="line">7. 4) <span class="string">&quot;redis.net.cn&quot;</span></span><br><span class="line"></span><br><span class="line">8. 5) <span class="string">&quot;points&quot;</span></span><br><span class="line"></span><br><span class="line">9. 6) <span class="string">&quot;200&quot;</span></span><br><span class="line"></span><br><span class="line">10. redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>实例中我们使用了 Redis HMSET, HEGTALL 命令，user:1 为键值。</p><p>3.List（列表）<br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。</p><p>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. redis 127.0.0.1:6379&gt; lpush redis.net.cn redis</span><br><span class="line"></span><br><span class="line">2. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">3. redis 127.0.0.1:6379&gt; lpush redis.net.cn mongodb</span><br><span class="line"></span><br><span class="line">4. (<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line">5. redis 127.0.0.1:6379&gt; lpush redis.net.cn rabitmq</span><br><span class="line"></span><br><span class="line">6. (<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">7. redis 127.0.0.1:6379&gt; lrange redis.net.cn 0 10</span><br><span class="line"></span><br><span class="line">8. 1) <span class="string">&quot;rabitmq&quot;</span></span><br><span class="line"></span><br><span class="line">9. 2) <span class="string">&quot;mongodb&quot;</span></span><br><span class="line"></span><br><span class="line">10. 3) <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line">11. redis 127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>4.Set（集合）<br>Redis的Set是string类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>sadd 命令<br>添加一个string元素到,key对应的set集合中，成功返回1,如果元素以及在集合中返回0,key对应的set不存在返回错误</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. sadd key member</span><br><span class="line"></span><br><span class="line">1. redis 127.0.0.1:6379&gt; sadd redis.net.cn redis</span><br><span class="line"></span><br><span class="line">2. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">3. redis 127.0.0.1:6379&gt; sadd redis.net.cn mongodb</span><br><span class="line"></span><br><span class="line">4. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">5. redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq</span><br><span class="line"></span><br><span class="line">6. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">7. redis 127.0.0.1:6379&gt; sadd redis.net.cn rabitmq</span><br><span class="line"></span><br><span class="line">8. (<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">9. redis 127.0.0.1:6379&gt; smembers redis.net.cn</span><br><span class="line"></span><br><span class="line">10.  </span><br><span class="line"></span><br><span class="line">11. 1) <span class="string">&quot;rabitmq&quot;</span></span><br><span class="line"></span><br><span class="line">12. 2) <span class="string">&quot;mongodb&quot;</span></span><br><span class="line"></span><br><span class="line">13. 3) <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><p>注意：以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><p>6.zset(sorted set：有序集合)<br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>zadd 命令<br>添加元素到集合，元素在集合中存在则更新对应score</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1. zadd key score member </span><br><span class="line"></span><br><span class="line">1. redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 redis</span><br><span class="line"></span><br><span class="line">2. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">3. redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 mongodb</span><br><span class="line"></span><br><span class="line">4. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">5. redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq</span><br><span class="line"></span><br><span class="line">6. (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">7. redis 127.0.0.1:6379&gt; zadd redis.net.cn 0 rabitmq</span><br><span class="line"></span><br><span class="line">8. (<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">9. redis 127.0.0.1:6379&gt; ZRANGEBYSCORE redis.net.cn 0 1000</span><br><span class="line"></span><br><span class="line">10.  </span><br><span class="line"></span><br><span class="line">11. 1) <span class="string">&quot;redis&quot;</span></span><br><span class="line"></span><br><span class="line">12. 2) <span class="string">&quot;mongodb&quot;</span></span><br><span class="line"></span><br><span class="line">13. 3) <span class="string">&quot;rabitmq&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis五大数据类型的基本相关命令</title>
      <link href="/2022/10/13/redis4/"/>
      <url>/2022/10/13/redis4/</url>
      
        <content type="html"><![CDATA[<p>1.字符串命令</p><table><thead><tr><th>1</th><th><a href="https://www.redis.net.cn/order/3544.html">SET key value 设置指定 key 的值</a></th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3545.html">GET key 获取指定 key 的值。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3546.html">GETRANGE key start end 返回 key 中字符串值的子字符</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3547.html">GETSET key value 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</a></td></tr><tr><td>5</td><td><a href="https://www.redis.net.cn/order/3548.html">GETBIT key offset 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</a></td></tr><tr><td>6</td><td>[MGET key1 <a href="https://www.redis.net.cn/order/3549.html">key2..] 获取所有(一个或多个)给定 key 的值。</a></td></tr><tr><td>7</td><td><a href="https://www.redis.net.cn/order/3550.html">SETBIT key offset value 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</a></td></tr><tr><td>8</td><td><a href="https://www.redis.net.cn/order/3551.html">SETEX key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</a></td></tr><tr><td>9</td><td><a href="https://www.redis.net.cn/order/3552.html">SETNX key value 只有在 key 不存在时设置 key 的值。</a></td></tr><tr><td>10</td><td><a href="https://www.redis.net.cn/order/3553.html">SETRANGE key offset value 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</a></td></tr><tr><td>11</td><td><a href="https://www.redis.net.cn/order/3554.html">STRLEN key 返回 key 所储存的字符串值的长度。</a></td></tr><tr><td>12</td><td>[MSET key value <a href="https://www.redis.net.cn/order/3555.html">key value …] 同时设置一个或多个 key-value 对。</a></td></tr><tr><td>13</td><td>[MSETNX key value <a href="https://www.redis.net.cn/order/3556.html">key value …] 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</a></td></tr><tr><td>14</td><td><a href="https://www.redis.net.cn/order/3557.html">PSETEX key milliseconds value 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</a></td></tr><tr><td>15</td><td><a href="https://www.redis.net.cn/order/3558.html">INCR key 将 key 中储存的数字值增一。</a></td></tr><tr><td>16</td><td><a href="https://www.redis.net.cn/order/3559.html">INCRBY key increment 将 key 所储存的值加上给定的增量值（increment） 。</a></td></tr><tr><td>17</td><td><a href="https://www.redis.net.cn/order/3560.html">INCRBYFLOAT key increment 将 key 所储存的值加上给定的浮点增量值（increment） 。</a></td></tr><tr><td>18</td><td><a href="https://www.redis.net.cn/order/3561.html">DECR key 将 key 中储存的数字值减一。</a></td></tr><tr><td>19</td><td><a href="https://www.redis.net.cn/order/3562.html">DECRBY key decrement key 所储存的值减去给定的减量值（decrement） 。</a></td></tr><tr><td>20</td><td><a href="https://www.redis.net.cn/order/3563.html">APPEND key value 如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。</a></td></tr></tbody></table><span id="more"></span><p>2.hash 命令</p><table><thead><tr><th>1</th><th>[HDEL key field2 <a href="https://www.redis.net.cn/order/3564.html">field2] 删除一个或多个哈希表字段</a></th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3565.html">HEXISTS key field 查看哈希表 key 中，指定的字段是否存在。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3566.html">HGET key field 获取存储在哈希表中指定字段的值&#x2F;td&gt;</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3567.html">HGETALL key 获取在哈希表中指定 key 的所有字段和值</a></td></tr><tr><td>5</td><td><a href="https://www.redis.net.cn/order/3568.html">HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 。</a></td></tr><tr><td>6</td><td><a href="https://www.redis.net.cn/order/3569.html">HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</a></td></tr><tr><td>7</td><td><a href="https://www.redis.net.cn/order/3570.html">HKEYS key 获取所有哈希表中的字段</a></td></tr><tr><td>8</td><td><a href="https://www.redis.net.cn/order/3571.html">HLEN key 获取哈希表中字段的数量</a></td></tr><tr><td>9</td><td>[HMGET key field1 <a href="https://www.redis.net.cn/order/3572.html">field2] 获取所有给定字段的值</a></td></tr><tr><td>10</td><td>[HMSET key field1 value1 <a href="https://www.redis.net.cn/order/3573.html">field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中。</a></td></tr><tr><td>11</td><td><a href="https://www.redis.net.cn/order/3574.html">HSET key field value 将哈希表 key 中的字段 field 的值设为 value 。</a></td></tr><tr><td>12</td><td><a href="https://www.redis.net.cn/order/3575.html">HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值。</a></td></tr><tr><td>13</td><td><a href="https://www.redis.net.cn/order/3576.html">HVALS key 获取哈希表中所有值</a></td></tr><tr><td>14</td><td>HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>3.列表命令</p><table><thead><tr><th>1</th><th>[BLPOP key1 <a href="https://www.redis.net.cn/order/3577.html">key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</a></th></tr></thead><tbody><tr><td>2</td><td>[BRPOP key1 <a href="https://www.redis.net.cn/order/3578.html">key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3579.html">BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3580.html">LINDEX key index 通过索引获取列表中的元素</a></td></tr><tr><td>5</td><td><a href="https://www.redis.net.cn/order/3581.html">LINSERT key BEFORE|AFTER pivot value 在列表的元素前或者后插入元素</a></td></tr><tr><td>6</td><td><a href="https://www.redis.net.cn/order/3582.html">LLEN key 获取列表长度</a></td></tr><tr><td>7</td><td><a href="https://www.redis.net.cn/order/3583.html">LPOP key 移出并获取列表的第一个元素</a></td></tr><tr><td>8</td><td>[LPUSH key value1 <a href="https://www.redis.net.cn/order/3584.html">value2] 将一个或多个值插入到列表头部</a></td></tr><tr><td>9</td><td><a href="https://www.redis.net.cn/order/3585.html">LPUSHX key value 将一个或多个值插入到已存在的列表头部</a></td></tr><tr><td>10</td><td><a href="https://www.redis.net.cn/order/3586.html">LRANGE key start stop 获取列表指定范围内的元素</a></td></tr><tr><td>11</td><td><a href="https://www.redis.net.cn/order/3587.html">LREM key count value 移除列表元素</a></td></tr><tr><td>12</td><td><a href="https://www.redis.net.cn/order/3588.html">LSET key index value 通过索引设置列表元素的值</a></td></tr><tr><td>13</td><td><a href="https://www.redis.net.cn/order/3589.html">LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</a></td></tr><tr><td>14</td><td><a href="https://www.redis.net.cn/order/3590.html">RPOP key 移除并获取列表最后一个元素</a></td></tr><tr><td>15</td><td><a href="https://www.redis.net.cn/order/3591.html">RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</a></td></tr><tr><td>16</td><td>[RPUSH key value1 <a href="https://www.redis.net.cn/order/3592.html">value2] 在列表中添加一个或多个值</a></td></tr><tr><td>17</td><td><a href="https://www.redis.net.cn/order/3593.html">RPUSHX key value 为已存在的列表添加值</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>4.集合命令</p><table><thead><tr><th>1</th><th>[SADD key member1 <a href="https://www.redis.net.cn/order/3594.html">member2] 向集合添加一个或多个成员</a></th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3595.html">SCARD key 获取集合的成员数</a></td></tr><tr><td>3</td><td>[SDIFF key1 <a href="https://www.redis.net.cn/order/3596.html">key2] 返回给定所有集合的差集</a></td></tr><tr><td>4</td><td>[SDIFFSTORE destination key1 <a href="https://www.redis.net.cn/order/3597.html">key2] 返回给定所有集合的差集并存储在 destination 中</a></td></tr><tr><td>5</td><td>[SINTER key1 <a href="https://www.redis.net.cn/order/3598.html">key2] 返回给定所有集合的交集</a></td></tr><tr><td>6</td><td>[SINTERSTORE destination key1 <a href="https://www.redis.net.cn/order/3599.html">key2] 返回给定所有集合的交集并存储在 destination 中</a></td></tr><tr><td>7</td><td><a href="https://www.redis.net.cn/order/3600.html">SISMEMBER key member 判断 member 元素是否是集合 key 的成员</a></td></tr><tr><td>8</td><td><a href="https://www.redis.net.cn/order/3601.html">SMEMBERS key 返回集合中的所有成员</a></td></tr><tr><td>9</td><td><a href="https://www.redis.net.cn/order/3602.html">SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合</a></td></tr><tr><td>10</td><td><a href="https://www.redis.net.cn/order/3603.html">SPOP key 移除并返回集合中的一个随机元素</a></td></tr><tr><td>11</td><td>[SRANDMEMBER key <a href="https://www.redis.net.cn/order/3604.html">count] 返回集合中一个或多个随机数</a></td></tr><tr><td>12</td><td>[SREM key member1 <a href="https://www.redis.net.cn/order/3605.html">member2] 移除集合中一个或多个成员</a></td></tr><tr><td>13</td><td>[SUNION key1 <a href="https://www.redis.net.cn/order/3606.html">key2] 返回所有给定集合的并集</a></td></tr><tr><td>14</td><td>[SUNIONSTORE destination key1 <a href="https://www.redis.net.cn/order/3607.html">key2] 所有给定集合的并集存储在 destination 集合中</a></td></tr><tr><td>15</td><td>[SSCAN key cursor <a href="https://www.redis.net.cn/order/3608.html">MATCH pattern] [COUNT count] 迭代集合中的元素</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>5.有序集合命令</p><table><thead><tr><th>1</th><th>[ZADD key score1 member1 <a href="https://www.redis.net.cn/order/3609.html">score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数</a></th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3610.html">ZCARD key 获取有序集合的成员数</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3611.html">ZCOUNT key min max 计算在有序集合中指定区间分数的成员数</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3612.html">ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment</a></td></tr><tr><td>5</td><td>[ZINTERSTORE destination numkeys key <a href="https://www.redis.net.cn/order/3613.html">key …] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</a></td></tr><tr><td>6</td><td><a href="https://www.redis.net.cn/order/3614.html">ZLEXCOUNT key min max 在有序集合中计算指定字典区间内成员数量</a></td></tr><tr><td>7</td><td>[ZRANGE key start stop <a href="https://www.redis.net.cn/order/3615.html">WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员</a></td></tr><tr><td>8</td><td>[ZRANGEBYLEX key min max <a href="https://www.redis.net.cn/order/3616.html">LIMIT offset count] 通过字典区间返回有序集合的成员</a></td></tr><tr><td>9</td><td>[ZRANGEBYSCORE key min max <a href="https://www.redis.net.cn/order/3617.html">WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员</a></td></tr><tr><td>10</td><td><a href="https://www.redis.net.cn/order/3618.html">ZRANK key member 返回有序集合中指定成员的索引</a></td></tr><tr><td>11</td><td>[ZREM key member <a href="https://www.redis.net.cn/order/3619.html">member …] 移除有序集合中的一个或多个成员</a></td></tr><tr><td>12</td><td><a href="https://www.redis.net.cn/order/3620.html">ZREMRANGEBYLEX key min max 移除有序集合中给定的字典区间的所有成员</a></td></tr><tr><td>13</td><td><a href="https://www.redis.net.cn/order/3621.html">ZREMRANGEBYRANK key start stop 移除有序集合中给定的排名区间的所有成员</a></td></tr><tr><td>14</td><td><a href="https://www.redis.net.cn/order/3622.html">ZREMRANGEBYSCORE key min max 移除有序集合中给定的分数区间的所有成员</a></td></tr><tr><td>15</td><td>[ZREVRANGE key start stop <a href="https://www.redis.net.cn/order/3623.html">WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到底</a></td></tr><tr><td>16</td><td>[ZREVRANGEBYSCORE key max min <a href="https://www.redis.net.cn/order/3624.html">WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序</a></td></tr><tr><td>17</td><td><a href="https://www.redis.net.cn/order/3625.html">ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</a></td></tr><tr><td>18</td><td><a href="https://www.redis.net.cn/order/3626.html">ZSCORE key member 返回有序集中，成员的分数值</a></td></tr><tr><td>19</td><td>[ZUNIONSTORE destination numkeys key <a href="https://www.redis.net.cn/order/3627.html">key …] 计算给定的一个或多个有序集的并集，并存储在新的 key 中</a></td></tr><tr><td>20</td><td>[ZSCAN key cursor <a href="https://www.redis.net.cn/order/3628.html">MATCH pattern] [COUNT count] 迭代有序集合中的元素（包括元素成员和元素分值）</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis发布订阅</title>
      <link href="/2022/10/13/redis3/"/>
      <url>/2022/10/13/redis3/</url>
      
        <content type="html"><![CDATA[<p>Redis 发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>Redis 发布订阅命令</p><span id="more"></span><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td>[PSUBSCRIBE pattern <a href="https://www.redis.net.cn/order/3632.html">pattern …] 订阅一个或多个符合给定模式的频道。</a></td></tr><tr><td>2</td><td>[PUBSUB subcommand <a href="https://www.redis.net.cn/order/3633.html">argument [argument …]] 查看订阅与发布系统状态。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3634.html">PUBLISH channel message 将信息发送到指定的频道。</a></td></tr><tr><td>4</td><td>[PUNSUBSCRIBE <a href="https://www.redis.net.cn/order/3635.html">pattern [pattern …]] 退订所有给定模式的频道。</a></td></tr><tr><td>5</td><td>[SUBSCRIBE channel <a href="https://www.redis.net.cn/order/3636.html">channel …] 订阅给定的一个或多个频道的信息。</a></td></tr><tr><td>6</td><td>[UNSUBSCRIBE <a href="https://www.redis.net.cn/order/3637.html">channel [channel …]] 指退订给定的频道。</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis事务</title>
      <link href="/2022/10/13/redis2/"/>
      <url>/2022/10/13/redis2/</url>
      
        <content type="html"><![CDATA[<p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p><p>1） 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>2）事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><p>一个事务从开始到执行会经历以下三个阶段：</p><p>开始事务》命令入队》执行事务</p><span id="more"></span><p>以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事务， 一并执行事务中的所有命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">1. redis 127.0.0.1:6379&gt; MULTI</span><br><span class="line"></span><br><span class="line">2. OK</span><br><span class="line"></span><br><span class="line">3.  </span><br><span class="line"></span><br><span class="line">4. redis 127.0.0.1:6379&gt; SET book-name <span class="string">&quot;Mastering C++ in 21 days&quot;</span></span><br><span class="line"></span><br><span class="line">5. QUEUED</span><br><span class="line"></span><br><span class="line">6.  </span><br><span class="line"></span><br><span class="line">7. redis 127.0.0.1:6379&gt; GET book-name</span><br><span class="line"></span><br><span class="line">8. QUEUED</span><br><span class="line"></span><br><span class="line">9.  </span><br><span class="line"></span><br><span class="line">10. redis 127.0.0.1:6379&gt; SADD tag <span class="string">&quot;C++&quot;</span> <span class="string">&quot;Programming&quot;</span> <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line"></span><br><span class="line">11. QUEUED</span><br><span class="line"></span><br><span class="line">12.  </span><br><span class="line"></span><br><span class="line">13. redis 127.0.0.1:6379&gt; SMEMBERS tag</span><br><span class="line"></span><br><span class="line">14. QUEUED</span><br><span class="line"></span><br><span class="line">15.  </span><br><span class="line"></span><br><span class="line">16. redis 127.0.0.1:6379&gt; EXEC</span><br><span class="line"></span><br><span class="line">17. 1) OK</span><br><span class="line"></span><br><span class="line">18. 2) <span class="string">&quot;Mastering C++ in 21 days&quot;</span></span><br><span class="line"></span><br><span class="line">19. 3) (<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">20. 4) 1) <span class="string">&quot;Mastering Series&quot;</span></span><br><span class="line"></span><br><span class="line">21.    2) <span class="string">&quot;C++&quot;</span></span><br><span class="line"></span><br><span class="line">22.    3) <span class="string">&quot;Programming&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Redis 事务命令</p><table><thead><tr><th>序号</th><th>命令及描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.redis.net.cn/order/3638.html">DISCARD 取消事务，放弃执行事务块内的所有命令。</a></td></tr><tr><td>2</td><td><a href="https://www.redis.net.cn/order/3639.html">EXEC 执行所有事务块内的命令。</a></td></tr><tr><td>3</td><td><a href="https://www.redis.net.cn/order/3640.html">MULTI 标记一个事务块的开始。</a></td></tr><tr><td>4</td><td><a href="https://www.redis.net.cn/order/3641.html">UNWATCH 取消 WATCH 命令对所有 key 的监视。</a></td></tr><tr><td>5</td><td>[WATCH key <a href="https://www.redis.net.cn/order/3642.html">key …] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis连接</title>
      <link href="/2022/10/13/redis1/"/>
      <url>/2022/10/13/redis1/</url>
      
        <content type="html"><![CDATA[<p>Redis 连接命令主要是用于连接 redis 服务。</p><p>以下实例演示了客户端如何通过密码验证连接到 redis 服务，并检测服务是否在运行：</p><blockquote><p>1.redis 127.0.0.1:6379&gt; AUTH “password”</p><p>2.OK</p><p>3.redis 127.0.0.1:6379&gt; PING</p><p>4.PONG</p></blockquote><span id="more"></span><p>Redis 连接命令</p><p>1、<a href="https://www.redis.net.cn/order/3649.html" title="" target="">AUTH password</a> 验证密码是否正确</p><p>2、<a href="https://www.redis.net.cn/order/3650.html" title="" target="">ECHO message</a> 打印字符串</p><p>3、<a href="https://www.redis.net.cn/order/3651.html" title="" target="">PING</a> 查看服务是否运行</p><p>4、<a href="https://www.redis.net.cn/order/3652.html" title="" target="">QUIT</a> 关闭当前连接</p><p>5、<a href="https://www.redis.net.cn/order/3653.html" title="" target="">SELECT index</a> 切换到指定的数据库</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组的5种查询方式[find(),findIndex(),indexOf(),lastIndexOf(),include()]</title>
      <link href="/2022/10/13/javascript5/"/>
      <url>/2022/10/13/javascript5/</url>
      
        <content type="html"><![CDATA[<p>1.find() 返回数组中第一个满足条件的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find((item, index) =&gt; &#123; <span class="built_in">return</span>...&#125;)</span><br></pre></td></tr></table></figure><p>2.findIndex() 返回数组中第一个满足条件的索引(从0开始), 不满足返回-1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex((item, index) =&gt; &#123; <span class="built_in">return</span>...&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><p>3.indexOf() 返回数组中第一个满足条件的索引(从0开始), 不满足返回-1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.indexOf(searchElement[, fromIndex = 0])</span><br></pre></td></tr></table></figure><p>4.lastIndexOf() 返回数组中最后一个满足条件的索引(从0开始), 不满足返回-1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])</span><br></pre></td></tr></table></figure><p>5.include() 判断数组宏是否包含某值，返回 true 或 false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(searchElement[, fromIndex])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js给数组对象（每个）添加一个新元素/字段并赋值</title>
      <link href="/2022/10/13/javascript4/"/>
      <url>/2022/10/13/javascript4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组-map"><a href="#1-数组-map" class="headerlink" title="1.数组.map"></a>1.数组.map</h2><p>map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p><p>map() 方法按照原始数组元素顺序依次处理元素。</p><p>注意： map() 不会对空数组进行检测。</p><p>注意： map() 不会改变原始数组。</p><p>用法：array.map(function(currentValue,index,arr), thisValue)</p><p>currentValue必须。当前元素的值<br>index可选。当前元素的索引值<br>arr可选。当前元素属于的数组对象</p><span id="more"></span><h2 id="2-数组-forEach-方法"><a href="#2-数组-forEach-方法" class="headerlink" title="2.数组.forEach()方法"></a>2.数组.forEach()方法</h2><p>用法：array.forEach(function(currentValue, index, arr), thisValue)</p><p>注意：forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><p>forEach() 对于空数组是不会执行回调函数的。</p><p>使用举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.orderlist.forEach((value, index) =&gt; &#123;</span><br><span class="line">    value[<span class="string">&quot;fmoduleName&quot;</span>] = fmoduleName;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用base64</title>
      <link href="/2022/10/13/javascript3/"/>
      <url>/2022/10/13/javascript3/</url>
      
        <content type="html"><![CDATA[<p>1.安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save js-base64</span><br></pre></td></tr></table></figure><p>2.在项目文件中引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> Base64 = require(<span class="string">&quot;js-base64&quot;</span>).Base64;</span><br></pre></td></tr></table></figure><p>3.使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Base64.encode(<span class="string">&#x27;之郎&#x27;</span>) // 5LmL6YOO</span><br><span class="line"></span><br><span class="line">Base64.decode(<span class="string">&#x27;5LmL6YOO&#x27;</span>) // 之郎</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typscript与Javascript的对比</title>
      <link href="/2022/10/13/javascript2/"/>
      <url>/2022/10/13/javascript2/</url>
      
        <content type="html"><![CDATA[<p>Typescript（文件后缀名.ts）是Javascript(文件后缀名.js)的超集，可以在ts中使用原生js语法，即向下兼容。<br>Typescript简称“TS”，Javascript简称“JS”</p><span id="more"></span><blockquote><p>TS引入了 js中没有的“类”概念<br>TS中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。<br>TS没有重载概念，TypeScript可使用重载<br>TS对比js基础类型上，增加了 void&#x2F;never&#x2F;any&#x2F;元组&#x2F;枚举&#x2F;以及一些高级类型<br>TS需要静态编译，它提供了强类型与更多面向对象的内容。<br>TS最终仍要编译为弱类型的js文件，基于对象的原生的js，再运行。故ts相较java&#x2F;C#这样天生面向对象语言是有区别和局限的<br>TS是由微软牵头主导的，主要来自C#<br>TS是一个应用程序级的JS开发语言，可以开发或者说更适合开发大型应用。<br>TS是的超集，可以编译成纯JS这个和我们CSS中的Less或者Sass是很像的，<br>我们用更好的代码编写方式来进行编写，最后编译成原生的JS语言。<br>TS跨浏览器、跨操作系统、跨主机、且开源。由于最后编译成了JavaScript所以只要能运行JS的地方，都可以运行我们写的程序，这个设置在node.js里（TypeScript始于JavaScript，终于JavaScript。遵循JavaScript的语法和语义）<br>TS可以重用JS代码，调用流行的JS库。<br>TS提供了类、模块和接口，更易于构建组件和维护。</p></blockquote><h2 id="JS和TS的区别"><a href="#JS和TS的区别" class="headerlink" title="JS和TS的区别"></a>JS和TS的区别</h2><table><thead><tr><th>JS</th><th>TS</th></tr></thead><tbody><tr><td>运行时类型</td><td>静态类型</td></tr><tr><td>程序运行时进行类型检查</td><td>编译期进行类型检查</td></tr><tr><td>开发环境无法提供给帮助</td><td>开发环境能提供丰富的信息</td></tr><tr><td>需要进行大量测试，消耗时间覆盖测试场景，</td><td>大部分检查有语言自身完成</td></tr><tr><td>才能保证代码的覆盖率</td><td></td></tr><tr><td>class扩展较弱</td><td>拥有很强class扩展</td></tr><tr><td>仅支持版本等级较高浏览器</td><td>支持所有的浏览器</td></tr><tr><td>无访问控制权限</td><td>拥有完整的成员访问控制权限</td></tr><tr><td>无高级特性</td><td>静态成员等特性</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="系统设计能力"><a href="#系统设计能力" class="headerlink" title="系统设计能力"></a>系统设计能力</h2><table><thead><tr><th>JS</th><th>TS</th></tr></thead><tbody><tr><td>无</td><td>完备的系统设计能力</td></tr><tr><td>无</td><td>拥有interface接口规范</td></tr><tr><td>无</td><td>拥有abstrace抽象类</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中 数组的几个用法</title>
      <link href="/2022/10/13/javascript1/"/>
      <url>/2022/10/13/javascript1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-array-push"><a href="#1-array-push" class="headerlink" title="1.array.push()"></a>1.array.push()</h2><p>在数组尾部添加新的元素，并返回新的数组长度。</p><h2 id="2-array-unshift"><a href="#2-array-unshift" class="headerlink" title="2.array.unshift()"></a>2.array.unshift()</h2><p>在数组头部添加新的元素，并返回新的数组长度。[IE不支持]</p><h2 id="3-array-pop"><a href="#3-array-pop" class="headerlink" title="3.array.pop()"></a>3.array.pop()</h2><p>删除并返回数组最后一个元素。</p><h2 id="4-array-shift"><a href="#4-array-shift" class="headerlink" title="4.array.shift()"></a>4.array.shift()</h2><p>删除并返回数组第一个元素。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb的下载与安装</title>
      <link href="/2022/10/13/mongodb4/"/>
      <url>/2022/10/13/mongodb4/</url>
      
        <content type="html"><![CDATA[<p>1.去<a href="https://www.mongodb.com/try/download" title="" target="">Mongodb官网</a>下载安装包，选择Community版本就行</p><p>2.下载后解压【建议不放到C盘，节省C盘空间】</p><p>3.由于Mongodb不会自动创建存放数据以及配置文件和日志等路径，需要我们手动创建文件夹：</p><blockquote><p>1）data:用于存放数据库文件数据，并在其下创建一个名为 db 的文件夹<br>2）log:用于存放日志文件</p></blockquote><p>data以及log文件夹可以是其它名字，文件夹路径也不一定是在mongodb解压的根路径下【配置文件中指定关联】</p><p>这里我是在解压后的bin目录同级创建的以上文件夹。</p><span id="more"></span><p>4.创建配置文件信息，将Mongodb加入Window自启动服务</p><p>在这之前呢我们需要将Mongodb加入计算机环境变量：path的路径，就是解压后的bin目录路径；之后我们可以通过：</p><p>1）在cmd中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -dbpath D:\softcommon\mongodb-win32-x86_64-windows-5.0.8\data </span><br></pre></td></tr></table></figure><p>执行此命令，用以指定mongodb数据存放的路径（这个路径为实际创建路径，并非通用）；至此可在浏览器访问：<a href="http://localhost:27017/">http://localhost:27017</a>   （mongodb 默认连接端口27017）</p><p>2）在cmd中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -dbpath D:\softcommon\mongodb-win32-x86_64-windows-5.0.8\<span class="built_in">log</span>\mongodb.log</span><br></pre></td></tr></table></figure><p>用于指定日志存放路径。这样访问日志或者出错等日志都会有记录。</p><p>3）最后在bin目录打开cmd输入：Mongo</p><p>就可以进入mongodb数据库，不过这样做每次都要启动一次比较麻烦</p><p>所以我们采用下面的方法：</p><p>创建配置文件信息，将Mongodb加入Window自启动服务</p><p>具体的做法就是：</p><p>在bin目录同级创建一个config文件夹，并在其下创建配置文件脚本：mongo.conf</p><p>脚本信息及含义如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库的路径</span></span><br><span class="line">dbpath=D:\softcommon\mongodb-win32-x86_64-windows-5.0.8\data</span><br><span class="line"><span class="comment">#日志输出文件路径</span></span><br><span class="line">logpath=D:\softcommon\mongodb-win32-x86_64-windows-5.0.8\<span class="built_in">log</span>\mongodb.log</span><br><span class="line"><span class="comment">#错误输出日志采用追加模式</span></span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"><span class="comment">#启用日志文件，默认启用</span></span><br><span class="line">journal=<span class="literal">true</span></span><br><span class="line"><span class="comment">#过滤掉无用的日志信息，若需要调试使用设置为false</span></span><br><span class="line">quiet=<span class="literal">true</span></span><br><span class="line"><span class="comment">#bind ip=0.0.0.0</span></span><br><span class="line"><span class="comment">#端口号默认为27017</span></span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure><p>5.启动Mongodb配置服务</p><p>在bin目录下打开cmd，并输入以下【配置文件路径根据实际情况填充】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config D:\softcommon\mongodb-win32-x86_64-windows-5.0.8\config\mongo.conf --install -serviceName <span class="string">&quot;MongoDB&quot;</span></span><br></pre></td></tr></table></figure><p>然后回车，将mongodb作为系统服务；</p><p>如何自启动服务这个服务呢？</p><blockquote><p>在cmd中输入热键命令：services.msc</p></blockquote><p>回车，找到我们刚刚创建的名为:MongoDB的服务</p><p>双击选择面板中启动类型：自动</p><p>这样，mongodb服务就可以在电脑每次开机时自启动了</p><p>默认地址为：</p><p><a href="http://127.0.0.1:27017/">http://127.0.0.1:27017</a></p><p>或者</p><p><a href="http://localhost:27017/">http://localhost:27017</a></p><p>这样我们就可以直接通过在cmd 输入:mongo，进行数据库操作了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: couldn&#39;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Erro</title>
      <link href="/2022/10/13/mongodb3/"/>
      <url>/2022/10/13/mongodb3/</url>
      
        <content type="html"><![CDATA[<p>我们在cmd中输入：mongo如果出现错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: couldn<span class="string">&#x27;t connect to server 127.0.0.1:27017, connection attempt failed: SocketException: Erro</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>1）在Mongodb安装的根目录bin文件夹同级创建 data文件夹，再在其下创建db文件夹</p><p>2）打开终端执行： mongod</p><p>3）再打开一个终端执行：mongo</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL到MongoDB的映射图表</title>
      <link href="/2022/10/13/mongodb2/"/>
      <url>/2022/10/13/mongodb2/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>SQL术语&#x2F;概念</th><th>MongoDB术语&#x2F;概念</th></tr></thead><tbody><tr><td>database</td><td><a href="https://docs.mongodb.com/manual/reference/glossary/#term-database">database</a></td></tr><tr><td>table</td><td><a href="https://docs.mongodb.com/manual/reference/glossary/#term-collection">collection</a></td></tr><tr><td>row</td><td>document or BSON document</td></tr><tr><td>column</td><td><a href="https://docs.mongodb.com/manual/reference/glossary/#term-field">field</a></td></tr><tr><td>index</td><td><a href="https://docs.mongodb.com/manual/reference/glossary/#term-index">index</a></td></tr><tr><td>table joins</td><td><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#pipe._S_lookup">$lookup, 嵌入文档</a></td></tr><tr><td>primary key （指定任何唯一的列或列组合作为主键。）</td><td><a href="https://docs.mongodb.com/manual/reference/glossary/#term-primary-key">primary key （在MongoDB中，主键自动设置为_id字段。）</a></td></tr><tr><td>aggregation (e.g. group by)</td><td><a href="https://docs.mongodb.com/manual/reference/sql-aggregation-comparison/">aggregation pipeline See the SQL to Aggregation Mapping Chart.</a></td></tr><tr><td>SELECT INTO NEW_TABLE</td><td>$out See the SQL to Aggregation Mapping Chart.</td></tr><tr><td>MERGE INTO TABLE</td><td>$merge (Available starting in MongoDB 4.2) See the SQL to Aggregation Mapping Chart.</td></tr><tr><td>Transactions</td><td><a href="https://docs.mongodb.com/manual/core/transactions/">transactions 在许多情况下，非规范化数据模型（嵌入式文档和数组） 将继续是您数据和用例的最佳选择，而不是多文档事务。 也就是说，在许多情况下，对数据进行适当的建模将最 大程度地减少对多文档交易的需求。</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 常用的数据库命令</title>
      <link href="/2022/10/13/mongodb1/"/>
      <url>/2022/10/13/mongodb1/</url>
      
        <content type="html"><![CDATA[<h2 id="1、切换数据库-x2F-如果数据库不存在则创建数据库-test是具体的数据库名称"><a href="#1、切换数据库-x2F-如果数据库不存在则创建数据库-test是具体的数据库名称" class="headerlink" title="1、切换数据库&#x2F;如果数据库不存在则创建数据库[test是具体的数据库名称]"></a>1、切换数据库&#x2F;如果数据库不存在则创建数据库[test是具体的数据库名称]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="2、如果你想查看所有数据库，可以使用-show-dbs-命令"><a href="#2、如果你想查看所有数据库，可以使用-show-dbs-命令" class="headerlink" title="2、如果你想查看所有数据库，可以使用 show dbs 命令"></a>2、如果你想查看所有数据库，可以使用 show dbs 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><h2 id="3、MongoDB-删除数据库的语法"><a href="#3、MongoDB-删除数据库的语法" class="headerlink" title="3、MongoDB 删除数据库的语法"></a>3、MongoDB 删除数据库的语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.dropDatabase()</span><br></pre></td></tr></table></figure><h2 id="4、写入一条记录【如果表不存在会自动创建"><a href="#4、写入一条记录【如果表不存在会自动创建" class="headerlink" title="4、写入一条记录【如果表不存在会自动创建"></a>4、写入一条记录【如果表不存在会自动创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table2.insertOne(&#123; o1: <span class="string">&quot;1&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="5、写入多条记录"><a href="#5、写入多条记录" class="headerlink" title="5、写入多条记录"></a>5、写入多条记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.insertMany([&#123; o1: <span class="string">&quot;4&quot;</span> &#125;, &#123; o1: <span class="string">&quot;5&quot;</span>, o2: <span class="string">&quot;6&quot;</span> &#125;, &#123; o2: <span class="string">&quot;7&quot;</span> &#125;])</span><br></pre></td></tr></table></figure><h2 id="6、查询所有"><a href="#6、查询所有" class="headerlink" title="6、查询所有"></a>6、查询所有</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.find()</span><br></pre></td></tr></table></figure><h2 id="7、查找指定条件的记录-field（字段）o1-值-为”3”"><a href="#7、查找指定条件的记录-field（字段）o1-值-为”3”" class="headerlink" title="7、查找指定条件的记录[field（字段）o1 值 为”3”]"></a>7、查找指定条件的记录[field（字段）o1 值 为”3”]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.find(&#123; o1: <span class="string">&quot;3&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="8、查找出符合前者条件的一条记录，然后以后者替换前者"><a href="#8、查找出符合前者条件的一条记录，然后以后者替换前者" class="headerlink" title="8、查找出符合前者条件的一条记录，然后以后者替换前者"></a>8、查找出符合前者条件的一条记录，然后以后者替换前者</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.replaceOne(&#123; o1: <span class="string">&quot;1&quot;</span> &#125;, &#123; o1: <span class="string">&quot;3&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="9、MongoDB-使用-update-和-save-方法来更新集合中的文档。"><a href="#9、MongoDB-使用-update-和-save-方法来更新集合中的文档。" class="headerlink" title="9、MongoDB 使用 update() 和 save() 方法来更新集合中的文档。"></a>9、MongoDB 使用 update() 和 save() 方法来更新集合中的文档。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.update(&#123; o1: <span class="string">&quot;1&quot;</span> &#125;, &#123; <span class="variable">$set</span>: &#123; o1: <span class="string">&quot;mongodb&quot;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><h2 id="10、写入文档"><a href="#10、写入文档" class="headerlink" title="10、写入文档"></a>10、写入文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.table3.insert(&#123;</span><br><span class="line">    title: <span class="string">&#x27;mongodb教程&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;一个nosql数据库&#x27;</span>,</span><br><span class="line">    by: <span class="string">&#x27;菜鸟教程&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class="line">    tags: [<span class="string">&#x27;mongodb&#x27;</span>, <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;NoSQL&#x27;</span>],</span><br><span class="line">    likes: 100</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="11、将数据定义成一个变量，然后insert"><a href="#11、将数据定义成一个变量，然后insert" class="headerlink" title="11、将数据定义成一个变量，然后insert"></a>11、将数据定义成一个变量，然后insert</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">document = (&#123;</span><br><span class="line">    title: <span class="string">&#x27;mongodb教程&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;一个nosql数据库&#x27;</span>,</span><br><span class="line">    by: <span class="string">&#x27;菜鸟教程&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://www.runoob.com&#x27;</span>,</span><br><span class="line">    tags: [<span class="string">&#x27;mongodb&#x27;</span>, <span class="string">&#x27;database&#x27;</span>, <span class="string">&#x27;NoSQL&#x27;</span>],</span><br><span class="line">    likes: 100</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.table3.insert(document);</span><br></pre></td></tr></table></figure><h2 id="12、从集合中查询特定数据"><a href="#12、从集合中查询特定数据" class="headerlink" title="12、从集合中查询特定数据"></a>12、从集合中查询特定数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.table1.find(&#123; o1: <span class="string">&#x27;mongodb&#x27;</span> &#125;)</span><br><span class="line">//db.table3.find().pretty()</span><br></pre></td></tr></table></figure><h2 id="13、从集合中删除某文档"><a href="#13、从集合中删除某文档" class="headerlink" title="13、从集合中删除某文档"></a>13、从集合中删除某文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.deleteOne(&#123; o1: <span class="string">&#x27;7&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="14、删除集合中所有的文档"><a href="#14、删除集合中所有的文档" class="headerlink" title="14、删除集合中所有的文档"></a>14、删除集合中所有的文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table2.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="15、filter-查询过滤文档"><a href="#15、filter-查询过滤文档" class="headerlink" title="15、filter 查询过滤文档"></a>15、filter 查询过滤文档</h2><h2 id="16、删除集合中符合条件的所有文档"><a href="#16、删除集合中符合条件的所有文档" class="headerlink" title="16、删除集合中符合条件的所有文档"></a>16、删除集合中符合条件的所有文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.deleteMany(&#123; o1: <span class="string">&#x27;5&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="17、删除单个文档或与指定过滤器匹配的所有文档。"><a href="#17、删除单个文档或与指定过滤器匹配的所有文档。" class="headerlink" title="17、删除单个文档或与指定过滤器匹配的所有文档。"></a>17、删除单个文档或与指定过滤器匹配的所有文档。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.remove(&#123; o2: <span class="string">&#x27;7&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="18、删除指定order排序的第一个文档"><a href="#18、删除指定order排序的第一个文档" class="headerlink" title="18、删除指定order排序的第一个文档"></a>18、删除指定order排序的第一个文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table3.findOneAndDelete(&#123; url: <span class="string">&#x27;http://www.runoob.com&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="19、批量写入、更新、删除操作【有序、无序】-默认情况下，bulkWrite-执行有序的写入。"><a href="#19、批量写入、更新、删除操作【有序、无序】-默认情况下，bulkWrite-执行有序的写入。" class="headerlink" title="19、批量写入、更新、删除操作【有序、无序】;默认情况下，bulkWrite() 执行有序的写入。"></a>19、批量写入、更新、删除操作【有序、无序】;默认情况下，bulkWrite() 执行有序的写入。</h2><h3 id="要指定无序的写入，请在选项文档中设置ordered-false"><a href="#要指定无序的写入，请在选项文档中设置ordered-false" class="headerlink" title="要指定无序的写入，请在选项文档中设置ordered:false"></a>要指定无序的写入，请在选项文档中设置ordered:false</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    db.table1.bulkWrite(</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                insertOne: &#123;</span><br><span class="line">                    <span class="string">&quot;document&quot;</span>:</span><br><span class="line">                        &#123;</span><br><span class="line">                            o1: <span class="string">&quot;4&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                updateOne: &#123;</span><br><span class="line">                    <span class="string">&quot;filter&quot;</span>: &#123; o1: <span class="string">&quot;4&quot;</span> &#125;,</span><br><span class="line">                    <span class="string">&quot;update&quot;</span>: &#123; o1: <span class="string">&#x27;3&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                deleteOne: &#123;</span><br><span class="line">                    <span class="string">&quot;filter&quot;</span>: &#123; o1: <span class="string">&#x27;4&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                replaceOne: &#123;</span><br><span class="line">                    <span class="string">&quot;filter&quot;</span>: &#123; o1: <span class="string">&#x27;3&#x27;</span> &#125;,</span><br><span class="line">                    <span class="string">&quot;replacement&quot;</span>: &#123; o1: <span class="string">&#x27;5&#x27;</span>, o2: <span class="string">&#x27;6&#x27;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">catch (e) &#123; <span class="built_in">print</span>(e) &#125;</span><br><span class="line">db.table1.insertOne(&#123; o3: <span class="string">&#x27;这是一句话&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h2 id="20、使用-text查询操作符对具有文本索引的集合执行文本索引。"><a href="#20、使用-text查询操作符对具有文本索引的集合执行文本索引。" class="headerlink" title="20、使用$text查询操作符对具有文本索引的集合执行文本索引。"></a>20、使用$text查询操作符对具有文本索引的集合执行文本索引。</h2><h3 id="查询后排序：sort-1（升序）-x2F-1-降序"><a href="#查询后排序：sort-1（升序）-x2F-1-降序" class="headerlink" title="查询后排序：sort:1（升序）&#x2F;-1(降序)"></a>查询后排序：sort:1（升序）&#x2F;-1(降序)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.table1.find().<span class="built_in">sort</span>(&#123;o1:1&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-dialog 问题</title>
      <link href="/2022/10/13/ui3/"/>
      <url>/2022/10/13/ui3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-弹出层被遮罩挡住"><a href="#1-弹出层被遮罩挡住" class="headerlink" title="1.弹出层被遮罩挡住"></a>1.弹出层被遮罩挡住</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:modal-append-to-body=<span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-点击取消或确定，弹窗关闭后会再次打开一下，又关闭"><a href="#2-点击取消或确定，弹窗关闭后会再次打开一下，又关闭" class="headerlink" title="2.点击取消或确定，弹窗关闭后会再次打开一下，又关闭"></a>2.点击取消或确定，弹窗关闭后会再次打开一下，又关闭</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-if=<span class="string">&quot;dialogFormVisible&quot;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="3-完整的定义"><a href="#3-完整的定义" class="headerlink" title="3.完整的定义"></a>3.完整的定义</h3><pre><code class="bash">     &lt;el-dialog          title=&quot;登录&quot;          v-if=&quot;dialogFormVisible&quot;          :visible.sync=&quot;dialogFormVisible&quot;          :modal-append-to-body=&quot;false&quot;          width=&quot;30%&quot;        &gt;&lt;/el-dialog&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI控件el-tree方法renderContent的使用</title>
      <link href="/2022/10/13/ui2/"/>
      <url>/2022/10/13/ui2/</url>
      
        <content type="html"><![CDATA[<p>renderContent并不会影响代码中既定tree数据层结构渲染加载；</p><p>这里的作用是根据tree的特定level调整其样式：</p><h2 id="el-tree"><a href="#el-tree" class="headerlink" title="el-tree"></a>el-tree</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line"></span><br><span class="line">                :render-content=<span class="string">&quot;renderContent&quot;</span></span><br><span class="line"></span><br><span class="line">                :data=<span class="string">&quot;treedata&quot;</span></span><br><span class="line"></span><br><span class="line">                default-expand-all</span><br><span class="line"></span><br><span class="line">                :show-checkbox=<span class="string">&quot;showcheckbox&quot;</span></span><br><span class="line"></span><br><span class="line">                highlight-current</span><br><span class="line"></span><br><span class="line">                node-key=<span class="string">&quot;itemId&quot;</span></span><br><span class="line"></span><br><span class="line">                :expand-on-click-node=<span class="string">&quot;false&quot;</span></span><br><span class="line"></span><br><span class="line">                @node-click=<span class="string">&quot;handleNodeClick&quot;</span></span><br><span class="line"></span><br><span class="line">                :props=<span class="string">&quot;ItemProps&quot;</span></span><br><span class="line"></span><br><span class="line">                v-loading=<span class="string">&quot;ISload&quot;</span></span><br><span class="line"></span><br><span class="line">                ref=<span class="string">&quot;tree&quot;</span></span><br><span class="line"></span><br><span class="line">                @check-change=<span class="string">&quot;itemCheckChange&quot;</span></span><br><span class="line"></span><br><span class="line">                style=<span class="string">&quot;margin-top: 1em;&quot;</span></span><br><span class="line"></span><br><span class="line">              &gt;&lt;/el-tree&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><pre><code class="bash">    renderContent(h, &#123; node, data, store &#125;) &#123;        if (node.level === 1) &#123;        return &lt;span class=&#39;firstlevel&#39;&gt;&#123;node.label&#125;&lt;/span&gt;;      &#125; else &#123;        return &lt;span class=&#39;notfirstlevel&#39;&gt;&#123;node.label&#125;&lt;/span&gt;;      &#125;    &#125;,</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI栅格系统布局与偏移</title>
      <link href="/2022/10/13/ui1/"/>
      <url>/2022/10/13/ui1/</url>
      
        <content type="html"><![CDATA[<p>以下内容参照 <a href="https://element.eleme.io/#/zh-CN/component/layout#col-attributes" title="" target="">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-col</span><br><span class="line">        :xs=<span class="string">&quot;&#123; span: 24, offset: 0 &#125;&quot;</span></span><br><span class="line">        :sm=<span class="string">&quot;&#123; span: 12, offset: 0 &#125;&quot;</span></span><br><span class="line">        :md=<span class="string">&quot;&#123; span: 12, offset: 0 &#125;&quot;</span></span><br><span class="line">        :lg=<span class="string">&quot;&#123; span: 12, offset: 0 &#125;&quot;</span></span><br><span class="line">        :xl=<span class="string">&quot;&#123; span: 12, offset: 0 &#125;&quot;</span></span><br><span class="line">        :xxl=<span class="string">&quot;&#123; span: 12, offset: 0 &#125;&quot;</span></span><br><span class="line">      &gt;</span><br><span class="line">&lt;/el-col&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>参照了 Bootstrap 的 响应式设计，预设了五个响应尺寸：xs、sm、md、lg 和 xl。</p></blockquote><p>同时Element 额外提供了一系列类名，用于在某些条件下隐藏元素。这些类名可以添加在任何 DOM 元素或自定义组件上。如果需要，请自行引入以下文件：</p><p>import ‘element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;display.css’;</p><p>包含的类名及其含义为：</p><blockquote><p>hidden-xs-only - 当视口在 xs 尺寸时隐藏<br>hidden-sm-only - 当视口在 sm 尺寸时隐藏<br>hidden-sm-and-down - 当视口在 sm 及以下尺寸时隐藏<br>hidden-sm-and-up - 当视口在 sm 及以上尺寸时隐藏<br>hidden-md-only - 当视口在 md 尺寸时隐藏<br>hidden-md-and-down - 当视口在 md 及以下尺寸时隐藏<br>hidden-md-and-up - 当视口在 md 及以上尺寸时隐藏<br>hidden-lg-only - 当视口在 lg 尺寸时隐藏<br>hidden-lg-and-down - 当视口在 lg 及以下尺寸时隐藏<br>hidden-lg-and-up - 当视口在 lg 及以上尺寸时隐藏<br>hidden-xl-only - 当视口在 xl 尺寸时隐藏</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑开启VT的方法</title>
      <link href="/2022/10/13/netnote2/"/>
      <url>/2022/10/13/netnote2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://support.yeshen.com/zh-CN/often/vt" title="" target="">点我查看详情</a></p>]]></content>
      
      
      <categories>
          
          <category> 百科知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本号释意</title>
      <link href="/2022/10/13/netnote1/"/>
      <url>/2022/10/13/netnote1/</url>
      
        <content type="html"><![CDATA[<h3 id="1、软件版本阶段说明"><a href="#1、软件版本阶段说明" class="headerlink" title="1、软件版本阶段说明"></a>1、软件版本阶段说明</h3><h2 id="Alpha版"><a href="#Alpha版" class="headerlink" title="*Alpha版"></a>*Alpha版</h2><p>此版本表示该软件在此阶段主要是以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改。</p><h2 id="Beta版"><a href="#Beta版" class="headerlink" title="*Beta版"></a>*Beta版</h2><p>该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步消除，此版本主要的修改对像是软件的UI。</p><h2 id="RC版"><a href="#RC版" class="headerlink" title="*RC版"></a>*RC版</h2><p>该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。</p><h2 id="Release版"><a href="#Release版" class="headerlink" title="*Release版"></a>*Release版</h2><p>该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(R)。</p><span id="more"></span><h3 id="2、版本命名规范"><a href="#2、版本命名规范" class="headerlink" title="2、版本命名规范"></a>2、版本命名规范</h3><p>例如：1.1.1.051021_beta。</p><blockquote><p>软件版本号由四部分组成<br>第一个1为主版本号<br>第二个1为子版本号<br>第三个1为阶段版本号<br>第四部分为日期版本号加希腊字母版本号<br>希腊字母版本号共有5种，分别为：base、alpha、beta、RC、release。</p></blockquote><h3 id="3、版本号定修改规则"><a href="#3、版本号定修改规则" class="headerlink" title="3、版本号定修改规则"></a>3、版本号定修改规则</h3><h2 id="主版本号-1"><a href="#主版本号-1" class="headerlink" title="*主版本号(1)"></a>*主版本号(1)</h2><p>当功能模块有较大的变动，比如增加多个模块或者整体架构发生变化。此版本号由项目决定是否修改。</p><h2 id="子版本号-1"><a href="#子版本号-1" class="headerlink" title="*子版本号(1)"></a>*子版本号(1)</h2><p>当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目决定是否修改。</p><h2 id="阶段版本号-1"><a href="#阶段版本号-1" class="headerlink" title="*阶段版本号(1)"></a>*阶段版本号(1)</h2><p>一般是Bug修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</p><h2 id="日期版本号-051021"><a href="#日期版本号-051021" class="headerlink" title="*日期版本号(051021)"></a>*日期版本号(051021)</h2><p>用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</p><h2 id="希腊字母版本号-beta"><a href="#希腊字母版本号-beta" class="headerlink" title="*希腊字母版本号(beta)"></a>*希腊字母版本号(beta)</h2><p>此版本号用于标注当前版本的软件处于哪个开发阶段，当软件进入到另一个阶段时需要修改此版本号。此版本号由项目决定是否修改。</p><h3 id="4、文件命名规范"><a href="#4、文件命名规范" class="headerlink" title="4、文件命名规范"></a>4、文件命名规范</h3><p>例如：项目外包平台测试报告1.1.1.051021_beta_b.xls，此文件为项目外包平台的测试报告文档，版本号为：1.1.1.051021_beta。</p><blockquote><p>文件名称由四部分组成<br>第一部分为项目名称<br>第二部分为文件的描述<br>第三部分为当前软件的版本号<br>第四部分为文件阶段标识加文件后缀</p></blockquote><p>如果是同一版本同一阶段的文件修改过两次以上，则在阶段标识后面加以数字标识，每次修改数字加1，项目外包平台测试报告1.1.1.051021_beta_b1.xls。</p><p>当有多人同时提交同一份文件时，可以在阶段标识的后面加入人名或缩写来区别，例如：项目外包平台测试报告1.1.1.051021_beta_b_LiuQi.xls。当此文件再次提交时也可以在人名或人名缩写的后面加入序号来区别，例如：项目外包平台测试报告1.1.1.051021_beta_b_LiuQi2.xls。</p><h3 id="5、版本号的阶段标识"><a href="#5、版本号的阶段标识" class="headerlink" title="5、版本号的阶段标识"></a>5、版本号的阶段标识</h3><p>软件的每个版本中包括11个阶段，详细阶段描述如下：</p><blockquote><p>阶段名称 阶段标识<br>需求控制 a<br>设计阶段 b<br>编码阶段 c<br>单元测试 d<br>单元测试修改 e<br>集成测试 f<br>集成测试修改 g<br>系统测试 h<br>系统测试修改 i<br>验收测试 j<br>验收测试修改 k</p></blockquote><p>软件版本号的详细说明</p><p>自从有了网络后，信息资源的分享变得越来越容易，与我们息息相关的软件也开始以几何级的速度丰富起来，这其中多姿多彩的软件版本着实让我们眼花缭乱，所以特别奉献《软件版本号的详细说明》，希望能够帮助迷失在软件版本中不知道下载哪个的朋友。</p><h3 id="6、开发过程中的版本"><a href="#6、开发过程中的版本" class="headerlink" title="6、开发过程中的版本"></a>6、开发过程中的版本</h3><h2 id="α（Alpha）版"><a href="#α（Alpha）版" class="headerlink" title="α（Alpha）版"></a>α（Alpha）版</h2><p>此版本表示该软件仅仅是一个初步完成品，通常只在软件开发者内部交流，也有很少一部分发布给专业测试人员。一般而言，该版本软件的Bug较多，普通用户最好不要安装。</p><h2 id="β（Beta）版"><a href="#β（Beta）版" class="headerlink" title="β（Beta）版"></a>β（Beta）版</h2><p>该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过大规模的发布测试来进一步消除。这一版本通常由软件公司免费发布，用户可从相关的站点下载。通过一些专业爱好者的测试，将结果反馈给开发者，开发者们再进行有针对性的修改。该版本也不适合一般用户安装。</p><h2 id="γ版"><a href="#γ版" class="headerlink" title="γ版"></a>γ版</h2><p>该版本已经相当成熟了，与即将发行的正式版相差无几，如果用户实在等不及了，尽可以装上一试。</p><h2 id="RC-x2F-Preview版"><a href="#RC-x2F-Preview版" class="headerlink" title="RC&#x2F; Preview版"></a>RC&#x2F; Preview版</h2><p>RC即ReleaseCandidate的缩写，作为一个固定术语，意味着最终版本准备就绪。一般来说RC版本已经完成全部功能并清除大部分的BUG。到了这个阶段只会除Bug，不会对软件做任何大的更改。</p><p>以上是软件正式版本推出之前的几个版本，α、β、γ可以称为测试版，大凡成熟软件总会有多个测试版，如MozillaSuit 1.8的β版，前前后后将近有10个。这么多的测试版一方面为了最终产品尽可能地满足用户的需要，另一方面也尽量减少了软件中的Bug。RC版称为预览版，经常被用来做软件发布前的最后公开测试，随着反馈的问题会不断更新RC1，RC2…例如目前的WindowsVISTARC。</p><h3 id="7、公开发布的尝试性版本"><a href="#7、公开发布的尝试性版本" class="headerlink" title="7、公开发布的尝试性版本"></a>7、公开发布的尝试性版本</h3><h2 id="Cardware"><a href="#Cardware" class="headerlink" title="Cardware"></a>Cardware</h2><p>属共享软件的一种，只要给作者回复一封电邮或明信片即可（有的作者并由此提供注册码等），目前这种形式已不多见。</p><h2 id="Trial（试用版）"><a href="#Trial（试用版）" class="headerlink" title="Trial（试用版）"></a>Trial（试用版）</h2><p>试用版软件在最近的几年里颇为流行，主要是得益于互联网的迅速发展。该版本软件通常都有时间限制，过期之后用户如果希望继续使用，一般得交纳一定的费用进行注册或购买。有些试用版软件还在功能上做了一定的限制。</p><h2 id="Unregistered（未注册版）"><a href="#Unregistered（未注册版）" class="headerlink" title="Unregistered（未注册版）"></a>Unregistered（未注册版）</h2><p>未注册版与试用版极其类似，只是未注册版通常没有时间限制，在功能上相对于正式版做了一定的限制，例如绝大多数网络电话软件的注册版和未注册版，两者之间在通话质量上有很大差距。还有些虽然在使用上与正式版毫无二致，但是动不动就会弹出一个恼人的消息框来提醒你注册，如看图软件ACDSee、智能陈桥汉字输入软件等。</p><h2 id="Demo版"><a href="#Demo版" class="headerlink" title="Demo版"></a>Demo版</h2><p>也称为演示版，在非正式版软件中，该版本的知名度最大。Demo版仅仅集成了正式版中的几个功能，颇有点像Unregistered。不同的是，Demo版一般不能通过升级或注册的方法变为正式版。</p><p>Trial、Unregistered、Demo有时统称为共享版（Shareware），这一类版本的广告色彩较浓，颇有点先尝后买的味道，对于普通用户而言自然是可以免费尝鲜了。</p><h3 id="8、不同名称的正式版本"><a href="#8、不同名称的正式版本" class="headerlink" title="8、不同名称的正式版本"></a>8、不同名称的正式版本</h3><h2 id="Release-x2F-Final"><a href="#Release-x2F-Final" class="headerlink" title="Release&#x2F;Final"></a>Release&#x2F;Final</h2><p>该版本意味“最终释放版”，在出了一系列的测试版之后，终归会有一个正式版本，对于用户而言，购买该版本的软件绝对不会错。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(r)，如WindowsNT(r) 4.0、MS-DOS(r)6.22等。</p><p>R## egistered</p><p>很显然，该版本是与Unregistered相对的注册版。注册版、Release和下面所讲的Standard版一样，都是软件的正式版本，只是注册版软件的前身有很大一部分是从网上下载的。</p><h2 id="Retail"><a href="#Retail" class="headerlink" title="Retail"></a>Retail</h2><p>零售版，已经经过授权的正式版本，一般无需注册即可以无时间限制的正常使用所有的功能。多数以CD&#x2F;DVD等光盘为载体。Retail版通常情况下只包括程序主体。</p><h3 id="9、正式版的不同版本"><a href="#9、正式版的不同版本" class="headerlink" title="9、正式版的不同版本"></a>9、正式版的不同版本</h3><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>基本版，相当于下面提到的Standard（标准版），仅包括最基本的组件和功能。</p><h2 id="Plus-x2F-Enhance"><a href="#Plus-x2F-Enhance" class="headerlink" title="Plus&#x2F; Enhance"></a>Plus&#x2F; Enhance</h2><p>增强版或加强版，一般是相对于Basic版本来说的。大部分是在程序界面及多媒体功能上增强，例如JetAudio的Plus版本可以开启动态音频调整，32位高保真输出等功能。</p><h2 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h2><p>这是最常见的标准版，不论是什么软件，标准版一定存在。标准版中包含了该软件的基本组件及一些常用功能，可以满足一般用户的需求。其价格相对高一级版本而言还是“平易近人”的。</p><p>Fullversion</p><p>完全版，一般是相对于Standard版来说的，增加了某些功能，或者提供一些特殊的素材等等。</p><h2 id="Deluxe"><a href="#Deluxe" class="headerlink" title="Deluxe"></a>Deluxe</h2><p>顾名思义即为“豪华版”。豪华版通常是相对于标准版而言的，主要区别是多了几项功能，价格当然会高出一大块，不推荐一般用户购买。此版本通常是为那些追求“完美”的专业用户所准备的。</p><h2 id="Platinum-x2F-Premium"><a href="#Platinum-x2F-Premium" class="headerlink" title="Platinum&#x2F; Premium"></a>Platinum&#x2F; Premium</h2><p>“白金版”，通常是一些软件的最高等级版本，等同甚至高于Deluxe版本。最著名的是WinDVDPlatinum 版和DiskeeperPremium 版。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>该版本型号常见于百科全书中，比较有名的是微软的Encarta系列。Reference是最高级别，其包含的主题、图像、影片剪辑等相对于Standard和Deluxe版均有大幅增加，容量由一张光盘猛增至三张光盘，并且加入了很强的交互功能，当然价格也不菲。可以这么说，这一版本的百科全书才能算是真正的百科全书，也发烧友们收藏的首选。</p><h2 id="Home（家庭版）"><a href="#Home（家庭版）" class="headerlink" title="Home（家庭版）"></a>Home（家庭版）</h2><p>也称为“家用版”，定位基本等同于Basic&#x2F; Standard 版本，相对于Professional版一般功能都要缩水。</p><h2 id="Professional（专业版）"><a href="#Professional（专业版）" class="headerlink" title="Professional（专业版）"></a>Professional（专业版）</h2><p>专业版是针对某些特定的开发工具软件而言的。专业版中有许多内容是标准版中所没有的，这些内容对于一个专业的软件开发人员来说是极为重要的。如微软的VisualFoxPro 标准版并不具备编译成可执行文件的功能，这对于一个完整的开发项目而言显然是无法忍受的，若客户机上没有FoxPro将不能使用。如果用专业版就没有这个问题了。</p><h2 id="Corporation-x2F-Enterprise（企业版）"><a href="#Corporation-x2F-Enterprise（企业版）" class="headerlink" title="Corporation&#x2F; Enterprise（企业版）"></a>Corporation&#x2F; Enterprise（企业版）</h2><h2 id="企业版是开发类软件中的极品。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的VisualC-的企业版相对于专业版来说增加了几个附加的特性，如SQL调试、扩展的存储过程向导、支持AS-x2F-400对OLEDB的访问等。而这一版本的价格也是普通用户无法接受的。如微软的VisualStudios-6-0-Enterprise中文版的价格为23000元。"><a href="#企业版是开发类软件中的极品。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的VisualC-的企业版相对于专业版来说增加了几个附加的特性，如SQL调试、扩展的存储过程向导、支持AS-x2F-400对OLEDB的访问等。而这一版本的价格也是普通用户无法接受的。如微软的VisualStudios-6-0-Enterprise中文版的价格为23000元。" class="headerlink" title="企业版是开发类软件中的极品。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的VisualC++ 的企业版相对于专业版来说增加了几个附加的特性，如SQL调试、扩展的存储过程向导、支持AS&#x2F;400对OLEDB的访问等。而这一版本的价格也是普通用户无法接受的。如微软的VisualStudios 6.0 Enterprise中文版的价格为23000元。"></a>企业版是开发类软件中的极品。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的VisualC++ 的企业版相对于专业版来说增加了几个附加的特性，如SQL调试、扩展的存储过程向导、支持AS&#x2F;400对OLEDB的访问等。而这一版本的价格也是普通用户无法接受的。如微软的VisualStudios 6.0 Enterprise中文版的价格为23000元。</h2><hr><h3 id="10、其他特殊-x2F-专有版本名称"><a href="#10、其他特殊-x2F-专有版本名称" class="headerlink" title="10、其他特殊&#x2F;专有版本名称"></a>10、其他特殊&#x2F;专有版本名称</h3><h2 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h2><p>免费版。一般有两种来源，第一种是由专门的开源软件组织编写发布的软件，最著名的例如OpenOffice，MozillaFireFox 等。另外一种是盈利性的软件公司为了扩大自己的软件产品的影响而发布的仅具备基本功能的版本，例如MemTestFree版。</p><h2 id="Multilanguage"><a href="#Multilanguage" class="headerlink" title="Multilanguage"></a>Multilanguage</h2><p>多国语言版，相对于单独语言版而说的。即将程序所支持的所有语言放到同一个安装文件下，以适应不同语言使用人群的需要。最著名是Nero7 多国语言版。</p><h2 id="RTM版"><a href="#RTM版" class="headerlink" title="RTM版"></a>RTM版</h2><p>即ReleaseTo Manufactur，意思是发布到生产商。基本就是软件的最终正式发布版本</p><h2 id="FPP版"><a href="#FPP版" class="headerlink" title="FPP版"></a>FPP版</h2><p>FullPackagedProduct，零售版，相当于Retail，获得途径基本是在商店购买。</p><h2 id="Update（升级版）"><a href="#Update（升级版）" class="headerlink" title="Update（升级版）"></a>Update（升级版）</h2><p>升级版的软件是不能独立使用的，该版本的软件在安装过程中会搜索原有的正式版，如果不存在，则拒绝执行下一步。如MicrosoftOffice 2000 升级版、Windows9x 升级版等等。</p><h2 id="OEM版"><a href="#OEM版" class="headerlink" title="OEM版"></a>OEM版</h2><p>OriginalEquipment Manufacturer 的缩写。OEM版通常是捆绑在硬件中而不单独销售的版本。将自己的产品交给别的公司去卖，保留自己的著作权，双方互惠互利，一举两得。常见的就是WindowsXP 的各大电脑公司的OEM版。</p><h2 id="VOL版"><a href="#VOL版" class="headerlink" title="VOL版"></a>VOL版</h2><p>VolumeLicensing forOrganizations，即团体批量许可证（大量采购授权合约），这是为团体购买而制定的一种优惠方式。这种产品的光盘的卷标都带有”VOL”字样，取”Volume”前3个字母，以表明是批量，获得途径主要是集团购买。这种版本根据购买数量等又细分为“开放式许可证（OpenLicense）”、“选择式许可证（SelectLicense）”、“企业协议（EnterpriseAgreement &#x2F; Enterprise Subscription Agreement）”、“学术教育许可证（AcademicVolume Licensing ）”等5种版本。</p><h2 id="VLK版"><a href="#VLK版" class="headerlink" title="VLK版"></a>VLK版</h2><p>VolumeLicensing (Product) Keys的缩写，VLK不是指一种版本，而是指这种版本在部署（deploy）过程中所需要的Key——仅仅是一个为证明产品合法化、以及安装所使用的Key，而需要VLK这种Key的版本应该叫做VOL！只不过在实际中，没有必要强调这种叫法、称呼的准确性。</p><h2 id="单机（网络）版"><a href="#单机（网络）版" class="headerlink" title="单机（网络）版"></a>单机（网络）版</h2><p>网络版在功能、结构上远比单机版复杂，如果留心一下软件的报价，你就会发现某些软件单机版和网络版的价格相差非常大，有些网络版甚至多一个客户端口就要加不少钱。</p><h2 id="普及版"><a href="#普及版" class="headerlink" title="普及版"></a>普及版</h2><p>该版本有时也会被称为共享版，其特点是价格便宜（有些甚至完全免费）、功能单一、针对性强（当然也有占领市场、打击盗版等因素）。与试用版不同的是，该版本的软件一般不会有时间上的限制。当然，如果用户想升级，最好还是去购买正式版。</p><h2 id="Mini-x2F-Rip-版"><a href="#Mini-x2F-Rip-版" class="headerlink" title="Mini&#x2F; Rip 版"></a>Mini&#x2F; Rip 版</h2><p>迷你版或精简版。常见于破解软件，Mini版通常只具有最基本的功能。Rip版是指从原版文件（一般是指光盘或光盘镜像文件）直接将有用的核心内容分离出来，剔除无用的文档，例如PDF说明文件，视频演示之类的东西，与Mini版的区别主要是软件本身的内容和功能是一点也不缺少的。</p><h3 id="11、软件版本相关英文"><a href="#11、软件版本相关英文" class="headerlink" title="11、软件版本相关英文"></a>11、软件版本相关英文</h3><p>alpha内部测试版</p><p>beta外部测试版</p><p>demo演示版</p><p>Enhance增强版或者加强版属于正式版</p><p>Free自由版</p><p>Fullversion 完全版属于正式版</p><p>shareware共享版</p><p>Release发行版有时间限制</p><p>Upgrade升级版</p><p>Retail零售版</p><p>Cardware属共享软件的一种，只要给作者回复一封电邮或明信片即可。（有的作者并由此提供注册码等），目前这种形式已不多见。</p><p>Plus属增强版，不过这种大部分是在程序界面及多媒体功能上增强。</p><p>Preview预览版</p><p>Corporation&amp; Enterprise 企业版</p><p>Standard标准版</p><p>Mini迷你版也叫精简版只有最基本的功能</p><p>Premium– 贵价版</p><p>Professional– 专业版</p><p>Express– 特别版</p><p>Deluxe– 豪华版</p><p>Regged– 已注册版</p><p>CN– 简体中文版</p><p>CHT– 繁体中文版</p><p>EN– 英文版</p><p>Multilanguage– 多语言版</p><p>Rip是指从原版文件（一般是指光盘或光盘镜像文件）直接将有用的内容（核心内容）分离出来，剔除无用的文档，例如PDF说明文件啊，视频演示啊之类的东西，也可以算做是精简版吧…但主要内容功能是一点也不能缺少的！另：DVDrip是指将视频和音频直接从DVD光盘里以文件方式分离出来。</p><p>trail试用版（含有某些限制，如时间、功能，注册后也有可能变为正式版）</p><p>RC版。是ReleaseCandidate的缩写，意思是发布倒计时，该版本已经完成全部功能并清除大部分的BUG。到了这个阶段只会除BUG，不会对软件做任何大的更改。</p><p>RTM版。这基本就是最终的版本，英文是ReleaseTo Manufactur，意思是发布到生产商。</p><p>OriginalEquipment Manufacturer (OEM)</p><p>You may license productsthrough an Original Equipment Manufacturer (OEM). These products,such as Windows operating systems, come installed when you purchase anew computer.</p><p>OEM软件是给电脑生产厂的版本，无需多说。</p><p>FullPackaged Product (FPP)-Retail</p><p>Physical, shrink-wrappedboxes of licensed product that can be purchased in a local retailstore or any local softwareretailer.</p><p>FPP就是零售版（盒装软件），这种产品的光盘的卷标都带有”FPP”字样，比如英文WXPPro的FPP版本的光盘卷标就是WXPFPP_EN，其中WX表示是WindowsXP，P是Professional（H是Home），FPP表明是零售版本，EN是表明是英语。获得途径除了在商店购买之外，某些MSDN用户也可以得到。</p><p>VolumeLicensing for Organizations (VLO)</p><p>You may enjoypotentially significant savings by acquiring multiple productlicenses. Depending on the size and type of yourorganization.</p><p>团体批量许可证（大量采购授权合约），这是为团体购买而制定的一种优惠方式。这种产品的光盘的卷标都带有”VOL”字样，取”Volume”前3个字母，以表明是批量，比如英文WXPPro的VOL版本的光盘卷标就是WXPVOL_EN，其中WX表示是WindowsXP，P是Professional（VOL没有Home版本），VOL表明是团体批量许可证版本，EN是表明是英语。获得途径主要是集团购买，某些MSDN用户也可以得到。</p><p>这种版本根据购买数量等又细分为“开放式许可证”、“选择式许可证”、“企业协议”、“学术教育许可证”等以下5种版本</p><p>OpenLicense</p><p>Select License</p><p>EnterpriseAgreement</p><p>Enterprise Subscription Agreement</p><p>AcademicVolumeLicensing</p><p>由此可见，平时说的什么select&#x2F;corp是许可证授权方式，他的出现是为了用若干种不同级别的优惠政策卖同一种软件，通过select&#x2F;corp许可证授权方式得到的xxx的光盘都是VOL这一种、是并不是有很多种，只不过是相同的VOL光盘配以不同的许可证方式；而VolumeLicensing (Product)Keys，即VLK，它所指的只是一个Key（密匙），仅仅是一个为证明产品合法化、以及安装所使用的Key，因为根据VOL计划规定，VOL产品是不需要激活的！</p><p>或者说，VLK不是指一种版本，而是指这种版本在部署（deploy）过程中所需要的Key，而需要VLK这种Key的版本应该叫做VOL！只不过在实际中，没有必要强调这种叫法、称呼的准确性，加之很多人的VOL版本光盘是通过企业的选择式许可证、企业协议等方式得到的等等原因，所以才会有很多人叫他为“选择版”等等。</p><p>官方网站有一个表格，上面有一句话：“Differentproducts require different Volume Licensing Keys (VLKs). Refer to thetable below to make sure you have the correct VLK for your Microsoftproduct.”，我想这就很好的说明了VLK指的是Key而不是产品了。很明显的，FPP需要激活，VOL不需要激活。</p><p>原文链接：<a href="https://blog.csdn.net/u013512708/article/details/48267227">https://blog.csdn.net/u013512708/article/details/48267227</a></p>]]></content>
      
      
      <categories>
          
          <category> 百科知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Winform中如何调用JSON格式接口进行GET/POST</title>
      <link href="/2022/10/13/csharp1/"/>
      <url>/2022/10/13/csharp1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建一个winform桌面程序的项目-NET-Framework"><a href="#1-创建一个winform桌面程序的项目-NET-Framework" class="headerlink" title="1.创建一个winform桌面程序的项目(.NET Framework)"></a>1.创建一个winform桌面程序的项目(.NET Framework)</h3><h3 id="2-然后创建一个通用方法的类库：Common"><a href="#2-然后创建一个通用方法的类库：Common" class="headerlink" title="2.然后创建一个通用方法的类库：Common"></a>2.然后创建一个通用方法的类库：Common</h3><h3 id="3-在类库中添加接口发送与请求的通用方法：HttpHelper-cs"><a href="#3-在类库中添加接口发送与请求的通用方法：HttpHelper-cs" class="headerlink" title="3.在类库中添加接口发送与请求的通用方法：HttpHelper.cs"></a>3.在类库中添加接口发送与请求的通用方法：HttpHelper.cs</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class HttpHelper</span><br><span class="line">    &#123;</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">               /// 调用api返回json</span><br><span class="line">               /// &lt;/summary&gt;</span><br><span class="line">               /// &lt;param name=&quot;url&quot;&gt;api地址&lt;/param&gt;</span><br><span class="line">               /// &lt;param name=&quot;jsonstr&quot;&gt;接收参数&lt;/param&gt;</span><br><span class="line">               /// &lt;param name=&quot;type&quot;&gt;类型&lt;/param&gt;</span><br><span class="line">               /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public static string HttpApi(string url, string jsonstr, string type)</span><br><span class="line">        &#123;</span><br><span class="line">            Encoding encoding = Encoding.UTF8;</span><br><span class="line">            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);//webrequest请求api地址</span><br><span class="line">            request.Accept = &quot;*/*&quot;;</span><br><span class="line">            request.ContentType = &quot;application/json&quot;;</span><br><span class="line">            request.Method = type.ToUpper().ToString();//get或者post</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            byte[] buffer = encoding.GetBytes(jsonstr);</span><br><span class="line">            request.ContentLength = buffer.Length;</span><br><span class="line">            request.GetRequestStream().Write(buffer, 0, buffer.Length);</span><br><span class="line">            HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line">            using (StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8))</span><br><span class="line">            &#123;</span><br><span class="line">                return reader.ReadToEnd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>  <span id="more"></span><h3 id="4-添加JSON序列化与反序列化的引用"><a href="#4-添加JSON序列化与反序列化的引用" class="headerlink" title="4.添加JSON序列化与反序列化的引用"></a>4.添加JSON序列化与反序列化的引用</h3><p>由于我们接口的传参和相应结果用的JSON格式，因此要用到：Newtonsoft.Json，用于实现数据的JSON序列化和反序列化；</p><p>添加引用的方法：</p><blockquote><p>在项目中右键”引用“，点选”管理NuGet程序包“》浏览》搜索：Newtonsoft.Json》点击安装即可；</p></blockquote><h3 id="5-接口的调用"><a href="#5-接口的调用" class="headerlink" title="5.接口的调用"></a>5.接口的调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var url = <span class="string">&quot; 你的接口名&quot;</span>;</span><br><span class="line">//参数</span><br><span class="line">var data = new</span><br><span class="line">&#123;</span><br><span class="line">       <span class="built_in">id</span> = 10</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var result =(JObject)JsonConvert.DeserializeObject(HttpHelper.HttpApi(url, JsonConvert.SerializeObject(data), <span class="string">&quot;post&quot;</span>));</span><br></pre></td></tr></table></figure><p>这里我的reslut包含了：msg,code,data 三个对象，取值的方式为：</p><blockquote><p>result[“msg”]</p><p>result[“code”]</p><p>result[“data”]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> winform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签添加自动换行的属性</title>
      <link href="/2022/10/13/css7/"/>
      <url>/2022/10/13/css7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>word-wrap:break-word;</p><p>white-space: pre-wrap;</p><p>white-space: -moz-pre-wrap;</p><p>white-space: -pre-wrap;</p><p>white-space:-o-pre-wrap;</p><p>word-wrap: break-word;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wangeditor自带的样式</title>
      <link href="/2022/10/13/css6/"/>
      <url>/2022/10/13/css6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/* table 样式 */</span><br><span class="line">table &#123;</span><br><span class="line">border-top: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">border-left: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">&#125;</span><br><span class="line">table td,</span><br><span class="line">table th &#123;</span><br><span class="line">border-bottom: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">border-right: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">padding: 3px 5px;</span><br><span class="line">&#125;</span><br><span class="line">table th &#123;</span><br><span class="line">border-bottom: 2px solid <span class="comment">#ccc;</span></span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* blockquote 样式 */</span><br><span class="line">blockquote &#123;</span><br><span class="line">display: block;</span><br><span class="line">border-left: 8px solid <span class="comment">#d0e5f2;</span></span><br><span class="line">padding: 5px 10px;</span><br><span class="line">margin: 10px 0;</span><br><span class="line">line-height: 1.4;</span><br><span class="line">font-size: 100%;</span><br><span class="line">background-color: <span class="comment">#f1f1f1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* code 样式 */</span><br><span class="line">code &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">*display: inline;</span><br><span class="line">*zoom: 1;</span><br><span class="line">background-color: <span class="comment">#f1f1f1;</span></span><br><span class="line">border-radius: 3px;</span><br><span class="line">padding: 3px 5px;</span><br><span class="line">margin: 0 3px;</span><br><span class="line">&#125;</span><br><span class="line">pre code &#123;</span><br><span class="line">display: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* ul ol 样式 */</span><br><span class="line">ul, ol &#123;</span><br><span class="line">margin: 10px 0 10px 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3菜单点击demo</title>
      <link href="/2022/10/13/css5/"/>
      <url>/2022/10/13/css5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;菜单&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">&#x27;text/css&#x27;</span>&gt;</span><br><span class="line">        .container &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*这就生成了三横杠的菜单*/</span><br><span class="line">        .bar1, .bar2, .bar3 &#123;</span><br><span class="line">            width: 35px;</span><br><span class="line">            height: 5px;</span><br><span class="line">            background-color: <span class="comment">#333;</span></span><br><span class="line">            margin: 6px 0;</span><br><span class="line">            transition: 0.4s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .change .bar1 &#123;</span><br><span class="line">            -webkit-transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">            transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .change .bar2 &#123;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .change .bar3 &#123;</span><br><span class="line">            -webkit-transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">            transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> myFunction(x) &#123;</span><br><span class="line">            x.classList.toggle(<span class="string">&quot;change&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;点击菜单按钮变为 <span class="string">&quot;X&quot;</span>:&lt;/p&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;container&quot;</span> onclick=<span class="string">&quot;myFunction(this)&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;bar1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;bar2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;bar3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css中的块元素与行内（内联元素）</title>
      <link href="/2022/10/13/css4/"/>
      <url>/2022/10/13/css4/</url>
      
        <content type="html"><![CDATA[<h3 id="块元素–常见元素div"><a href="#块元素–常见元素div" class="headerlink" title="块元素–常见元素div"></a>块元素–常见元素div</h3><blockquote><p>1.独占一行<br>2.默认宽度是父元素的宽度（即撑满父元素）<br>3.默认高度由其内容撑开，所以无内容时候（若没有其它样式，height…）就消失了</p></blockquote><h3 id="行内元素–常见元素span"><a href="#行内元素–常见元素span" class="headerlink" title="行内元素–常见元素span"></a>行内元素–常见元素span</h3><blockquote><p>1.只占本身内容大小（设定width,height不会生效）<br>如果源代码两个span，换行排列（存在换行），而浏览器对其识别成一个空格出现两个元素水平排列，之间存在缝隙。<br>2.多个行内元素渲染呈现从左往右依次排列，无法容纳时自动换行<br>3.默认宽高都是由内容撑开（行内元素是无法设置宽高的，若无内容区就消失了）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 省略号表示溢出文本</title>
      <link href="/2022/10/13/css3/"/>
      <url>/2022/10/13/css3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-先强制一行内显示文本"><a href="#1-先强制一行内显示文本" class="headerlink" title="1.先强制一行内显示文本"></a>1.先强制一行内显示文本</h2><p>white-space: nowrap;</p><h2 id="2-超出部分隐藏"><a href="#2-超出部分隐藏" class="headerlink" title="2.超出部分隐藏"></a>2.超出部分隐藏</h2><p>overflow: hidden;</p><h2 id="3-文字用省略号替代超出的部分"><a href="#3-文字用省略号替代超出的部分" class="headerlink" title="3.文字用省略号替代超出的部分"></a>3.文字用省略号替代超出的部分</h2><p>text-overflow: ellipsis;</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用css3画一个冰墩墩</title>
      <link href="/2022/10/13/css2/"/>
      <url>/2022/10/13/css2/</url>
      
        <content type="html"><![CDATA[<p>文章来源：<a href="https://baijiahao.baidu.com/s?id=1724607815488021505&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1724607815488021505&amp;wfr=spider&amp;for=pc</a></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://libs.baidu.com/jquery/1.7.2/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            $(<span class="string">&quot;.ear1, .ear2&quot;</span>).css(<span class="string">&#x27;transform&#x27;</span>, <span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">            setInterval(() =&gt; &#123;</span><br><span class="line">                $(<span class="string">&quot;.ear1&quot;</span>).css(<span class="string">&#x27;transform&#x27;</span>, <span class="string">&#x27;rotate(-10deg)&#x27;</span>);</span><br><span class="line">                $(<span class="string">&quot;.ear2&quot;</span>).css(<span class="string">&#x27;transform&#x27;</span>, <span class="string">&#x27;rotate(10deg)&#x27;</span>);</span><br><span class="line">                $(<span class="string">&quot;.ear1&quot;</span>).css(<span class="string">&#x27;transform&#x27;</span>, <span class="string">&#x27;rotate(10deg)&#x27;</span>);</span><br><span class="line">                $(<span class="string">&quot;.ear2&quot;</span>).css(<span class="string">&#x27;transform&#x27;</span>, <span class="string">&#x27;rotate(-10deg)&#x27;</span>);</span><br><span class="line">            &#125;, 200);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;m_body&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;ear1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;ear2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;eye1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;eye2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;face c_blue&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;face c_red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;face c_purple&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;face c_yellow&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;face c_green&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;nose&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;mouse&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;arm1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;arm2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;leg1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;leg2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            font: 15px <span class="string">&quot;Microsoft YaHei&quot;</span>, Arial, Helvetica, sans-serif;</span><br><span class="line">            background: <span class="comment">#d4ebf1;</span></span><br><span class="line">            color: <span class="comment">#000;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .m_body &#123;</span><br><span class="line">            width: 362px;</span><br><span class="line">            height: 410px;</span><br><span class="line">            border: <span class="comment">#393939 8px solid;</span></span><br><span class="line">            margin: 50px auto;</span><br><span class="line">            border-radius: 88% 88% 62% 68% / 82% 82% 95% 84%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 109px;</span><br><span class="line">            top: -30px;</span><br><span class="line">            background: <span class="comment">#fff;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ear1,</span><br><span class="line">        .ear2 &#123;</span><br><span class="line">            background: <span class="comment">#393939;</span></span><br><span class="line">            width: 81px;</span><br><span class="line">            height: 115px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            position: absolute;</span><br><span class="line">            z-index: -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ear1 &#123;</span><br><span class="line">            left: 150px;</span><br><span class="line">            top: 26px;</span><br><span class="line">            transform: rotate(-10deg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ear2 &#123;</span><br><span class="line">            left: 362px;</span><br><span class="line">            top: 28px;</span><br><span class="line">            transform: rotate(10deg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1,</span><br><span class="line">        .eye2 &#123;</span><br><span class="line">            background: <span class="comment">#393939;</span></span><br><span class="line">            width: 83px;</span><br><span class="line">            height: 115px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1 &#123;</span><br><span class="line">            left: 185px;</span><br><span class="line">            top: 122px;</span><br><span class="line">            transform: rotate(45deg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye2 &#123;</span><br><span class="line">            left: 329px;</span><br><span class="line">            top: 122px;</span><br><span class="line">            transform: rotate(-45deg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1:before,</span><br><span class="line">        .eye2:before &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            border: <span class="comment">#fff 5px solid;</span></span><br><span class="line">            border-radius: 100%;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1:before &#123;</span><br><span class="line">            right: 10px;</span><br><span class="line">            top: 22px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye2:before &#123;</span><br><span class="line">            left: 10px;</span><br><span class="line">            top: 22px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1:after,</span><br><span class="line">        .eye2:after &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line">            background: <span class="comment">#9b9b9b;</span></span><br><span class="line">            border-radius: 100%;</span><br><span class="line">            position: absolute;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye1:after &#123;</span><br><span class="line">            right: 27px;</span><br><span class="line">            top: 31px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .eye2:after &#123;</span><br><span class="line">            left: 41px;</span><br><span class="line">            top: 44px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .face &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            border-radius: 48% 48% 44% 49%/ 53% 54% 45% 47%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c_blue &#123;</span><br><span class="line">            border: <span class="comment">#6bcdf3 5px solid;</span></span><br><span class="line">            width: 280px;</span><br><span class="line">            height: 224px;</span><br><span class="line">            left: 150px;</span><br><span class="line">            top: 78px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c_red &#123;</span><br><span class="line">            border: <span class="comment">#af2350 5px solid;</span></span><br><span class="line">            width: 287px;</span><br><span class="line">            height: 233px;</span><br><span class="line">            left: 146px;</span><br><span class="line">            top: 73px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c_purple &#123;</span><br><span class="line">            border: <span class="comment">#5d75b3 5px solid;</span></span><br><span class="line">            width: 295px;</span><br><span class="line">            height: 240px;</span><br><span class="line">            left: 142px;</span><br><span class="line">            top: 70px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c_yellow &#123;</span><br><span class="line">            border: <span class="comment">#ffc346 5px solid;</span></span><br><span class="line">            width: 305px;</span><br><span class="line">            height: 248px;</span><br><span class="line">            left: 137px;</span><br><span class="line">            top: 65px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .c_green &#123;</span><br><span class="line">            border: <span class="comment">#7fcb58 5px solid;</span></span><br><span class="line">            width: 313px;</span><br><span class="line">            height: 256px;</span><br><span class="line">            left: 133px;</span><br><span class="line">            top: 61px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm1,</span><br><span class="line">        .arm2 &#123;</span><br><span class="line">            background: <span class="comment">#333;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            z-index: -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm1 &#123;</span><br><span class="line">            width: 75px;</span><br><span class="line">            height: 118px;</span><br><span class="line">            left: 64px;</span><br><span class="line">            top: 244px;</span><br><span class="line">            transform: rotate(45deg);</span><br><span class="line">            border-radius: 24% 69% 68% 76%/ 53% 95% 40% 52%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm2 &#123;</span><br><span class="line">            width: 75px;</span><br><span class="line">            height: 148px;</span><br><span class="line">            left: 463px;</span><br><span class="line">            top: 162px;</span><br><span class="line">            transform: rotate(37deg);</span><br><span class="line">            border-radius: 56% 62% 98% 6%/ 40% 46% 80% 58%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm2:before &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 16px;</span><br><span class="line">            height: 24px;</span><br><span class="line">            background: <span class="comment">#bc242c;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            border-top-left-radius: 50%;</span><br><span class="line">            border-top-right-radius: 50%;</span><br><span class="line">            transform: rotate(45deg);</span><br><span class="line">            left: 32px;</span><br><span class="line">            top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm2:after &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 16px;</span><br><span class="line">            height: 24px;</span><br><span class="line">            background: <span class="comment">#bc242c;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            border-top-left-radius: 50%;</span><br><span class="line">            border-top-right-radius: 50%;</span><br><span class="line">            transform: rotate(-45deg);</span><br><span class="line">            left: 26px;</span><br><span class="line">            top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .arm_c &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 16px;</span><br><span class="line">            height: 24px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 426px;</span><br><span class="line">            top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nose &#123;</span><br><span class="line">            background-color: <span class="comment">#333333;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nose:before,</span><br><span class="line">        .nose:after &#123;</span><br><span class="line">            content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            position: absolute;</span><br><span class="line">            background-color: inherit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nose,</span><br><span class="line">        .nose:before,</span><br><span class="line">        .nose:after &#123;</span><br><span class="line">            width: 28px;</span><br><span class="line">            height: 18px;</span><br><span class="line">            border-radius: 42px 42px 60px 61px/ 30px 30px 50px 46px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .nose &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 284px;</span><br><span class="line">            top: 187px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .mouse &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 265px;</span><br><span class="line">            top: 205px;</span><br><span class="line">            width: 68px;</span><br><span class="line">            height: 25px;</span><br><span class="line">            border-radius: 48%;</span><br><span class="line">            border: <span class="comment">#393939 7px solid;</span></span><br><span class="line">            border-top: none;</span><br><span class="line">            border-left: 0;</span><br><span class="line">            border-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg1,</span><br><span class="line">        .leg2 &#123;</span><br><span class="line">            background: <span class="comment">#333;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 83px;</span><br><span class="line">            height: 80px;</span><br><span class="line">            border-radius: 0 0 30px 30px;</span><br><span class="line">            z-index: -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg1 &#123;</span><br><span class="line">            left: 187px;</span><br><span class="line">            top: 423px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg2 &#123;</span><br><span class="line">            left: 328px;</span><br><span class="line">            top: 423px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg1:after,</span><br><span class="line">        .leg2:after &#123;</span><br><span class="line">            content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">            width: 43px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            background: <span class="comment">#363636;</span></span><br><span class="line">            border-radius: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg1:after &#123;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            right: -3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .leg2:after &#123;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            left: -3px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3中特殊字符的用法</title>
      <link href="/2022/10/13/css1/"/>
      <url>/2022/10/13/css1/</url>
      
        <content type="html"><![CDATA[<p>首先找出特殊字符的编码，例如：9650 25B2 【正黑三角】  </p><p>使用方法：after(伪类)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;tempble&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>样式为：</p><blockquote><p>.tempble:after{<br>　　content: “&#x2F;9650 25B2”;&#x2F;&#x2F;特殊字符或形状<br>}</p></blockquote><p>这便会在样式为tempble的对象后渲染出一个特殊符号。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基本元素</title>
      <link href="/2022/10/13/html7/"/>
      <url>/2022/10/13/html7/</url>
      
        <content type="html"><![CDATA[<h3 id="New-HTML5-新属性："><a href="#New-HTML5-新属性：" class="headerlink" title="New : HTML5 新属性："></a>New : HTML5 新属性：</h3><blockquote><p>accesskey 设置访问元素的键盘快捷键。</p><p>class 规定元素的类名（classname）</p><p>contenteditableNew 规定是否可编辑元素的内容。</p><p>contextmenuNew 指定一个元素的上下文菜单。当用户右击该元素，出   现上下文菜单 </p><p>data-*New 用于存储页面的自定义数据</p><p>dir 设置元素中内容的文本方向。</p><p>draggableNew 指定某个元素是否可以拖动</p><p>dropzoneNew 指定是否将数据复制，移动，或链接，或删除</p><p>hiddenNew hidden 属性规定对元素进行隐藏。</p><p>id 规定元素的唯一 id</p><p>lang 设置元素中内容的语言代码。</p><p>spellcheckNew 检测元素是否拼写错误</p><p>style 规定元素的行内样式（inline style）</p><p>tabindex 设置元素的 Tab 键控制次序。</p><p>title 规定元素的额外信息（可在工具提示中显示）</p><p>translateNew 指定是否一个元素的值在页面载入时是否需要翻译 </p></blockquote><span id="more"></span><h3 id="窗口事件属性（Window-Event-Attributes）-由窗口触发该事件-适用于-body-标签"><a href="#窗口事件属性（Window-Event-Attributes）-由窗口触发该事件-适用于-body-标签" class="headerlink" title="窗口事件属性（Window Event Attributes） 由窗口触发该事件 (适用于 body 标签):"></a>窗口事件属性（Window Event Attributes） 由窗口触发该事件 (适用于 body 标签):</h3><blockquote><p>onafterprintNew script 在打印文档之后运行脚本 </p><p>onbeforeprintNew script 在文档打印之前运行脚本 </p><p>onbeforeonloadNew script 在文档加载之前运行脚本 </p><p>onblur script 当窗口失去焦点时运行脚本 </p><p>onerrorNew script 当错误发生时运行脚本 </p><p>onfocus script 当窗口获得焦点时运行脚本 </p><p>onhaschangeNew script 当文档改变时运行脚本 </p><p>onload script 当文档加载时运行脚本</p><p>onmessageNew script 当触发消息时运行脚本 </p><p>onofflineNew script 当文档离线时运行脚本 </p><p>ononlineNew script 当文档上线时运行脚本 </p><p>onpagehideNew script 当窗口隐藏时运行脚本 </p><p>onpageshowNew script 当窗口可见时运行脚本 </p><p>onpopstateNew script 当窗口历史记录改变时运行脚本 </p><p>onredoNew script 当文档执行再执行操作（redo）时运行脚本</p><p>onresizeNew script 当调整窗口大小时运行脚本 </p><p>onstorageNew script 当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本 </p><p>onundoNew script 当文档执行撤销时运行脚本 </p><p>onunloadNew script 当用户离开文档时运行脚本 </p></blockquote><h3 id="表单事件-Form-Events-表单事件在HTML表单中触发-适用于所有-HTML-元素-但该HTML元素需在form表单内"><a href="#表单事件-Form-Events-表单事件在HTML表单中触发-适用于所有-HTML-元素-但该HTML元素需在form表单内" class="headerlink" title="表单事件(Form Events) 表单事件在HTML表单中触发 (适用于所有 HTML 元素, 但该HTML元素需在form表单内):"></a>表单事件(Form Events) 表单事件在HTML表单中触发 (适用于所有 HTML 元素, 但该HTML元素需在form表单内):</h3><blockquote><p>onblur script 当元素失去焦点时运行脚本</p><p>onchange script 当元素改变时运行脚本</p><p>oncontextmenuNew script 当触发上下文菜单时运行脚本</p><p>onfocus script 当元素获得焦点时运行脚本 </p><p>onformchangeNew script 当表单改变时运行脚本 </p><p>onforminputNew script 当表单获得用户输入时运行脚本 </p><p>oninputNew script 当元素获得用户输入时运行脚本 </p><p>oninvalidNew script 当元素无效时运行脚本 </p><p>onreset script 当表单重置时运行脚本。HTML 5 不支持。 </p><p>onselect script 当选取元素时运行脚本 </p><p>onsubmit script 当提交表单时运行脚本 </p></blockquote><h3 id="键盘事件（Keyboard-Events）"><a href="#键盘事件（Keyboard-Events）" class="headerlink" title="键盘事件（Keyboard Events）"></a>键盘事件（Keyboard Events）</h3><blockquote><p>onkeydown script 当按下按键时运行脚本 </p><p>onkeypress script 当按下并松开按键时运行脚本 </p><p>onkeyup script 当松开按键时运行脚本</p></blockquote><h3 id="鼠标事件（Mouse-Events）-通过鼠标触发事件-类似用户的行为-属性"><a href="#鼠标事件（Mouse-Events）-通过鼠标触发事件-类似用户的行为-属性" class="headerlink" title="鼠标事件（Mouse Events） 通过鼠标触发事件, 类似用户的行为: 属性"></a>鼠标事件（Mouse Events） 通过鼠标触发事件, 类似用户的行为: 属性</h3><blockquote><p>onclick script 当单击鼠标时运行脚本 </p><p>ondblclick script 当双击鼠标时运行脚本 </p><p>ondragNew script 当拖动元素时运行脚本 </p><p>ondragendNew script 当拖动操作结束时运行脚本 </p><p>ondragenterNew script 当元素被拖动至有效的拖放目标时运行脚本</p><p>ondragleaveNew script 当元素离开有效拖放目标时运行脚本</p><p>ondragoverNew script 当元素被拖动至有效拖放目标上方时运行脚本</p><p>ondragstartNew script 当拖动操作开始时运行脚本 </p><p>ondropNew script 当被拖动元素正在被拖放时运行脚本 </p><p>onmousedown script 当按下鼠标按钮时运行脚本 </p><p>onmousemove script 当鼠标指针移动时运行脚本 </p><p>onmouseout script 当鼠标指针移出元素时运行脚本 </p><p>onmouseover script 当鼠标指针移至元素之上时运行脚本 </p><p>onmouseup script 当松开鼠标按钮时运行脚本 </p><p>onmousewheelNew script 当转动鼠标滚轮时运行脚本 </p><p>onscrollNew script 当滚动元素的滚动条时运行脚本 </p></blockquote><h3 id="多媒体事件-Media-Events-通过视频（videos），图像（images）或者音频（audio）-触发该事件，多应用于HTML媒体元素比如-audio-embed-img-object-和video-："><a href="#多媒体事件-Media-Events-通过视频（videos），图像（images）或者音频（audio）-触发该事件，多应用于HTML媒体元素比如-audio-embed-img-object-和video-：" class="headerlink" title="多媒体事件(Media Events) 通过视频（videos），图像（images）或者音频（audio） 触发该事件，多应用于HTML媒体元素比如 audio, embed, img, object, 和video)："></a>多媒体事件(Media Events) 通过视频（videos），图像（images）或者音频（audio） 触发该事件，多应用于HTML媒体元素比如 audio, embed, img, object, 和video)：</h3><blockquote><p>onabort script 当发生中止事件时运行脚本 </p><p>oncanplayNew script 当媒介能够开始播放但可能因缓冲而需要停止时运行脚本 </p><p>oncanplaythroughNew script 当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本 </p><p>ondurationchangeNew script 当媒介长度改变时运行脚本</p><p>onemptiedNew script 当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本 </p><p>onendedNew script 当媒介已抵达结尾时运行脚本 </p><p>onerrorNew script 当在元素加载期间发生错误时运行脚本</p><p>onloadeddataNew script 当加载媒介数据时运行脚本</p><p>onloadedmetadataNew script 当媒介元素的持续时间以及其他媒介数据已加载时运行脚本 </p><p>onloadstartNew script 当浏览器开始加载媒介数据时运行脚本 onpauseNew script 当媒介数据暂停时运行脚本 </p><p>onplayNew script 当媒介数据将要开始播放时运行脚本 </p><p>onplayingNew script 当媒介数据已开始播放时运行脚本 </p><p>onprogressNew script 当浏览器正在取媒介数据时运行脚本</p><p>onratechangeNew script 当媒介数据的播放速率改变时运行脚本</p><p>onreadystatechangeNew script 当就绪状态（ready-state）改变时运行脚本</p><p>onseekedNew script 当媒介元素的定位属性 [1] 不再为真且定位已结束时运行脚本 </p><p>onseekingNew script 当媒介元素的定位属性为真且定位已开始时运行脚本 </p><p>onstalledNew script 当取回媒介数据过程中（延迟）存在错误时运行脚本 </p><p>onsuspendNew script 当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本 </p><p>ontimeupdateNew script 当媒介改变其播放位置时运行脚本</p><p>onvolumechangeNew script 当媒介改变音量亦或当音量被设置为静音时运行脚本 </p><p>onwaitingNew script 当媒介已停止播放但打算继续播放时运行脚本 </p></blockquote><h3 id="其他事件："><a href="#其他事件：" class="headerlink" title="其他事件："></a>其他事件：</h3><blockquote><p>onshowNew script 当 menu 元素在上下文显示时触发</p><p>ontoggleNew script 当用户打开或关闭 details 元素时触发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glyphicon和font awesome字体图标的混合使用导致样式混乱</title>
      <link href="/2022/10/13/html6/"/>
      <url>/2022/10/13/html6/</url>
      
        <content type="html"><![CDATA[<p>原则上字体文件的混合使用不会出现混乱，或页面出现乱码标识，框框等问题，如果出现了这种问题，可以从以下几种方式去排查。</p><blockquote><p>1).对应css文件引用路径不对<br>2).只是引用了css，却没有添加对应的fonts文件夹【字体文件】<br>3). css文件与字体文件的相对路径不对<br>4).网站中自定义了全局 font,或font-family 导致 字体文件显示不出来</p></blockquote><span id="more"></span><p>比较常见的问题就是前3个问题，最后一个坑可能有些时候会碰到，这个时候我们需要：</p><blockquote><p>将css文件中对应的font-family 加个 ！important,提高其作用级。</p></blockquote><p>例如。将font-awesome.css中 .fa下的font 或 bootstrap.cs中类<br>glyphicon下的 font-family 添加 ！important 这样可以解决 4)引起的问题，当然这里要确保字体文件的</p><blockquote><p>！important 在自定义（全局）font字体属性之后。</p><p>使用方法：<br>glyphicon————-gylphicon glyphicon-search[放大镜]<br>font awesome——–fa fa-book fa-2x[2倍大小的 书 ]</p><p>详细可看官网一手资料。</p></blockquote><p>这里注意的是使用字体文件时我们不需要安装fonts文件夹下的字体文件，是可以正常使用。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5的主要功能构成</title>
      <link href="/2022/10/13/html5/"/>
      <url>/2022/10/13/html5/</url>
      
        <content type="html"><![CDATA[<p>HTML5主要以下功能构成：</p><blockquote><p>Canvas (2D和3D)<br>Channel消息传送<br>Cross- document消息传送<br>Geolocation<br>MathML<br>Microdata<br>Server-Sent Events<br>Scalable Vector Graphics (SVG)<br>WebSocket API及协议<br>Web Origin Concept<br>Web Storage<br>Web SQL database<br>Web Workers<br>XMLHttpRequest Level 2</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式导航</title>
      <link href="/2022/10/13/html4/"/>
      <url>/2022/10/13/html4/</url>
      
        <content type="html"><![CDATA[<p>以下是实现HTML5响应式导航的一个示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;title&gt;响应式导航&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .topnav &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            background-color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            .topnav a &#123;</span><br><span class="line">                <span class="built_in">float</span>: left;</span><br><span class="line">                display: block;</span><br><span class="line">                color: <span class="comment">#f2f2f2;</span></span><br><span class="line">                text-align: center;</span><br><span class="line">                padding: 14px 16px;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                font-size: 17px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                .topnav a:hover &#123;</span><br><span class="line">                    background-color: <span class="comment">#ddd;</span></span><br><span class="line">                    color: black;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            .topnav .icon &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        @media screen and (max-width: 600px) &#123;</span><br><span class="line">            .topnav a:not(:first-child) &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .topnav a.icon &#123;</span><br><span class="line">                <span class="built_in">float</span>: right;</span><br><span class="line">                display: block;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            .container &#123;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            .bar1, .bar2, .bar3 &#123;</span><br><span class="line">                width: 35px;</span><br><span class="line">                height: 5px;</span><br><span class="line">                background-color: <span class="comment">#333;</span></span><br><span class="line">                margin: 6px 0;</span><br><span class="line">                transition: 0.4s;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar1 &#123;</span><br><span class="line">                -webkit-transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">                transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar2 &#123;</span><br><span class="line">                opacity: 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar3 &#123;</span><br><span class="line">                -webkit-transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">                transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @media screen and (max-width: 600px) &#123;</span><br><span class="line">            .topnav.responsive &#123;</span><br><span class="line">                position: relative;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                .topnav.responsive .icon &#123;</span><br><span class="line">                    position: absolute;</span><br><span class="line">                    right: 0;</span><br><span class="line">                    top: 0;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                .topnav.responsive a &#123;</span><br><span class="line">                    <span class="built_in">float</span>: none;</span><br><span class="line">                    display: block;</span><br><span class="line">                    text-align: left;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> myFunction(iconid) &#123;</span><br><span class="line">            iconid.classList.toggle(<span class="string">&quot;change&quot;</span>);</span><br><span class="line">            var x = document.getElementById(<span class="string">&quot;myTopnav&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (x.className === <span class="string">&quot;topnav&quot;</span>) &#123;</span><br><span class="line">                x.className += <span class="string">&quot; responsive&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x.className = <span class="string">&quot;topnav&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;topnav&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;myTopnav&quot;</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#home&quot;</span>&gt;主页&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#news&quot;</span>&gt;新闻中心&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#contact&quot;</span>&gt;联系我们&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#about&quot;</span>&gt;关于&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;javascript:void(0);&quot;</span> style=<span class="string">&quot;font-size:15px;&quot;</span> class=<span class="string">&quot;icon&quot;</span>&gt;</span><br><span class="line">            &lt;!--&amp;<span class="comment">#9776;--&gt;</span></span><br><span class="line">            &lt;div class=<span class="string">&quot;container&quot;</span> onclick=<span class="string">&quot;myFunction(this)&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;padding-left:16px&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径中的点“./”、“../”、“/”代表的含义</title>
      <link href="/2022/10/13/html3/"/>
      <url>/2022/10/13/html3/</url>
      
        <content type="html"><![CDATA[<p>.&#x2F; 代表当前目录</p><p>..&#x2F; 代表上一层目录</p><p>&#x2F; 代表根目录</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abp生成模板项目</title>
      <link href="/2022/10/13/special4/"/>
      <url>/2022/10/13/special4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过官网选择前后端语言，这里我后台语言选的是“ASP-NET-Core”-前端语言选的是“Vue-js”"><a href="#1-通过官网选择前后端语言，这里我后台语言选的是“ASP-NET-Core”-前端语言选的是“Vue-js”" class="headerlink" title="1.通过官网选择前后端语言，这里我后台语言选的是“ASP.NET Core”,前端语言选的是“Vue.js”"></a>1.通过官网选择前后端语言，这里我后台语言选的是“ASP.NET Core”,前端语言选的是“Vue.js”</h3><h3 id="2-在“Choose-your-project’s-name”栏输入项目名；“邮箱”选填可不填。"><a href="#2-在“Choose-your-project’s-name”栏输入项目名；“邮箱”选填可不填。" class="headerlink" title="2.在“Choose your project’s name”栏输入项目名；“邮箱”选填可不填。"></a>2.在“Choose your project’s name”栏输入项目名；“邮箱”选填可不填。</h3><h3 id="3-点击“Create-my-project-”便可生出abp模板项目后下载。"><a href="#3-点击“Create-my-project-”便可生出abp模板项目后下载。" class="headerlink" title="3.点击“Create my project!”便可生出abp模板项目后下载。"></a>3.点击“Create my project!”便可生出abp模板项目后下载。</h3><h3 id="4-打开生成的文件夹，有个版本号（我这里是6-5-0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。"><a href="#4-打开生成的文件夹，有个版本号（我这里是6-5-0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。" class="headerlink" title="4.打开生成的文件夹，有个版本号（我这里是6.5.0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。"></a>4.打开生成的文件夹，有个版本号（我这里是6.5.0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。</h3><p>后台项目文件夹各项目的主要作用：</p><blockquote><p>src路径下<br>.Application：应用服务层<br>.Core：领域层<br>.EntityFrameworkCore：基础层<br>.Migrator：abp数据库迁移项目<br>.Web.Core、.Web.Host：展现层<br>test路径下<br>.Tests：单元测试</p></blockquote><span id="more"></span><h3 id="5-生成数据库，让后台服务运行起来："><a href="#5-生成数据库，让后台服务运行起来：" class="headerlink" title="5.生成数据库，让后台服务运行起来："></a>5.生成数据库，让后台服务运行起来：</h3><h2 id="1）用vs2019（或其它版本的vs软件）打开后台项目；"><a href="#1）用vs2019（或其它版本的vs软件）打开后台项目；" class="headerlink" title="1）用vs2019（或其它版本的vs软件）打开后台项目；"></a>1）用vs2019（或其它版本的vs软件）打开后台项目；</h2><h2 id="2）在解决方案名上点击右键，然后点击执行：还原NuGet包"><a href="#2）在解决方案名上点击右键，然后点击执行：还原NuGet包" class="headerlink" title="2）在解决方案名上点击右键，然后点击执行：还原NuGet包"></a>2）在解决方案名上点击右键，然后点击执行：还原NuGet包</h2><h2 id="3）删除-EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）"><a href="#3）删除-EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）" class="headerlink" title="3）删除.EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）"></a>3）删除.EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）</h2><h2 id="4）在-Web-Host项目下修改appsettings-json中一下内容："><a href="#4）在-Web-Host项目下修改appsettings-json中一下内容：" class="headerlink" title="4）在.Web.Host项目下修改appsettings.json中一下内容："></a>4）在.Web.Host项目下修改appsettings.json中一下内容：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">//<span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Server=localhost; Database=abpblogDb; Trusted_Connection=True;&quot;</span></span><br><span class="line"><span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Data Source=localhost;Initial Catalog=abpBlogDb;user=dcxz2017;password=qqq;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当然这里的数据库连接配置，需要修改成你想要的信息。</p><h2 id="5）打开程序包管理器控制台（工具》NuGet-包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意："><a href="#5）打开程序包管理器控制台（工具》NuGet-包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意：" class="headerlink" title="5）打开程序包管理器控制台（工具》NuGet 包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意："></a>5）打开程序包管理器控制台（工具》NuGet 包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意：</h2><blockquote><p>a.设置启动项目：在网站项目（这里是.Web.Host）上右键》设为启动项目<br>b.程序包管理器控制台：选择默认项目为刚刚删除数据库历史配置文件的那个项目（这里为：.EntityFrameworkCore）</p></blockquote><p>然后依次执行以下命令：</p><blockquote><p>（1）新增数据迁移执行命令：Add-Migration first_init</p><p>（2）执行更新数据库命令：Update-Database</p></blockquote><p>执行完后，数据库中就生成了相应的数据库表信息。</p><p>这时候就可启动后台服务项目了（一个swagger接口可视化的网站）。</p><h3 id="6-启动前端项目"><a href="#6-启动前端项目" class="headerlink" title="6.启动前端项目"></a>6.启动前端项目</h3><p>在vue文件夹下打开cmd依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">yarn serve --open</span><br></pre></td></tr></table></figure><p>如果是npm则依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如果启动后出现控制台提示跨域的错误则在appsettings.json中节点App的“CorsOrigins”属性中添加对应可跨域的服务网址，例如本项目是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;App&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;ServerRootAddress&quot;</span>: <span class="string">&quot;https://localhost:44311/&quot;</span>,</span><br><span class="line"><span class="string">&quot;ClientRootAddress&quot;</span>: <span class="string">&quot;http://localhost:4200/&quot;</span>,</span><br><span class="line"><span class="string">&quot;CorsOrigins&quot;</span>: <span class="string">&quot;http://localhost:4200,http://localhost:8080,http://localhost:8081,http://localhost:3000&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>默认的账号密码：admin&#x2F;123qwe</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Abp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sessionStorage和localStorage的区别与用法</title>
      <link href="/2022/10/13/html2/"/>
      <url>/2022/10/13/html2/</url>
      
        <content type="html"><![CDATA[<p>二者都是用于浏览器存储，多用于用来存储网站一些需要页面交互的隐秘信息。<br>当然主流浏览器和高版本的IE浏览器是支持这两种用法的，为了代码的严谨性我们可以加一个判断：</p><pre><code class="bash"> if (!window.sessionStorage) &#123;              this.$message(&quot;浏览器不支持sessionStorage，请联系管理员解决&quot;);            &#125;</code></pre><span id="more"></span><h2 id="1）sesstionStorage-临时存储-在浏览器打开期间存在-用来储存数据的-存储量小存储数据，浏览器关闭后存储信息才清除："><a href="#1）sesstionStorage-临时存储-在浏览器打开期间存在-用来储存数据的-存储量小存储数据，浏览器关闭后存储信息才清除：" class="headerlink" title="1）sesstionStorage(临时存储): 在浏览器打开期间存在, 用来储存数据的,存储量小存储数据，浏览器关闭后存储信息才清除："></a>1）sesstionStorage(临时存储): 在浏览器打开期间存在, 用来储存数据的,存储量小存储数据，浏览器关闭后存储信息才清除：</h2><blockquote><p>sessionStorage.setItem(‘key’, ‘需要存储的值’);&#x2F;&#x2F;存</p><p>sessionStorage.getItem(‘key’));&#x2F;&#x2F;取</p><p>sessionStorage.removeItem(‘key’);&#x2F;&#x2F;删除指定key信息</p><p>sessionStorage.clear();&#x2F;&#x2F;删除所有存储信息</p></blockquote><p>　</p><h2 id="2）localStorage-长期存储-用来储存数据的-数据在浏览器关闭依然存在-存储量更大，其存取与删除方式与sessionStorage类似"><a href="#2）localStorage-长期存储-用来储存数据的-数据在浏览器关闭依然存在-存储量更大，其存取与删除方式与sessionStorage类似" class="headerlink" title="2）localStorage(长期存储): 用来储存数据的,数据在浏览器关闭依然存在,存储量更大，其存取与删除方式与sessionStorage类似"></a>2）localStorage(长期存储): 用来储存数据的,数据在浏览器关闭依然存在,存储量更大，其存取与删除方式与sessionStorage类似</h2><blockquote><p>localStorage.setItem(‘key’,  ‘需要存储的值’);&#x2F;&#x2F;存<br>localStorage.getItem(‘key’);&#x2F;&#x2F;取<br>localStorage.removeItem(‘key’);&#x2F;&#x2F;删除指定key信息<br>localStorage.clear();&#x2F;&#x2F;删除所有本地存储信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙箱环境（sandbox environment）</title>
      <link href="/2022/10/13/terminology/"/>
      <url>/2022/10/13/terminology/</url>
      
        <content type="html"><![CDATA[<p>沙箱环境<br>Sandbo(又叫沙箱、沙盘、沙盒)环境，即是一个虚拟系统程序，允许你在沙盘环境中运行浏览器或其他程序，因此运行所产生的变化可以随后删除。</p><span id="more"></span><p>它创造了一个类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。其为一个独立的虚拟环境，可以用来测试不受信任的应用程序或上网行为。</p><p>沙箱早期主要用于测试可疑软件等，比如黑客们为了试用某种病毒或者不安全产品，往往可以将它们在沙箱环境中运行。经典的沙箱系统的实现途径一般是通过拦截系统调用，监视程序行为，然后依据用户定义的策略来控制和限制程序对计算机资源的使用，比如改写注册表，读写磁盘等。</p><p>沙盒测试<br>沙盒测试就是在产品未上线前在内部环境或网络下进行的测试，此时在正常的线上环境是无法看到或查询到该产品或项目的，只有产品在测试环境下无问题上传到生产环境之后，用户才能看到该产品或功能</p>]]></content>
      
      
      <categories>
          
          <category> 百科知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习之路 -基础教程篇</title>
      <link href="/2022/10/13/special3/"/>
      <url>/2022/10/13/special3/</url>
      
        <content type="html"><![CDATA[<p>以下内容是根据 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-prerequisites" title="" target="">官网</a> 资料和自己实践整理（查阅资料）所得；</p><blockquote><p>根据官网说明：Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。</p></blockquote><span id="more"></span><h3 id="创建第一个Electron应用程序"><a href="#创建第一个Electron应用程序" class="headerlink" title="创建第一个Electron应用程序"></a>创建第一个Electron应用程序</h3><h2 id="简介》"><a href="#简介》" class="headerlink" title="简介》"></a>简介》</h2><p>Electron应用程序是使用npm包建立的。Electron可执行文件应该安装在项目的devDependencies中，并且可以使用package.json文件中中的脚本在开发模式下运行。</p><p>可执行文件运行package.json的main属性中的JavaScript入口点。这个文件控制着Electron的主进程，它运行着Node.js的一个实例，负责应用的生命周期，显示本地接口，执行特权操作，以及管理渲染进程。</p><p>渲染进程(或简称渲染器)负责显示图形内容。您可以通过将网页指向一个web地址或一个本地HTML文件来将网页加载到渲染器中。渲染器的行为与普通网页非常相似，并且可以访问相同的web api。</p><h2 id="学前需知》"><a href="#学前需知》" class="headerlink" title="学前需知》"></a>学前需知》</h2><p>通过将Chromium和Node.js嵌入到一个二进制文件中，Electron允许您使用一个JavaScript代码库创建在Windows、macOS和Linux上运行的跨平台应用程序。</p><p>Electron是一个原生的web应用包装层，运行在Node.js环境中，因此在进入学习之前需要熟悉Node和前端web开发基础知识：</p><p><a href="https://developer.mozilla.org/en-US/docs/Learn" title="" target="">Getting started with the Web (MDN Web Docs)</a> </p><p><a href="https://nodejs.dev/learn" title="" target="">NodeJS官方入门指南</a></p><h2 id="与其它桌面程序应用框架的对比》"><a href="#与其它桌面程序应用框架的对比》" class="headerlink" title="与其它桌面程序应用框架的对比》"></a>与其它桌面程序应用框架的对比》</h2><p>同样是做桌面应用程序的框架，那么它和传统的Winform和WPF又有什么区别呢？</p><p>Winform：上手容易，技术老套，性能一般，常用组件库DevExpress,SunnyUI，适合对性能要求不高的项目</p><p>WPF：性能高，可以做炫酷的效果，上手进阶难，适合大型的桌面应用程序</p><p>Electron：对前端技术人员比较友好，相当于在网页上套了一层壳，可以打包成exe程序，只是打包后比较臃肿，性能堪忧，不过上手容易，方法都是封装好了的，根据官方可以快速构建一个桌面应用程序。</p><p>当然基于c++ 开发的QT框架也能做出漂亮的桌面应用程序。</p><p>所以这么看来Eelectron也是挺有优势的，因为是基于web开发来实现跨平台的桌面应用程序，对于如今广大的前端开发用户还是很友好的，当然其性能和对内存的处理以及打包文件的处理是不够好的。</p><h2 id="开发工具》"><a href="#开发工具》" class="headerlink" title="开发工具》"></a>开发工具》</h2><p>这里我使用的是：<a href="https://code.visualstudio.com/" title="" target="">Visual Studio Code</a></p><p>这个软件也是基于Electron开发出来的。</p><h2 id="创建项目》"><a href="#创建项目》" class="headerlink" title="创建项目》"></a>创建项目》</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-electron-app &amp;&amp; <span class="built_in">cd</span> my-electron-app</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>使用方式：<br>这里我是在E盘（你自己的项目存放位置）下的文件搜索框内容输入cmd，<br>这样打开命令提示符号终端窗口，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-electron-app &amp;&amp; <span class="built_in">cd</span> my-electron-app</span><br></pre></td></tr></table></figure><p>回车</p><p>这样就会在E盘下生成 my-electron-app 这个文件夹，并且指令进入此文件夹</p><p>接着使用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>这样就是初始化创建了项目的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br></pre></td></tr></table></figure><p>当然了如果使用了淘宝镜像，可以使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init </span><br></pre></td></tr></table></figure><p>来替换 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="Electron的安装》"><a href="#Electron的安装》" class="headerlink" title="Electron的安装》"></a>Electron的安装》</h2><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure><p>执行以上命令：在初始化包并安装Electron之后，package.json文件应该如下所示。同时文件夹下还生成了node_modules文件夹，其中包含Electron可执行文件，以及一个包锁：.package-lock.json来指定要安装的确切依赖版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;electron progroam&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;zl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^20.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上文件（package.json）中的main对应的脚本文件(这里是main.js）<br>它是Electron应用程序的入口。这个脚本控制主进程，它运行在Node.js环境中，负责控制应用的生命周期，显示本机接口，执行特权操作，以及管理渲染进程(后面会详细介绍)。<br>这里的main.js是我们在创建应用的时候自己命名的，但是框架并没有为我们生成这个js文件，所以我们需要在根目录下自己去手动生成，以此来保证配置正确运行。这里我们将main.js中的内容设置简单点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">&#x27;hello Electron!&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="程序启动配置》"><a href="#程序启动配置》" class="headerlink" title="程序启动配置》"></a>程序启动配置》</h2><p>由于Electron的主进程是在Node.js中运行的，所以您可以使用Electron命令执行任意Node.js代码(甚至可以将其用作REPL)。<br>要执行这个脚本，就需要需要添加“electron .”到package.json的scripts字段中的start指令中。这个指令将告诉Electron可执行文件在当前目录中查找主脚本，并在dev模式中运行它。这样package.json内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-electron-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;electron progroam&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;start&quot;:&quot;electron .&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;zl&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;electron&quot;: &quot;^20.0.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>      <p>配置完start指令后，通过在终端（cmd）运行指令 npm run start便会在终端打印出“hello Electron!”。<br>当然这只是在Electron中执行了打印文字的脚本，接下来将学习如何使用HTML创建用户界面并将其加载到本地窗口中。<br>上面我们实现了通过在终端运行Electron指令–执行入口文件main.js</p><p>功能：打印文字；</p><p>接下来我们将学习如何在BrowserWindow中加载网页。</p><p>根据官网介绍：</p><blockquote><p>In Electron, each window displays a web page that can be loaded either from a local HTML file or a remote web address.<br>在Electron中，每个窗口都显示一个可以从本地HTML文件或远程web地址加载的网页。</p></blockquote><p>也就是Electron应用程序窗口可以显示本项目中的.html文件，也可以通过加载网站网络地址来实现网页的呈现。<br>如果是加载网站的url来实现网页的呈现，这种方式就相当于我们把网站开发好了，发布到外网上。然后在Electron中加载进来就可以了，相当于给网站外加了个一个浏览器的壳，这样对前端开发人员来说是相当友好滴。</p><h3 id="接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。"><a href="#接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。" class="headerlink" title="接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。"></a>接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。</h3><h2 id="1）在BrowserWindow中加载本地（本项目）html文件"><a href="#1）在BrowserWindow中加载本地（本项目）html文件" class="headerlink" title="1）在BrowserWindow中加载本地（本项目）html文件"></a>1）在BrowserWindow中加载本地（本项目）html文件</h2><p>我们在根目录下创建一个名为index.html的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>那么我们如何将这个网页加载到Electron的浏览器窗口（BrowserWindow）中去呢？<br>前面我们已经了解到了，package.json配置文件中的main对应的是整个Electron程序的入口文件（这里是：main.js）。<br>这样我们需要将main.js中的内容修改为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>让我们看看以上配置内容的语义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上配置用CommonJS模块语法导入了两个Electron模块：</p><blockquote><p>app：控制整个应用程序事件的声明周期</p><p>BrowserWindow：创建和管理应用程序的窗口</p></blockquote><p>这里我们可能已经注意到模块名称的大小写并不是使用统一的规则，这里面是有它自己的规则的，根据官网说明：</p><blockquote><p>Electron在这里遵循典型的JavaScript约定，其中PascalCase模块是可实例化的类构造函数(如BrowserWindow, Tray, Notification)，而camelCase模块是不可实例化的(如app, ipcreender, webContents)。</p></blockquote><p>需要注意的是：目前Electron不直接支持ECMAScript模块(即使用import来加载模块)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置表示：通过函数createWindow()加载你的网页到一个新的BrowserWindow实例；<br>也就是说窗口BrowserWindow可以被我们重写的，这样我们可以控制它的大小、显示的位置、是否显示自带的辅助功能菜单（File、Edit、View、Window、Help）以及是否显示最小化，最大化和关闭图标等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上配置表示：应用程序执行时候就调用我们定义的函数createWindow()（重写BrowserWindow）<br>Electron的许多核心模块都是Node.js事件触发器，它们遵循Node的异步事件驱动架构。app模块就是其中一个发射器。</p><p>在Electron中，BrowserWindows只能在app模块的ready事件触发后创建。<br>你可以通过使用app.whenReady() API以及等这个事件的promise执行完后来回调createWindow()</p><h2 id="2）在BrowserWindow中加载网站网络URL来实现网页的呈现"><a href="#2）在BrowserWindow中加载网站网络URL来实现网页的呈现" class="headerlink" title="2）在BrowserWindow中加载网站网络URL来实现网页的呈现"></a>2）在BrowserWindow中加载网站网络URL来实现网页的呈现</h2><p>在以上内容的基础上，我们只需要将配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.loadURL(<span class="string">&#x27;https://www.romanticlife.top&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样就可以在BrowserWindow调用已发布的网站（本博客）<br>现在我们执行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>此时我们看到index.html文件加载到窗口（BrowserWindow）中去了。<br>至此，Electron应用程序是已经能够正常的运行起来了，那么我们如如何去管理应用程序的窗口生命周期喃？</p><h2 id="管理应用程序的声明周期》"><a href="#管理应用程序的声明周期》" class="headerlink" title="管理应用程序的声明周期》"></a>管理应用程序的声明周期》</h2><p>Electron应用程序在窗口中显示的每个网页将运行在一个单独的进程中，称为渲染进程(或简称为渲染器)。</p><p>这个渲染过程与通用网页的渲染过程是一致的，即渲染过程可以访问与典型前端web开发相同的JavaScript api和工具，例如使用webpack来捆绑和缩减代码，或者使用React来构建用户界面…</p><p>应用程序窗口在每个操作系统上的行为都不同。比起默认地强制执行这些约定，Electron给你在应用程序代码中实现它们的选择，如果你希望遵循它们。你可以通过监听由应用程序和BrowserWindow模块发出的事件来实现基本的窗口约定。</p><p>检查Node的进程。平台变量可以帮助您在特定平台上有条件地运行代码。</p><p>注意</p><blockquote><p>Electron只能在三种可能的平台上运行:win32 (Windows)、linux (linux)和darwin (macOS)。</p></blockquote><h2 id="关闭所有窗口时退出应用-Windows-amp-Linux-》"><a href="#关闭所有窗口时退出应用-Windows-amp-Linux-》" class="headerlink" title="关闭所有窗口时退出应用 (Windows &amp; Linux)》"></a>关闭所有窗口时退出应用 (Windows &amp; Linux)》</h2><p>注意这里只是针对：window和Linux系统，macOS系统不适用。</p><p>在Windows和Linux上，关闭所有窗口通常会完全退出应用程序。如果要在Electron应用程序中实现这个模式，需要监听app模块的window-all-closed事件，并调用app.quit()来退出你的应用程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) app.quit()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们就是实现了一个Electron应用程序从创建》运行》关闭，整个生命周期。完整的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;electron progroam&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>:<span class="string">&quot;electron .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;zl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^20.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main.js</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h3><p>如果你想在VS Code工具中调试Electron应用程序，则需要将VS Code附加到主进程和渲染进程。<br>以下是要运行的示例配置：</p><p>在你的项目下新建一个.vscode文件夹，并在其下创建一个launch.json配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;compounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Main + renderer&quot;</span>,</span><br><span class="line">      <span class="string">&quot;configurations&quot;</span>: [<span class="string">&quot;Main&quot;</span>, <span class="string">&quot;Renderer&quot;</span>],</span><br><span class="line">      <span class="string">&quot;stopAll&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Renderer&quot;</span>,</span><br><span class="line">      <span class="string">&quot;port&quot;</span>: 9222,</span><br><span class="line">      <span class="string">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pwa-chrome&quot;</span>,</span><br><span class="line">      <span class="string">&quot;webRoot&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Main&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>&quot;</span>,</span><br><span class="line">      <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/node_modules/.bin/electron&quot;</span>,</span><br><span class="line">      <span class="string">&quot;windows&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/node_modules/.bin/electron.cmd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;--remote-debugging-port=9222&quot;</span>],</span><br><span class="line">      <span class="string">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span>,</span><br><span class="line">      <span class="string">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做了以上工作后，当你选择侧边栏的“运行和调试”时，会出现“Main + renderer”选项，这将允许你设置断点并检查主进程和渲染进程中的所有变量。</p><p>在以上launch.json文件中有3个配置项：</p><blockquote><p>1）Main用于启动主进程，并开放9222端口用于远程调试(–remote-debugging-port&#x3D;9222)。这是我们将用于监听Renderer调试器的端口。因为主进程是一个Node.js进程，类型被设置为pwa-node (pwa-是用来告诉VS Code使用最新的JavaScript调试器的一个前缀)。<br>2）Renderer用于调试渲染器进程。由于这个进程（Renderer）是由主进程创建的，所以我们必须“附加”到主进程上(“request”:“attach”)，而不是创建一个新的进程。渲染器进程是一个web进程，所以不得不使用pwa-chrome作为调试器。<br>3）Main + renderer是一个复合任务，可以同时执行前面的任务。</p></blockquote><p>因为我们是在Renderer中附加一个进程，所以有可能你的代码的前几行会被跳过，因为调试器在它们被执行之前没有足够的时间进行连接。可以通过刷新页面或在开发模式执行代码之前设置settimeout来解决这个问题。</p><h2 id="【知识延申】》如何给Chrome浏览器开启远程调试的功能？"><a href="#【知识延申】》如何给Chrome浏览器开启远程调试的功能？" class="headerlink" title="【知识延申】》如何给Chrome浏览器开启远程调试的功能？"></a>【知识延申】》如何给Chrome浏览器开启远程调试的功能？</h2><blockquote><p>。找到Chrome浏览器的安装地址（在Chrome浏览器的搜索栏输入：chrome:&#x2F;&#x2F;version    出现页面信息中的“可执行文件路径”项即是当前电脑中Chrome浏览器的安装地址）；<br>。关闭所有打开的Chrome浏览器<br>。在地址栏输入cmd，打开命令终端<br>。在命令终端中输入：chrome.exe –remote-debugging-port&#x3D;9222</p></blockquote><p>按照以上操作后便会自动打开一个网页：<a href="http://127.0.0.1:9222/json/version">http://127.0.0.1:9222/json/version</a><br>页面中的webSocketDebuggerUrl后面的地址，这就是我们远程链接的地址；测试的过程中，可能会发现标签页越开越多。只要至少保留一个标签页不关闭，那么这个浏览器窗口就可以一直使用。<br>当然如果你想在调试方面有更深入的了解，下面的指南提供了更多的信息:</p><p><a href="https://www.electronjs.org/docs/latest/tutorial/application-debugging" title="" target="">Application Debugging</a></p><p><a href="https://www.electronjs.org/docs/latest/tutorial/devtools-extension" title="" target="">DevTools Extensions</a></p><h3 id="预加载脚本：preload-js"><a href="#预加载脚本：preload-js" class="headerlink" title="预加载脚本：preload.js"></a>预加载脚本：preload.js</h3><p>接下来将了解什么是预加载脚本，以及如何使用预加载脚本安全地将私有api公开到渲染进程中以及如何使用Electron的进程间通信(IPC)模块在主进程和渲染进程之间通信。 </p><h2 id="什么是预加载脚本？"><a href="#什么是预加载脚本？" class="headerlink" title="什么是预加载脚本？"></a>什么是预加载脚本？</h2><blockquote><p>预加载脚本中的代码在网页加载到浏览器窗口之前运行。它可以访问DOM API和Node.js环境，通常通过contextBridge API向渲染器暴露私有API。</p></blockquote><p>因为主进程和渲染进程的职责有很大不同，Electron应用程序经常使用预加载脚本建立进程间通信(IPC)接口，在两种进程之间传递任意消息。</p><p>Electron的主进程是一个具有完全操作系统访问权限的Node.js环境。在Electron模块之上，你还可以访问Node.js内置模块，以及任何通过npm安装的包。另一方面，由于安全原因，渲染进程运行网页时默认不运行Node.js。</p><p>为了将Electron的不同过程类型连接在一起，我们需要使用一种称为预加载的特殊脚本。</p><h2 id="接下来了解使用预加载脚本增强渲染器。"><a href="#接下来了解使用预加载脚本增强渲染器。" class="headerlink" title="接下来了解使用预加载脚本增强渲染器。"></a>接下来了解使用预加载脚本增强渲染器。</h2><p>BrowserWindow的预加载脚本运行在可以访问HTML DOM和Node.js环境的上下文中。在渲染器加载页面之前会注入预加载脚本，类似于Chrome扩展的内容脚本。若要向渲染器添加需要特权访问的特性，可以通过contextBridge API定义全局对象。</p><p>为了演示这个概念，我们创建一个预加载脚本，实现将应用程序的Chrome、Node和Electron版本暴露到渲染器中。</p><p>新建preload.js脚本，用于暴露Electron进程的选定属性。在Versions全局变量中向渲染器进程添加Versions对象。内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const &#123; contextBridge &#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.exposeInMainWorld(<span class="string">&#x27;versions&#x27;</span>, &#123;</span><br><span class="line">  node: () =&gt; process.versions.node,</span><br><span class="line">  chrome: () =&gt; process.versions.chrome,</span><br><span class="line">  electron: () =&gt; process.versions.electron,</span><br><span class="line">  // we can also expose variables, not just <span class="built_in">functions</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要将这个脚本附加到你的渲染器进程，需要将它的路径传递给BrowserWindow构造函数中的webPreferences.preload项:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*main.js */</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            preload: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在以上内容中我们用到了两个Node.js的知识点：</p><blockquote><p>1）__dirname    字符串指向当前正在执行的脚本的路径(本例中即为项目的根文件夹)。</p><p>2）path. join    接口将多个路径拼接在一起，组成一个跨所有平台的组合路径字符串。</p></blockquote><p>此时，渲染器可以访问全局versions，接着让我们在窗口中显示该版本信息。这个变量可以通过window.versions或versions访问。</p><p>新建一个renderer.js脚本，用于通过 document.getElementById DOM API实现将 id为info的HTML元素的文本信息替换为版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*renderer.js*/</span><br><span class="line">const information = document.getElementById(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">information.innerText = `This app is using Chrome (v<span class="variable">$&#123;versions.chrome()&#125;</span>), Node.js (v<span class="variable">$&#123;versions.node()&#125;</span>), and Electron (v<span class="variable">$&#123;versions.electron()&#125;</span>)`</span><br></pre></td></tr></table></figure><p>然后修改index.html，添加一个id属性为info的新元素，并引入renderer.js脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;./renderer.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>完成以上步骤后，运行程序我们可以看到窗口显示出Chorm、Node.js、Electron的版本信息。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>正如上面所提到的那样，Electron的main和renderer进程职责不同且不可互换。这意味着不能从渲染进程直接访问Node.js api，也不能从主进程访问HTML文档对象模型(DOM)。</p><p>解决这个问题的方法是使用Electron的ipcMain和ipcrederer模块进行进程间通信(IPC)。如需从你的网页向主进程发送消息，你可以用ipcMain.handle句柄建立一个主进程，然后在预加载脚本中暴露一个调用ipcRenderer.invoke的函数去触发这个句柄。</p><p>为了演示这个观点，我们将在渲染器中添加一个名为ping()的全局函数，该函数将从主进程返回一个字符串。</p><p>首先，在预加载脚本中配置调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    contextBridge,</span><br><span class="line">    ipcRenderer</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.exposeInMainWorld(<span class="string">&#x27;versions&#x27;</span>, &#123;</span><br><span class="line">    node: () =&gt; process.versions.node,</span><br><span class="line">    chrome: () =&gt; process.versions.chrome,</span><br><span class="line">    electron: () =&gt; process.versions.electron,</span><br><span class="line">    ping: () =&gt; ipcRenderer.invoke(<span class="string">&#x27;ping&#x27;</span>),</span><br><span class="line">    // we can also expose variables, not just <span class="built_in">functions</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="IPC安全机制》"><a href="#IPC安全机制》" class="headerlink" title="IPC安全机制》"></a>IPC安全机制》</h2><p>请注意，我们为何将ipcRenderer.invoke(‘ping’) 调用封装在一个帮助函数中，而不是直接通过上下文桥接暴露ipcRenderer模块的。你绝对不想通过preload直接暴露整个ipcRenderer模块。这将使渲染器能够向主进程发送任意IPC消息，并将为恶意代码提供有力的攻击载体。</p><p>然后，在主进程中设置handle 侦听器，此操作需要在加载HTML文件之前执行，以确保在渲染器进程发出invoke调用之前handle 侦听器已准备就绪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*main.js */</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    ipcMain,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            preload: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    ipcMain.handle(<span class="string">&#x27;ping&#x27;</span>, () =&gt; <span class="string">&#x27;pong&#x27;</span>)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>设置好发送方和接收方之后，现在就可以通过刚才定义的“ping”通道从渲染器向主进程发送消息了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*renderer.js*/</span><br><span class="line">const information = document.getElementById(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">information.innerText = `This app is using Chrome (v<span class="variable">$&#123;versions.chrome()&#125;</span>), Node.js (v<span class="variable">$&#123;versions.node()&#125;</span>), and Electron (v<span class="variable">$&#123;versions.electron()&#125;</span>)`</span><br><span class="line"></span><br><span class="line">const func = async () =&gt; &#123;</span><br><span class="line">    const response = await window.versions.ping()</span><br><span class="line">    console.log(response) // prints out <span class="string">&#x27;pong&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>若要对ipcRenderer 和ipcMain模块更深入理解，查看完整的<a href="https://www.electronjs.org/docs/latest/tutorial/ipc" title="" target="">Inter-Process Communication</a>指南。</p><p>接下来将了解为应用添加更多功能的环境，又如何将应用分发给用户。</p><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>即增加应用程序的复杂性。</p><p>如果您一直按照本文进行操作，至此，您应该拥有一个具有静态用户界面的功能性Electron应用程序。从现在开始，你可以从两个大的方向来提升你的应用:</p><blockquote><p>1）增加渲染进程的web应用程序代码的复杂性</p><p>2）使操作系统和Node.js的深度集成</p></blockquote><p>理解这两个宽泛概念之间的区别是很重要的。</p><p>对于第一点，Electron对特殊环境是非必要的。在Electron中构建一个漂亮的待办事项列表的应用程序只是将你的Electron BrowserWindow指向一个漂亮的待办事项列表web应用程序。最终，你正在使用与在web上相同的工具(HTML、CSS、JavaScript)构建你的渲染器UI。因此，Electron的文档不会深入讨论如何使用标准的web工具。</p><p>另一方面，Electron还提供了一组丰富的工具，允许您与桌面环境集成，从创建托盘图标到为显示本地菜单添加全局快捷方式。它还在主进程中为您提供了Node.js环境的所有功能。这一功能集将Electron应用程序与在浏览器选项卡中运行网站分开，并且是Electron文档的重点。</p><p>Electron的文档中有许多教程，可以帮助您了解更高级的话题和更深入的操作系统集成。要开始使用，<br>请查看<a href="https://www.electronjs.org/docs/latest/tutorial/examples" title="" target="">How-To Examples</a>文档。</p><p>接着继续了解如何使Electron应用程序让最终用户使用？</p><p>为此我们将学习使用<a href="https://www.electronforge.io/" title="" target="">Electron Forge</a>打包和分发应用程序的基础知识。</p><h3 id="应用程序打包"><a href="#应用程序打包" class="headerlink" title="应用程序打包"></a>应用程序打包</h3><p>Electron没有任何打包和分发的工具捆绑到其核心模块中。一旦你有了一个在开发模式下工作的Electron应用程序，你需要使用其他工具来创建一个打包的应用程序，你可以分发给你的用户(也称为分发版)。分发文件可以是安装程序(如Windows上的MSI)，也可以是可移植的可执行文件(如macOS上的.app)。</p><h2 id="打包项目》"><a href="#打包项目》" class="headerlink" title="打包项目》"></a>打包项目》</h2><p>将 Electron Forge 添加到您应用的开发依赖中<br>electron-forge 相当于  的一个脚手架，可以让我们更方便的创建、运行、打包  项目</p><blockquote><p>注意：electron-forge打包时是需要安装git的；<br>因为它在打包时会检测系统有没有装git，没有是打不了包的 。</p></blockquote><p>并使用其”import”命令设置 Forge 的脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install @electron-forge/cli -g</span><br><span class="line"></span><br><span class="line">npx electron-forge import</span><br></pre></td></tr></table></figure><p>以上两条命令执行成功后会在项目中package.json文件scripts节点中自动新增以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package</span><br></pre></td></tr></table></figure><p>会在根目录下生成可执行程序.exe文件夹out。</p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run make</span><br></pre></td></tr></table></figure><p>包含以下2个步骤：</p><blockquote><p>1）首先它将引用线下运行electronic -forge包，将您的应用程序代码与Electron二进制文件捆绑在一起。打包的代码将生成到一个文件夹中。</p><p>2）然后它将使用这个打包的app文件夹为每个配置的制造者创建一个单独的分发版。npm run make命令执行后，会在根目录下生成一个out文件夹，其中包含分发版和一个包含打包的应用程序代码（.exe）的文件夹。</p></blockquote><p>这样，out&#x2F;make文件夹中的分发版应该可以启动了</p><p>至此您已经创建了第一个捆绑的Electron应用程序。</p><p>以上我们已经成功生成了可执行文件，如何修改它exe可执行程序的图标、程序名称（xxx.exex）。。。？？？</p><h2 id="配置程序图标和名称等》"><a href="#配置程序图标和名称等》" class="headerlink" title="配置程序图标和名称等》"></a>配置程序图标和名称等》</h2><p>这是可以在打包脚本中去配置的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;package&quot;</span>:<span class="string">&quot;electron-packager . appName --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span>,</span><br></pre></td></tr></table></figure> <blockquote><p>.appName</p><p>表示生成的exe可执行文件的名称是appName，即：appName.exe</p><p>–icon&#x3D;favicon.ico</p><p>设置可执行文件的图标是favicon.ico，这个图标文件是我们已手动放在根目录下</p><p>–out&#x3D;.&#x2F;out </p><p>指定打包文件输出的文件夹位置,当前指定的为项目目录下的out文件夹</p><p>–asar </p><p>该参数可以不加（一般需要加上），如果加上，打包之后应用的源码会以.asar格式存在；否则会以文件夹app形式存在，app中呈现源码</p><p>–app-version&#x3D;1.0.1</p><p>设置项目程序的版本号</p><p>–overwrite</p><p>表示此次打包会覆盖上次打包的内容</p><p>–ignore&#x3D;node_modules</p><p>指定打包时忽略目录：node_modules </p></blockquote><h3 id="发布与更新"><a href="#发布与更新" class="headerlink" title="发布与更新"></a>发布与更新</h3><p>如果您一直按照本教程的流程学习，这是本教程的最后一步!在这小结，你将发布你的应用到</p><p><a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository" title="" target="">GitHub releases</a> </p>上，并将自动更新集成到你的应用代码中。<h2 id="使用update-electronjs-org"><a href="#使用update-electronjs-org" class="headerlink" title="使用update.electronjs.org"></a>使用update.electronjs.org</h2><p>Electron的维护者在 <a href="https://update.electronjs.org/">https://update.electronjs.org/</a> 上为开源应用程序提供免费的自动更新服务。它的要求是:</p><blockquote><p>1）应用运行在macOS或Windows上</p><p>2）应用程序有一个公共的GitHub库</p><p>3）构建版本发布到GitHub releases</p><p>4）构建是代码签名的（<a href="https://www.electronjs.org/zh/docs/latest/tutorial/code-signing" title="" target="">code signed</a>）</p></blockquote><h2 id="发布GitHub-release"><a href="#发布GitHub-release" class="headerlink" title="发布GitHub release"></a>发布GitHub release</h2><p>Electron Forge拥有 <a href="https://www.electronforge.io/config/publishers" title="" target="">Publisher</a> 插件，可以自动将打包的应用程序分发到各种来源。在本教程中，我们将使用GitHub Publisher，它将允许我们将我们的代码发布到GitHub上。</p><h2 id="生成个人访问令牌"><a href="#生成个人访问令牌" class="headerlink" title="生成个人访问令牌"></a>生成个人访问令牌</h2><p>Forge不能在未经允许的情况下发布到GitHub上的任何存储库。你需要传入一个经过验证的令牌，让Forge能够访问你的GitHub发行版。最简单的方法是使用 public_repo作用域 <a href="https://github.com/settings/tokens/new" title="" target="">create a new personal access token (PAT)</a>，它提供对公共存储库的写访问。一定要保密这个标志。</p><h2 id="设置GitHub发布者"><a href="#设置GitHub发布者" class="headerlink" title="设置GitHub发布者"></a>设置GitHub发布者</h2><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><p>Forge的 <a href="https://www.electronforge.io/config/publishers/github" title="" target="">GitHub Publisher</a> 是一个需要安装在你的项目的devDependencies中的插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @electron-forge/publisher-github</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @electron-forge/publisher-github</span><br></pre></td></tr></table></figure><h2 id="在Forge中配置发布者"><a href="#在Forge中配置发布者" class="headerlink" title="在Forge中配置发布者"></a>在Forge中配置发布者</h2><p>一旦您安装了它，您需要在您的Forge配置中设置它。一个完整的选项列表记录在Forge的 <a href="https://js.electronforge.io/publisher/github/interfaces/publishergithubconfig" title="" target="">PublisherGitHubConfig</a> API文档中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*package.json*/</span><br><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;forge&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;publishers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/publisher-github&quot;</span>,</span><br><span class="line">          <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;github-user-name&quot;</span>,</span><br><span class="line">              <span class="string">&quot;name&quot;</span>: <span class="string">&quot;github-repo-name&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;prerelease&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;draft&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置身份验证令牌"><a href="#设置身份验证令牌" class="headerlink" title="设置身份验证令牌"></a>设置身份验证令牌</h2><p>您还需要让发布服务器知道您的身份验证令牌。默认情况下，它将使用存储在 GITHUB_TOKEN环境变量中的值。</p><h2 id="运行发布指令"><a href="#运行发布指令" class="headerlink" title="运行发布指令"></a>运行发布指令</h2><p>把Forge的 <a href="https://www.electronforge.io/cli#publish" title="" target="">publish command</a> 添加到你的npm脚本中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*package.json*/</span><br><span class="line">  //...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line">    <span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span>,</span><br><span class="line">    <span class="string">&quot;publish&quot;</span>: <span class="string">&quot;electron-forge publish&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //...</span><br><span class="line">```  </span><br><span class="line">这个命令将运行你配置的makers，并将输出分发版发布到新的GitHub版本:</span><br><span class="line">```bash</span><br><span class="line">npm run publish</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run publish</span><br></pre></td></tr></table></figure><p>默认情况下，这只会为您的主机操作系统和体系结构发布一个发行版。你可以通过传递–arch 标志到你的Forge命令来发布不同的架构。</p><p>这个版本的名称将对应于项目文件package.json中的version 字段。</p><h2 id="在GitHub-Actions中发布"><a href="#在GitHub-Actions中发布" class="headerlink" title="在GitHub Actions中发布"></a>在GitHub Actions中发布</h2><p>在本地发布是很痛苦的，特别是因为你只能为你的主机操作系统创建分发版(也就是说，你不能从macOS发布windows.exe文件)。</p><p>一个解决方案是通过自动化工作流发布你的应用程序，比如 <a href="https://github.com/features/actions" title="" target="">GitHub Actions</a>，它可以在Ubuntu、macOS和Windows上运行云中的任务。这正是 <a href="https://www.electronjs.org/fiddle" title="" target="">Electron Fiddle</a> 所采用的方法。你可以参考Fiddle<br>的 <a href="https://github.com/electron/fiddle/blob/main/.github/workflows/build.yaml" title="" target="">Build and Release pipeline</a> 以及 <a href="https://github.com/electron/fiddle/blob/main/forge.config.js" title="" target="">Forge configuration</a> 来了解更多细节。</p><h2 id="测试更新程序代码"><a href="#测试更新程序代码" class="headerlink" title="测试更新程序代码"></a>测试更新程序代码</h2><p>现在我们有了一个通过GitHub releases的功能发布系统，我们现在需要告诉我们的Electron应用程序在新发布的时候下载更新。Electron应用程序通过 <a href="https://www.electronjs.org/zh/docs/latest/api/auto-updater" title="" target="">autoUpdater</a> 模块实现这一功能，该模块从更新服务器提要读取数据，以检查是否有新版本可供下载。</p><p>update.electronjs.org服务提供了一个与更新程序兼容的提要。例如，Electron Fiddle v0.28.0将在<a href="https://update.electronjs.org/electron/fiddle/darwin/v0.28.0">https://update.electronjs.org/electron/fiddle/darwin/v0.28.0</a> 上检查端点，以查看是否有更新的GitHub版本可用。服务提供了一个与更新程序兼容的提要。例如，Electron Fiddle v0.28.0将在<a href="https://update.electronjs.org/electron/fiddle/darwin/v0.28.0">https://update.electronjs.org/electron/fiddle/darwin/v0.28.0</a> 上检查端点，以查看是否有更新的GitHub版本可用。</p><p>在你的版本发布到GitHub后，update.electronjs.org服务应该可以为你的应用程序工作。剩下的唯一步骤是使用autoUpdater 模块配置提要。</p><p>为了使这个过程更容易，Electron团队维护 <a href="https://github.com/electron/update-electron-app" title="" target="">update-electron-app</a> 模块，该模块在一个函数调用中为update.electronjs.org设置autoUpdater 样板文件——不需要配置。此模块将搜索update.electronjs.org feed，此与项目 package.json文件中”repository”字段匹配。</p><p>首先，将安装作为运行时依赖项的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install update-electron-app</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add update-electron-app</span><br></pre></td></tr></table></figure><p>然后，导入模块并在主进程中立即调用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*main.js*/</span><br><span class="line">require(<span class="string">&#x27;update-electron-app&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>这样，一旦打包应用，它会为你发布的每一个新的GitHub版本实现自我更新。</p><p>在本小结中，我们配置了Electron Forge的GitHub发布者上传你的应用程序的分发到GitHub发行版。由于分发版不能总是在平台之间生成，如果您无法访问机器，我们建议在持续集成管道中设置您的构建和发布流程。</p><p>Electron应用程序可以通过将autoUpdater模块指向更新服务器feed进行自我更新。update.electronjs.org是Electron为GitHub上发布的开源应用提供的一个免费更新服务器。配置您的Electron应用程序来使用该服务就像安装和导入update-electron-app模块一样简单。</p><p>如果您的应用程序不符合update.electronjs.org的条件，您应该部署自己的更新服务器，并自己配置autoUpdater模块。</p><h1 id="问题集锦》"><a href="#问题集锦》" class="headerlink" title="问题集锦》"></a>问题集锦》</h1><p>1）命令cnpm install electron -g 是全局安装，用于在第一次安装后出现‘electron’不被识别的情况，安装成功了，使用：electron -v命令可以查看版本号。</p><p>当然了使用这个命令前需要添加淘宝镜像；具体可参照前面创建Vue项目里的操作方法，也可自行百度。</p><p>这里我在使用这个命令时出现了以下错误：</p><p>Error: EPERM: operation not permitted, mkdir ‘D:\softprogram\nodejs\node_modules\electron_tmp’<br>原因是：node权限问题；</p><p>解决办法：这里我们进入：D:\softprogram\nodejs》右键》属性》安全》点击“编辑”》选中“Users”》勾选权限框 “允许”栏中的所有权限》应用》确定</p><p>再执行命令：cnpm install electron -g，即可成功安装。</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p>1、<a href="https://baijiahao.baidu.com/s?id=1717329147141658938&wfr=spider&for=pc" title="" target="">Electron构建跨平台应用</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBuilder X 开发 5+App(mui项目)</title>
      <link href="/2022/10/13/special2/"/>
      <url>/2022/10/13/special2/</url>
      
        <content type="html"><![CDATA[<p>根据 <a href="https://hx.dcloud.net.cn/" title="" target="">HBuilder X 官网</a> 介绍，工具具有以下特点:</p><blockquote><ol><li>轻巧<br>仅10余M的绿色发行包(不含插件)</li><li>极速<br>不管是启动速度、大文档打开速度、编码提示，都极速响应<br>C++的架构性能远超Java或Electron架构</li><li>vue开发强化<br><code>HX</code>对vue做了大量优化投入，开发体验远超其他开发工具<br><a href="https://hx.dcloud.net.cn/Tutorial/Language/vue">详见</a> 按下Alt+鼠标左键可直接打开网址</li><li>小程序支持<br>国外开发工具没有对中国的小程序开发优化，<code>HX</code>可开发<code>uni-app</code>或<code>小程序</code>、<code>快应用</code>等项目，为国人提供更高效工具</li><li>markdown利器<br><code>HX</code>是唯一一个新建文件默认类型是markdown的编辑器，也是对md支持最强的编辑器<br><code>HX</code>为md强化了众多功能，请<strong>务必点击</strong>【菜单-帮助-markdown语法示例】，快速掌握md及<code>HX</code>的强化技巧！</li><li>清爽护眼<br>HX的界面比其他工具更清爽简洁，绿柔主题经过科学的脑疲劳测试，是最适合人眼长期观看的主题界面<br><a href="https://hx.dcloud.net.cn/Tutorial/Other/health">详见</a></li><li>强大的语法提示<br><code>HX</code>是中国唯一一家拥有自主IDE语法分析引擎的公司，对前端语言提供准确的代码提示和转到定义(Alt+鼠标左键)</li><li>高效极客工具<br>更强大的多光标、智能双击…让字处理的效率大幅提升<br>了解<code>HX</code>的极客技巧，<a href="https://hx.dcloud.net.cn/Tutorial/UserGuide/skill">详见</a>，</li><li>更强的json支持<br>现代js开发中大量json结构的写法，<code>HX</code>提供了比其他工具更高效的操作<br><a href="https://hx.dcloud.net.cn/Tutorial/Language/json">详见</a></li></ol></blockquote><span id="more"></span><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1）去<a href="https://hx.dcloud.net.cn/" title="" target="">官网</a>下载HBuilder X 软件</p><p>2）文件》新建》项目》5+App</p><p>模板选择：mui项目</p><p>这样一个基本的使用mui框架的5+App项目就建好了。</p><p>调试运行<br>既然是一个App项目，那么它的运行不是像传统网站在浏览器中运行的，而是在安卓设备或者模拟器的虚拟机上运行的。<br>这里我的是逍遥模拟器<br>（1）在<a href="http://www.xyaz.cn/" title="" target="">逍遥模拟器官网</a> 上下载模拟器<br>（2）在项目里通过HBuilderx软件链接逍遥模拟器<br>点击HBuilderx上的 运行》运行到手机或模拟器<br>这里如果我们是第一次通过HBuilderx连接模拟器的话，是无法加测到模拟器的。因为我们还未对adb命令 做以下下配置：</p><h2 id="1）adb-exe添加到系统环境变量中去"><a href="#1）adb-exe添加到系统环境变量中去" class="headerlink" title="1）adb.exe添加到系统环境变量中去"></a>1）adb.exe添加到系统环境变量中去</h2><p>【1】在Hbuilderx的安装目录下找到adb的路径（我的是：D:\softprogram\HBuilderX3.3.11.20220209\HBuilderX.3.3.11.20220209\HBuilderX\plugins\launcher\tools\adbs）<br>【2】我的电脑》右键》属性》高级系统设置》环境变量》双击系统变量栏的Path》新建》将刚刚adb的路径添加进去》保存<br>我这里用的是win10电脑，其它系统处理类似</p><h2 id="2）验证adb命令是否配置正确"><a href="#2）验证adb命令是否配置正确" class="headerlink" title="2）验证adb命令是否配置正确"></a>2）验证adb命令是否配置正确</h2><p>在终端命令窗口（cmd）中输入指令:adb version 回车查看安卓模拟器的版本信息（我这里是Android Debug Bridge version 1.0.32），<br>输入指令：adb devices<br>如果出现：List of devices attached<br>那么表示我们接下来可以 通过adb指令让模拟器连接上电脑。</p><h2 id="3）让模拟器连接上电脑"><a href="#3）让模拟器连接上电脑" class="headerlink" title="3）让模拟器连接上电脑"></a>3）让模拟器连接上电脑</h2><p>【1】打开逍遥模拟器<br>【2】在逍遥模拟器的安装文件下打开终端命令窗口cmd<br>【3】执行命令：adb connect 127.0.0.1:21503<br>此时窗口出现信息：already connected to 127.0.0.1:21503</p><h2 id="4）5-APP-mui项目在安卓模拟器上运行"><a href="#4）5-APP-mui项目在安卓模拟器上运行" class="headerlink" title="4）5+APP mui项目在安卓模拟器上运行"></a>4）5+APP mui项目在安卓模拟器上运行</h2><p>回到HBuilderx项目中》运行》运行到手机或模拟器》运行到Android App基座<br>这时列表中会出现：127.0.0.1:21503<br>如果没有出现，请按照步骤执行：adb connect 127.0.0.1:21503<br>最后点击运行出现以下界面表示我们的项目已经在模拟器上跑起来了！</p><p>同时点击运行》运行到手机或模拟器》点击“显示Webview调试控制台”，可查看项目运行日志（排错）。<br>更多用法，可查看<a href="https://hx.dcloud.net.cn/" title="" target="">HBuilder X 官网</a> 和<a href="https://dev.dcloud.net.cn/mui/" title="" target="">mui 官网</a>相关知识。</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBuilder </tag>
            
            <tag> HBuilder X </tag>
            
            <tag> App </tag>
            
            <tag> mui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/2022/10/13/special1/"/>
      <url>/2022/10/13/special1/</url>
      
        <content type="html"><![CDATA[<p>开发微信公众号，我们需要用到微信公众平台的服务账号，也就是我们开发项目的身份吧。</p><p>需要注意的是，微信公众号分为订阅号、服务号、企业微信 三种</p><p>这也是我们创建账号选择账号的类型，同时一经创建后，类型无法修改。</p><p>创建是通过邮箱注册的，而且三种类型的服务号，一旦用邮箱注册其中一种，便无法再注册另外两种类型的微信公众号</p><p>这里我是选择的：服务号</p><span id="more"></span><p>但是在创建的过程中我发现无论选择那种主体类型（政府，媒体，企业，其他组织），需要的信息都很多，有些作为开发人员测试而言是无法提供的。</p><p>那么有没有办法个人测试开发微信公众号呢？</p><p>答案是有的！</p><p>微信公众平台测试号的申请与使用》</p><h3 id="1-什么时候需要申请测试号？"><a href="#1-什么时候需要申请测试号？" class="headerlink" title="1.什么时候需要申请测试号？"></a>1.什么时候需要申请测试号？</h3><p>目前想到的应用场景有2种:</p><h2 id="1-由于个人申请只能申请订阅号，公众号的许多其它功能无法使用-而测试号可以调用微信公众平台所有的接口，只是不能群发消息。"><a href="#1-由于个人申请只能申请订阅号，公众号的许多其它功能无法使用-而测试号可以调用微信公众平台所有的接口，只是不能群发消息。" class="headerlink" title="(1)由于个人申请只能申请订阅号，公众号的许多其它功能无法使用;而测试号可以调用微信公众平台所有的接口，只是不能群发消息。"></a>(1)由于个人申请只能申请订阅号，公众号的许多其它功能无法使用;而测试号可以调用微信公众平台所有的接口，只是不能群发消息。</h2><p>测试号申请无需公众帐号，快速申请接口测试号,直接体验和测试公众平台所有高级接口</p><h2 id="2-作为正式服务的测试号使用。"><a href="#2-作为正式服务的测试号使用。" class="headerlink" title="(2)作为正式服务的测试号使用。"></a>(2)作为正式服务的测试号使用。</h2><p>比如你现在正式环境跑着一个正式号的程序，所有的账号信息(appId 和 appSecret)都是正式号的，这个时候你修改了服务，升级了某些功能。为了不影响线上程序的正常使用，你可以再申请一个测试号来测试新版本程序。</p><h3 id="2-如何申请测试账号"><a href="#2-如何申请测试账号" class="headerlink" title="2.如何申请测试账号"></a>2.如何申请测试账号</h3><p>申请地址: 微信公众平台接口测试帐号申请</p><p>点击“登录”，然后扫一扫授权即可。</p><p>需要注意的是 测试号是和个人微信号关联起来的，不是公众号主体关联。。也就是每个人都可以申请，而不是必须有公众号主题才可以。测试号和公众号是独立的。</p><h3 id="3-申请之后如何配置？"><a href="#3-申请之后如何配置？" class="headerlink" title="3.申请之后如何配置？"></a>3.申请之后如何配置？</h3><p>申请成功你就可以看到测试号信息了，包括<br>appID和appsecret。那除了修改账号信息，还有哪些需要配置呢？</p><h2 id="1-用途"><a href="#1-用途" class="headerlink" title="(1)用途"></a>(1)用途</h2><p>URL:就是你后台服务器的url。必须是80端口(微信强制要求，其它端口或者其它端口映射的虚拟端口均不可以)，用来接收关键词回复，菜单定义等功能。<br>token自己定义就好，token是你在接口文件里自己设置的，设置后回到高级功能里来设置成一样的，目的是告诉公众平台，那个服务器是我的，这个过程就是验证密码。这个算是自己设置的一个验证码，要自己在代码里面设置的。开发就是将高级功能接口文件部署在服务器上，使能被访问。接口文件在微信公众号帮助文档里面找。</p><h2 id="2-设置调用微信JS接口的域名"><a href="#2-设置调用微信JS接口的域名" class="headerlink" title="(2)设置调用微信JS接口的域名"></a>(2)设置调用微信JS接口的域名</h2><p>注意:无需以”http:&#x2F;&#x2F;“，直接写域名就可以,例如 “aa.bb.com”</p><h2 id="3-设置网页回调域名"><a href="#3-设置网页回调域名" class="headerlink" title="(3)设置网页回调域名"></a>(3)设置网页回调域名</h2><p>用途：通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息。 无需以”http:&#x2F;&#x2F;“开头，直接写域名就可以,例如 “aa.bb.com”</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装pycharm软件后在Terminal终端无法使用pip，显示No module named pip如何解决?</title>
      <link href="/2022/10/13/tool10/"/>
      <url>/2022/10/13/tool10/</url>
      
        <content type="html"><![CDATA[<p>安装pycharm的时候会卸载pip的有关内容。若出现了这种情况，则运行以下指令：</p><blockquote><p>1）python -m ensurepip<br>2）python -m pip install –upgrade pip</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install --save、npm install --save-dev 、npm install -g 的区别</title>
      <link href="/2022/10/13/tool9/"/>
      <url>/2022/10/13/tool9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>devDependencies    用于开发环境<br>dependencies    用于线上环境</p></blockquote><span id="more"></span><p>dependencies依赖的包不仅线上环境可以用，开发环境也能使用，反之则不行<br>默认情况下，在哪个文件夹下运行npm，npm就在当前目录创建一个文件夹node_modules</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NPM install moduleName --save</span><br></pre></td></tr></table></figure><blockquote><p>1.将项目模块写入到package.json的dependencies节点<br>安装模块到当前node_modules文件夹下<br>运行npm install时，会将模块下载到当前node_modules目录下</p><p>2.NPM install moduleName –save-dev<br>将项目模块写入到package.json的devDependencies节点<br>安装模块到当前node_modules文件夹下<br>运行npm install时，会将模块下载到当前node_modules目录下</p><p>3.NPM install moduleName -g<br>安装模块到全局，不会在项目node_modules目录中安装<br>不会将模块信息写入到dependencies或devDependencies节点<br>运行npm install时，不会下载该模块</p></blockquote><p>—————总结————–</p><p>devDependencies节点下的模块是开发时候需要的，如构建工具glup、webpack，预处理器less、sass这些只在开发环境有用，所以使用–save-dev安装</p><p>dependencies节点下的模块是线上代码运行需要的，如axios、vue-router、vuex，所以需要使用–save安装</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue解决本地调试和发布后生产环境跨域的问题</title>
      <link href="/2022/10/13/tool8/"/>
      <url>/2022/10/13/tool8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-解决本地环境调试跨域（前端代码使用代理）"><a href="#1-解决本地环境调试跨域（前端代码使用代理）" class="headerlink" title="1.解决本地环境调试跨域（前端代码使用代理）"></a>1.解决本地环境调试跨域（前端代码使用代理）</h3><h2 id="1-在main-js中定义代理"><a href="#1-在main-js中定义代理" class="headerlink" title="1).在main.js中定义代理"></a>1).在main.js中定义代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.dev_proxyname = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-在index-js中定义代理地址"><a href="#2-在index-js中定义代理地址" class="headerlink" title="2).在index.js中定义代理地址"></a>2).在index.js中定义代理地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  dev:&#123;</span><br><span class="line"></span><br><span class="line">    // Paths</span><br><span class="line"></span><br><span class="line">    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,    </span><br><span class="line"></span><br><span class="line">    assetsPublicPath:runPath,</span><br><span class="line"></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line"></span><br><span class="line">      changeOrigin: <span class="literal">true</span>,/*允许跨域*/</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;        </span><br><span class="line"></span><br><span class="line">        target:<span class="string">&quot;http://localhost:8090&quot;</span>,//本地后台调试post</span><br><span class="line"></span><br><span class="line">        secure:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,   </span><br><span class="line"></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">.........</span><br></pre></td></tr></table></figure><h2 id="3-调用"><a href="#3-调用" class="headerlink" title="3)调用"></a>3)调用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$axios</span>(&#123;</span><br><span class="line"></span><br><span class="line">url: this.dev_proxyname + <span class="string">&quot;/InsertBlog/AddBlog&quot;</span>,</span><br><span class="line">method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">data: JSON.stringify(this.blog),</span><br><span class="line">headers: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (res.data) &#123;</span><br><span class="line">this.submmited = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样便能解决本地调试 get或post跨域的问题。部署到生产线上仍然会产生：Cross-Origin 跨域的问题</p><p>注意</p><p>如果是在config&gt;dev.env.js 中配置以下代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">const merge = require(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line">const prodEnv = require(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line">/*配置测试环境下url*/</span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  API_HOST: <span class="string">&#x27;&quot;http://localhost:8090&quot;&#x27;</span> // 开发环境地址【可调试后端api】</span><br><span class="line"> 内容  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">在config&gt;prod.env.js 中配置以下代理</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line">  API_HOST: <span class="string">&#x27;&quot;https://www.romanticlife.top:8090&quot;&#x27;</span> // 生产环境地址</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方式配置代理在使用axios  post时无效…</p><h3 id="2-解决生产环境跨域"><a href="#2-解决生产环境跨域" class="headerlink" title="2.解决生产环境跨域"></a>2.解决生产环境跨域</h3><p>需要在生产环境服务器nginx添加允许跨域的配置和反向代理。</p><p>本网站配置内容如下，以供参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 常用命令</span></span><br><span class="line"><span class="comment"># taskkill /f /t /im nginx.exe    #kill 所有的nginx端口</span></span><br><span class="line"><span class="comment"># start nginx                     #开启 nginx服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个配置的意思是就是：当请求：https://www.romanticlife.top:8090 时，就转发请求</span></span><br><span class="line">    <span class="comment">#当前服务器端口 5000，而这个端口正好是 .necore webapi发布后启动.exe 占用的端口</span></span><br><span class="line">    <span class="comment">#这就要求这个 exe软件需要打开，否则请求不到接口数据</span></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        listen 8090 ssl;<span class="comment">#这里需要云服务器上开放8090端口；</span></span><br><span class="line">        server_name  www.romanticlife.top;   </span><br><span class="line">        ssl_certificate 1_www.romanticlife.top_bundle.crt;  <span class="comment"># 指定证书的位置，绝对路径</span></span><br><span class="line">        ssl_certificate_key 2_www.romanticlife.top.key;  <span class="comment"># 绝对路径，同上</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        ssl_prefer_server_ciphers on;    </span><br><span class="line"></span><br><span class="line">         location /&#123;</span><br><span class="line">            <span class="comment">#  如果nginx加了允许跨域的配置，那么.netcore api 就不需要加跨域配置（二者选其一）</span></span><br><span class="line">            <span class="comment">#  add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span></span><br><span class="line">    <span class="comment">#  add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET,HEAD,OPTIONS,POST,PUT&#x27;;</span></span><br><span class="line">    <span class="comment">#  add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#x27;;</span></span><br><span class="line"></span><br><span class="line">            proxy_pass HTTP://localhost:5000;</span><br><span class="line">            proxy_set_header Host <span class="variable">$proxy_host</span>; <span class="comment"># 修改转发请求头，让8080端口的应用可以受到真实的请求</span></span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name  www.romanticlife.top;</span><br><span class="line">        ssl_certificate 1_www.romanticlife.top_bundle.crt;  <span class="comment"># 指定证书的位置，绝对路径</span></span><br><span class="line">        ssl_certificate_key 2_www.romanticlife.top.key;  <span class="comment"># 绝对路径，同上</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,HEAD,OPTIONS,POST,PUT&#x27;</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            root   html\VueWeb;</span><br><span class="line">            index  index.html index.htm;     </span><br><span class="line"></span><br><span class="line">               location /api&#123;          </span><br><span class="line">                rewrite ^/api/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">                proxy_pass HTTP://localhost:5000;</span><br><span class="line">               &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样也就解决了生产环境跨域的问题。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置的网页刷新 404</title>
      <link href="/2022/10/13/tool7/"/>
      <url>/2022/10/13/tool7/</url>
      
        <content type="html"><![CDATA[<p>在配置中添加：</p><blockquote><p>try_files $uri $uri&#x2F; &#x2F;index.html; —解决页面刷新404问题 </p></blockquote><p>实例：</p><span id="more"></span><pre><code class="bash"> location / &#123;            add_header &#39;Access-Control-Allow-Origin&#39; *;            add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,HEAD,OPTIONS,POST,PUT&#39;;              add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#39;;              root   html\VueWeb;            index  index.html index.htm;            try_files $uri $uri/ /index.html; ---解决页面刷新404问题                   location /api&#123;                          rewrite ^/api/(.*)$ /$1 break;                proxy_pass HTTP://localhost:5000;               &#125;                      &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniApp 报错 plus is not defined</title>
      <link href="/2022/10/13/tool6/"/>
      <url>/2022/10/13/tool6/</url>
      
        <content type="html"><![CDATA[<h3 id="plus是什么？"><a href="#plus是什么？" class="headerlink" title="plus是什么？"></a>plus是什么？</h3><blockquote><p>plus是5+Runtime的内部对象。<br>就像chrome浏览器里有chrome.开头的一些对象方法，5+runtime内部内置了plus对象。<br>因为plus和mui不一样，plus是引擎级别的，不需要前端框架。而mui是前端框架，所以是要引入mui.js才能使用的。</p></blockquote><span id="more"></span><h3 id="不要在没有plus和mui的环境下调用相关API"><a href="#不要在没有plus和mui的环境下调用相关API" class="headerlink" title="不要在没有plus和mui的环境下调用相关API"></a>不要在没有plus和mui的环境下调用相关API</h3><blockquote><p>1.普通浏览器里没有plus环境，只有HBuilder真机运行、打包后、或流应用环境下才能运行plus api。</p><p>2.在普通浏览器里运行时plus api时控制台必然会输出plus is not defined错误提示。</p><p>3.mui作为一个前端框架，你必须保证当前页面引入了mui.js。否则也会出现mui is not defined。 </p></blockquote><h3 id="不要在plus和mui未完成初始化时调用相关API"><a href="#不要在plus和mui未完成初始化时调用相关API" class="headerlink" title="不要在plus和mui未完成初始化时调用相关API"></a>不要在plus和mui未完成初始化时调用相关API</h3><blockquote><p>就像在dom初始化完成前(DOMContentLoaded)去操作dom，就会报错是一样的道理。<br>plus和mui都需要初始化，在初始化完成后调用再调用。<br>一般我们在plusready的回调事件里调用plus api。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    document.addEventListener(<span class="string">&#x27;plusready&#x27;</span>,<span class="function"><span class="title">function</span></span> () &#123;  </span><br><span class="line">    // 在这里调用plus api  </span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>执行更高效的写法是这样，如果plus已经存在，就直接使用</p><pre><code class="bash"> function plusReady()&#123;              // 在这里调用plus api          &#125;          if(window.plus)&#123;              plusReady();          &#125;else&#123;              document.addEventListener(&#39;plusready&#39;,plusReady,false);          &#125;</code></pre><p>mui框架对此进行了封装，写法更简单：</p><pre><code class="bash"> mui.plusReady(function()&#123;               // 在这里调用plus api          &#125;);</code></pre><p>事实上，mui作为一个框架，也有初始化的过程，但mui的初始化过程在DOMContentLoaded完毕后就结束了。<br>mui ready的写法是这样，但一般无需使用。</p><pre><code class="bash">mui.ready(function () &#123;           &#125;)</code></pre><h3 id="关于加载顺序"><a href="#关于加载顺序" class="headerlink" title="关于加载顺序"></a>关于加载顺序</h3><blockquote><p>plus的ready的时间，在2016年12月后的ios版本上，其实是随时可用状态，不需要plus ready概念，但为了保持向下兼容，也仍然存在plus的ready事件；而安卓版本，plus的ready的时间是可以调节的。</p></blockquote><p>具体参考：<a href="http://ask.dcloud.net.cn/article/921">http://ask.dcloud.net.cn/article/921</a><br>而mui的ready一般伴随DOMContentLoaded而完成。<br>详细的启动时序参考这里：<a href="http://ask.dcloud.net.cn/article/571">http://ask.dcloud.net.cn/article/571</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> uniApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office的另类安装方法</title>
      <link href="/2022/10/13/tool5/"/>
      <url>/2022/10/13/tool5/</url>
      
        <content type="html"><![CDATA[<a href="https://www.bilibili.com/video/BV193411K7Yq/?spm_id_from=333.337.search-card.all.click&vd_source=d476ccd7f594c6a924ede109727a1a64" title="" target="">office的另类安装方法</a>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn commit时候一直显示please wait，且一直不动</title>
      <link href="/2022/10/13/tool4/"/>
      <url>/2022/10/13/tool4/</url>
      
        <content type="html"><![CDATA[<p>解决方案：<br>node_modules 这个文件右键，选择TortoiseSVN，再选择Unversion and add to ignore list   就可以了；<br>因为SVN检索node_modules文件系统比较慢。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令</title>
      <link href="/2022/10/13/tool3/"/>
      <url>/2022/10/13/tool3/</url>
      
        <content type="html"><![CDATA[<p>1).命令可以查看nginx的服务进程信息</p><blockquote><p>tasklist &#x2F;fi “imagename eq nginx.exe”</p></blockquote><p>2).命令可以关闭nginx的服务进程[所有的，慎用]</p><blockquote><p>taskkill &#x2F;fi “imagename eq nginx.exe” &#x2F;f</p></blockquote><p>3).启动nginx[前提是配置了conf]</p><blockquote><p>Start nginx</p></blockquote><span id="more"></span><p>4).查看nginx的版本号</p><blockquote><p>nginx -v</p></blockquote><p>5).停止nginx</p><blockquote><p>nginx -s stop</p></blockquote><p>6).快速停止或关闭nginx</p><blockquote><p>nginx -s stop</p></blockquote><p>7).正常停止或关闭nginx</p><blockquote><p>nginx -s quit</p></blockquote><p>8).配置文件修改后重载命令</p><blockquote><p>nginx -s reload</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode常用的插件集合</title>
      <link href="/2022/10/13/tool2/"/>
      <url>/2022/10/13/tool2/</url>
      
        <content type="html"><![CDATA[<ol><li>Vetur&#x2F;Volar ：vue&#x2F;vue3语法高亮、智能感知、Emmet等, 包含格式化功能， Alt+Shift+F （格式化全文）</li><li>ESLint : 校验js代码规范</li><li>Prettier - Code formatter ： 格式化js、css代码插件</li><li>open in browser ： 在文件右键 可以选择在浏览器预览</li><li>Auto Rename Tag : 重命名一个HTML &#x2F; XML标签时，自动重命名配对的HTML &#x2F; XML标签<span id="more"></span></li><li>Path Intellisense ：路径自动补全插件</li><li>Bracket Pair Colorizer ：各种结对的括号颜色高亮</li><li>HTML CSS Support ： html 标签上 class 智能提示当前项目所支持的样式</li><li>HTML Snippets： H5代码片段以及提示</li><li>CSS Peek： css 样式追踪</li><li>filesize： 在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</li><li>REST Client ：优雅调试接口</li><li>npm Intellisense：导入语句自动补全npm模块名称</li><li>Code Runner ：代码一键运行，支持超过40种语言</li><li>Color Info ： CSS 中使用颜色得色彩模型的（HEX、 RGB、HSL 和 CMYK）</li><li>Format Files ： 一键格式化目录下所有代码</li><li>image preview ：鼠标hover图片路径上，显示图像预览</li><li>JavaScript Booster ：代码重构，简化插件（把var转为const或者let，去除多余的else语句，合并声明和初始化）</li><li>Debugger for Chrome：编辑器中打断点，轻松地在Chrome里调试JavaScrip</li><li>GitLens ：丰富的git日志插件</li><li>Material Icon Theme：Material主题图标</li><li>Sea Green Theme：主题</li><li>Chinese (Simplified) Language Pack for Visual Studio Code：中文（简体）语言包为VS Code提供本地化界面</li><li>Alignment：根据&#x3D;、:、*&#x3D;、+&#x3D;、&#x3D;&gt;、&#x2F;&#x3D;等符号对选中代码快速对齐</li><li>Debug Visualizer：实现算法可视化插件</li><li>Settings Sync：同步 Visual Studio Code 设置</li><li>Turbo Console Log：快捷console.log</li><li>LeetCode：刷题网站 LeetCode插件</li><li>:emojisense: ：快速挑选 Markdown 中的 Emoji。</li><li>Live Server：加载功能的本地开发服务器，以处理静态和动态页面。</li></ol><p>原文链接：<a href="https://blog.csdn.net/tangkebo/article/details/117339968">https://blog.csdn.net/tangkebo/article/details/117339968</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 实现一次执行多个指令</title>
      <link href="/2022/10/13/tool1/"/>
      <url>/2022/10/13/tool1/</url>
      
        <content type="html"><![CDATA[<p>现在有这么一个情况是存在以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;node build/build.js&quot;</span>,       </span><br><span class="line">    <span class="string">&quot;package&quot;</span>:<span class="string">&quot;electron-packager . Electron_Vue应用 --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们将要执行start和electron指令，常规的做法是依次npm run start和npm run electron即可；</p><span id="more"></span><p>但有时候需要多开终端命令窗口，比如以上情况：我们在执行npm run start 后是启动了vue网站，无法在当前终端命令窗口中执行第二个指令，否则，网站就关闭了；</p><p>或者是操作更多条指令的时候，这样一个一个去执行比较麻烦，那么有没有只需要执行一条指令就可以依次执行多条指令的办法呢？</p><p>起初我想到的是：直接将两个指令拼接成一个指令即：</p> <blockquote><p>“serve”: “npm run start&amp;&amp;npm run electron” </p></blockquote><p> 但是实际执行：npm run serve后发现，它只能执行拼接指令的第一条指令，另外一条指令直接被忽略了。</p><p>正确的做法是要使用到模块：concurrently</p><h2 id="1）安装concurrently模块"><a href="#1）安装concurrently模块" class="headerlink" title="1）安装concurrently模块"></a>1）安装concurrently模块</h2><blockquote><p>npm install concurrently –save</p></blockquote><h2 id="2）将拼接指令修改为"><a href="#2）将拼接指令修改为" class="headerlink" title="2）将拼接指令修改为"></a>2）将拼接指令修改为</h2><blockquote><p>“serve”: “concurrently &quot;npm run start&quot; &quot;npm run electron&quot;“,</p></blockquote><p>这样，我们通过执行 npm run serve ，工具就会自动依次执行：npm run start、npm run electron 两个指令了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 常用的UI组件与框架总结</title>
      <link href="/2022/10/08/vue27/"/>
      <url>/2022/10/08/vue27/</url>
      
        <content type="html"><![CDATA[<h3 id="一、UI组件及框架（原文地址：https-tangjiusheng-com-vue-155-html）"><a href="#一、UI组件及框架（原文地址：https-tangjiusheng-com-vue-155-html）" class="headerlink" title="一、UI组件及框架（原文地址：https://tangjiusheng.com/vue/155.html）"></a>一、UI组件及框架（原文地址：<a href="https://tangjiusheng.com/vue/155.html%EF%BC%89">https://tangjiusheng.com/vue/155.html）</a></h3><p>element - 饿了么出品的Vue2的web UI工具套件</p><p>mint-ui - Vue 2的移动UI元素</p><p>iview - 基于 Vuejs 的开源 UI 组件库</p><p>Keen-UI - 轻量级的基本UI组件合集</p><p>vue-material - 通过Vue Material和Vue 2建立精美的app应用</p><p>muse-ui - 三端样式一致的响应式 UI 库</p><p>vuetify - 为移动而生的Vue JS 2组件框架</p><span id="more"></span><p>vonic - 快速构建移动端单页应用</p><p>vue-blu - 帮助你轻松创建web应用</p><p>vue-multiselect - Vue.js选择框解决方案</p><p>VueCircleMenu - 漂亮的vue圆环菜单</p><p>vue-chat - vuejs和vuex及webpack的聊天示例</p><p>radon-ui - 快速开发产品的Vue组件库</p><p>vue-waterfall - Vue.js的瀑布布局组件</p><p>vue-carbon - 基于 vue 开发MD风格的移动端</p><p>vue-beauty - 由vue和ant design创建的优美UI组件</p><p>bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件</p><p>vueAdmin - 基于vuejs2和element的简单的管理员模板</p><p>vue-ztree - 用 vue 写的树层级组件</p><p>vue-tree - vue树视图组件</p><p>vue-tabs - 多tab页轻型框架</p><h3 id="二、滚动scroll组件"><a href="#二、滚动scroll组件" class="headerlink" title="二、滚动scroll组件"></a>二、滚动scroll组件</h3><p>vue-scroller - Vonic UI的功能性组件</p><p>vue-mugen-scroll - 无限滚动组件</p><p>vue-infinite-loading - VueJS的无限滚动插件</p><p>vue-virtual-scroller - 带任意数目数据的顺畅的滚动</p><p>vue-infinite-scroll - VueJS的无限滚动指令</p><p>vue-scrollbar - 最简单的滚动区域组件</p><p>vue-scroll - vue滚动</p><p>vue-pull-to-refresh - Vue2的上拉下拉</p><p>mint-loadmore - VueJS的双向下拉刷新组件</p><p>vue-smoothscroll - smoothscroll的VueJS版本</p><h3 id="三、slider组件"><a href="#三、slider组件" class="headerlink" title="三、slider组件"></a>三、slider组件</h3><p>vue-awesome-swiper - vue.js触摸滑动组件</p><p>vue-slick - 实现流畅轮播框的vue组件</p><p>vue-swipe - VueJS触摸滑块</p><p>vue-swiper - 易于使用的滑块组件</p><p>vue-images - 显示一组图片的lightbox组件</p><p>vue-carousel-3d - VueJS的3D轮播组件</p><p>vue-slide - vue轻量级滑动组件</p><p>vue-slider - vue 滑动组件</p><p>vue-m-carousel - vue 移动端轮播组件</p><p>dd-vue-component - 订单来了的公共组件库</p><p>vue-easy-slider - Vue 2.x的滑块组件</p><h3 id="四、编辑器"><a href="#四、编辑器" class="headerlink" title="四、编辑器"></a>四、编辑器</h3><p>markcook - 好看的markdown编辑器</p><p>eme - 优雅的Markdown编辑器</p><p>vue-syntax-highlight - Sublime Text语法高亮</p><p>vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器</p><p>Vueditor - 所见即所得的编辑器</p><p>vue-html5-editor - html5所见即所得编辑器</p><p>vue2-editor - HTML编辑器</p><p>vue-simplemde - VueJS的Markdown编辑器组件</p><p>vue-quill - vue组件构建quill编辑器</p><h3 id="五、图表"><a href="#五、图表" class="headerlink" title="五、图表"></a>五、图表</h3><p>vue-table - 简化数据表格</p><p>vue-chartjs - vue中的Chartjs的封装</p><p>vue-charts - 轻松渲染一个图表</p><p>vue-chart - 强大的高速的vue图表解析</p><p>vue-highcharts - HighCharts组件</p><p>chartjs - Vue Bulma的chartjs组件</p><p>vue-chartkick - VueJS一行代码实现优美图表</p><h3 id="六、日历"><a href="#六、日历" class="headerlink" title="六、日历"></a>六、日历</h3><p>vue-calendar - 日期选择插件</p><p>vue-datepicker - 日历和日期选择组件</p><p>vue-datetime-picker - 日期时间选择控件</p><p>vue2-calendar - 支持lunar和日期事件的日期选择器</p><p>vue-fullcalendar - 基于vue.js的全日历组件</p><p>vue-datepicker - 漂亮的Vue日期选择器组件</p><p>datepicker - 基于flatpickr的时间选择组件</p><p>vue2-timepicker - 下拉时间选择器</p><p>vue-date-picker - VueJS日期选择器组件</p><p>vue-datepicker-simple - 基于vue的日期选择器</p><h3 id="七、地址选择"><a href="#七、地址选择" class="headerlink" title="七、地址选择"></a>七、地址选择</h3><p>vue-city - 城市选择器</p><p>vue-region-picker - 选择中国的省份市和地区</p><h3 id="八、地图"><a href="#八、地图" class="headerlink" title="八、地图"></a>八、地图</h3><p>vue-amap - 基于Vue 2和高德地图的地图组件</p><p>vue-google-maps - 带有双向数据绑定Google地图组件</p><p>vue-baidu-map- 基于 Vue 2的百度地图组件库</p><p>vue-cmap - Vue China map可视化组件</p><h3 id="九、播放器"><a href="#九、播放器" class="headerlink" title="九、播放器"></a>九、播放器</h3><p>vue-video-player - VueJS视频及直播播放器</p><p>vue-video - Vue.js的HTML5视频播放器</p><p>vue-music-master - vue手机端网页音乐播放器</p><h3 id="十、文件上传"><a href="#十、文件上传" class="headerlink" title="十、文件上传"></a>十、文件上传</h3><p>vue-upload-component - Vuejs文件上传组件</p><p>vue-core-image-upload - 轻量级的vue上传插件</p><p>vue-dropzone - 用于文件上传的Vue组件</p><h3 id="十一、图片处理"><a href="#十一、图片处理" class="headerlink" title="十一、图片处理"></a>十一、图片处理</h3><p>vue-lazyload-img - 移动优化的vue图片懒加载插件</p><p>vue-image-crop-upload - vue图片剪裁上传组件</p><p>vue-svgicon - 创建svg图标组件的工具</p><p>vue-img-loader - 图片加载UI组件</p><p>vue-image-clip- 基于vue的图像剪辑组件</p><p>vue-progressive-image - Vue的渐进图像加载插件</p><h3 id="十二、提示"><a href="#十二、提示" class="headerlink" title="十二、提示"></a>十二、提示</h3><p>vue-toast-mobile - VueJS的toast插件</p><p>vue-msgbox - vuejs的消息框</p><p>vue-tooltip - 带绑定信息提示的提示工具</p><p>vue-verify-pop - 带气泡提示的vue校验插件</p><h3 id="十三、进度条"><a href="#十三、进度条" class="headerlink" title="十三、进度条"></a>十三、进度条</h3><p>vue-radial-progress - Vue.js放射性进度条组件</p><p>vue-progressbar - vue轻量级进度条</p><p>vue2-loading-bar - 最简单的仿Youtube加载条视图</p><h3 id="十四、开发框架汇总"><a href="#十四、开发框架汇总" class="headerlink" title="十四、开发框架汇总"></a>十四、开发框架汇总</h3><p>vue-admin - Vue管理面板框架</p><p>electron-vue - Electron及VueJS快速启动样板</p><p>vue-2.0-boilerplate - Vue2单页应用样板</p><p>vue-webgulp - 仿VueJS Vue loader示例</p><p>vue-bulma - 轻量级高性能MVVM Admin UI框架</p><p>vue-spa-template - 前后端分离后的单页应用开发</p><p>Framework7-Vue - VueJS与Framework7结合</p><p>vue-element-starter - vue启动页</p><h3 id="十五、实用库汇总"><a href="#十五、实用库汇总" class="headerlink" title="十五、实用库汇总"></a>十五、实用库汇总</h3><p>vuelidate - 简单轻量级的基于模块的Vue.js验证</p><p>qingcheng - qingcheng主题</p><p>vuex - 专为 Vue.js 应用程序开发的状态管理模式</p><p>vue-axios - 将axios整合到VueJS的封装</p><p>vue-desktop - 创建管理面板网站的UI库</p><p>vue-meta - 管理app的meta信息</p><p>avoriaz - VueJS测试实用工具库</p><p>vue-framework7 - 结合VueJS使用的Framework7组件</p><p>vue-lazy-render - 用于Vue组件的延迟渲染</p><p>vue-svg-icon - vue2的可变彩色svg图标方案</p><p>vue-online - reactive的在线和离线组件</p><p>vue-password-strength-meter - 交互式密码强度计</p><p>vuep - 用实时编辑和预览来渲染Vue组件</p><p>vue-bootstrap-modal - vue的Bootstrap样式组件</p><p>element-admin - 支持 vuecli 的 Element UI 的后台模板</p><p>vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件</p><p>cleave - 基于cleave.js的Cleave组件</p><p>vue-events - 简化事件的VueJS插件</p><p>http-vue-loader - 从html及js环境加载vue文件</p><p>vue-electron - 将选择的API封装到Vue对象中的插件</p><p>vue-router-transition - 页面过渡插件</p><p>vuemit - 处理VueJS事件</p><p>vue-cordova - Cordova的VueJS插件</p><p>vue-qart - 用于qartjs的Vue2指令</p><p>vue-websocket - VueJS的Websocket插件</p><p>vue-gesture - VueJS的手势事件插件</p><p>vue-local-storage - 具有类型支持的Vuejs本地储存插件</p><p>lazy-vue - 懒加载图片</p><p>vue-lazyloadImg - 图片懒加载插件</p><p>vue-bus - VueJS的事件总线</p><p>vue-observe-visibility - 当元素在页面上可见或隐藏时检测</p><p>vue-notifications - 非阻塞通知库</p><p>v-media-query - vue中添加用于配合媒体查询的方法</p><p>vuex-shared-mutations - 分享某种Vuex mutations</p><p>vue-lazy-component - 懒加载组件或者元素的Vue指令</p><p>vue-reactive-storage - vue插件的Reactive层</p><p>vue-ts-loader - 在Vue装载机检查脚本</p><p>vue-pagination-2 - 简单通用的分页组件</p><p>vuex-i18n - 定位插件</p><p>Vue.resize - 检测HTML调整大小事件的vue指令</p><p>vue-zoombox - 一个高级zoombox</p><p>leo-vue-validator - 异步的表单验证组件</p><p>modal - Vue Bulma的modal组件</p><p>Famous-Vue - Famous库的vue组件</p><p>vue-input-autosize - 基于内容自动调整文本输入的大小</p><p>vue-file-base64 - 将文件转换为Base64的vue组件</p><p>Vue-Easy-Validator - 简单的表单验证</p><p>vue-truncate-filter - 截断字符串的VueJS过滤器</p><h3 id="十六、服务端"><a href="#十六、服务端" class="headerlink" title="十六、服务端"></a>十六、服务端</h3><p>vue-ssr - 结合Express使用Vue2服务端渲染</p><p>nuxt.js - 用于服务器渲染Vue app的最小化框架</p><p>vue-ssr - 非常简单的VueJS服务器端渲染模板</p><p>vue-easy-renderer - Nodejs服务端渲染</p><p>express-vue - 简单的使用服务器端渲染vue.js</p><h3 id="十七、辅助工具"><a href="#十七、辅助工具" class="headerlink" title="十七、辅助工具"></a>十七、辅助工具</h3><p>DejaVue - Vuejs可视化及压力测试</p><p>vue-generate-component - 轻松生成Vue js组件的CLI工具</p><p>vscode-VueHelper - 目前vscode最好的vue代码提示插件</p><p>vue-play - 展示Vue组件的最小化框架</p><p>VuejsStarterKit - vuejs starter套件</p><p>vue-multipage-cli - 简单的多页CLI</p><h3 id="十八、应用实例"><a href="#十八、应用实例" class="headerlink" title="十八、应用实例"></a>十八、应用实例</h3><p>pagekit - 轻量级的CMS建站系统</p><p>vuedo - 博客平台</p><p>koel - 基于网络的个人音频流媒体服务</p><p>CMS-of-Blog - 博客内容管理器</p><p>vue-cnode - 重写vue版cnode社区</p><p>vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客</p><p>swoole-vue-webim - Web版的聊天应用</p><p>fewords - 功能极其简单的笔记本</p><p>jackblog-vue - 个人博客系统</p><p>vue-blog - 使用Vue2.0 和Vuex的vue-blog</p><p>vue-dashing-js - nuvo-dashing-js的fork</p><p>rss-reader - 简单的rss阅读器</p><h3 id="十九、Demo示例"><a href="#十九、Demo示例" class="headerlink" title="十九、Demo示例"></a>十九、Demo示例</h3><p>eleme - 高仿饿了么app商家详情</p><p>NeteaseCloudWebApp - 高仿网易云音乐的webapp</p><p>vue-zhihu-daily - 知乎日报 with Vuejs</p><p>Vue-cnodejs - 基于vue重写Cnodejs.org的webapp</p><p>vue2-demo - 从零构建vue2 + vue-router + vuex 开发环境</p><p>vue-wechat - vue.js开发微信app界面</p><p>vue-music - Vue 音乐搜索播放</p><p>maizuo - vue&#x2F;vuex&#x2F;redux仿卖座网</p><p>vue-demo - vue简易留言板</p><p>spa-starter-kit - 单页应用启动套件</p><p>zhihudaily-vue - 知乎日报web版</p><p>douban - 模仿豆瓣前端</p><p>vue-Meizi - vue最新实战项目</p><p>vue-demo-kugou - vuejs仿写酷狗音乐webapp</p><p>vue2.0-taopiaopiao - vue2.0与express构建淘票票页面</p><p>node-vue-server-webpack - Node.js+Vue.js+webpack快速开发框架</p><p>VueDemo_Sell_Eleme - Vue2高仿饿了么外卖平台</p><p>vue-leancloud-blog - 一个前后端完全分离的单页应用</p><p>vue-fis3 - 流行开源工具集成demo</p><p>mi-by-vue - VueJS仿小米官网</p><p>vue-demo-maizuo - 使用Vue2全家桶仿制卖座电影</p><p>vue2.x-douban - Vue2实现简易豆瓣电影webApp</p><p>vue-adminLte-vue-router - vue和adminLte整合应用</p><p>vue-zhihudaily - 知乎日报 Web 版本</p><p>Zhihu-Daily-Vue.js - Vuejs单页网页应用</p><p>vue-axios-github - 登录拦截登出功能</p><p>vue2.x-Cnode - 基于vue全家桶的Cnode社区</p><p>hello-vue-django - 使用带有Django的vuejs的样板项目</p><p>websocket_chat - 基于vue和websocket的多人在线聊天室</p><p>x-blog - 开源的个人blog项目</p><p>vue-cnode - vue单页应用demo</p><p>vue-express-mongodb - 简单的前后端分离案例</p><p>photoShare - 基于图片分享的社交平台</p><p>notepad - 本地存储的记事本</p><p>vue-zhihudaily-2.0 - 使用Vue2.0+vue-router+vuex创建的zhihudaily</p><p>vueBlog - 前后端分离博客</p><p>Zhihu_Daily - 基于Vue和Nodejs的Web单页应用</p><p>vue-ruby-china - VueJS框架搭建的rubychina平台</p><p>vue-koa-demo - 使用Vue2和Koa1的全栈demo</p><p>life-app-vue - 使用vue2完成多功能集合到小webapp</p><p>vue-trip - vue2做的出行webapp</p><p>github-explorer - 寻找最有趣的GitHub库</p><p>vue-ssr-boilerplate - 精简版的ofvue-hackernews-2</p><p>vue-bushishiren - 不是诗人应用</p><p>houtai - 基于vue和Element的后台管理系统</p><p>ios7-vue - 使用vue2.0 vue-router vuex模拟ios7</p><p>Framework7-VueJS - 使用移动框架的示例</p><p>cnode-vue - 基于vue和vue-router构建的cnodejs web网站SPA</p><p>vue-cli-multipage-bootstrap - 将vue官方在线示例整合到组件中</p><p>vue-cnode - 用 Vue 做的 CNode 官网</p><p>seeMusic - 跨平台云音乐播放器</p><p>HyaReader - 移动友好的阅读器</p><p>zhihu-daily - 轻松查看知乎日报内容</p><p>vue-cnode - 使用cNode社区提供的接口</p><p>zhihu-daily-vue - 知乎日报</p><p>vue-dropload - 用以测试下拉加载与简单路由</p><p>vue-cnode-mobile - 搭建cnode社区</p><p>Vuejs-SalePlatform - vuejs搭建的售卖平台demo</p><p>vue-memo - 用 vue写的记事本应用</p><p>sls-vuex2-demo - vuex2商城购物车demo</p><p>v-notes - 简单美观的记事本</p><p>vue-starter - VueJs项目的简单启动页</p><h3 id="二十、其他实用插件汇总"><a href="#二十、其他实用插件汇总" class="headerlink" title="二十、其他实用插件汇总"></a>二十、其他实用插件汇总</h3><p>vue-dragging- 使元素可以拖拽</p><p>Vue.Draggable- 实现拖放和视图模型数组同步</p><p>vue-picture-input- 移动友好的图片文件输入组件</p><p>rubik- 基于Vuejs2的开源 UI 组件库</p><p>VueStar- 带星星动画的vue点赞按钮</p><p>vue-tables-2- 显示数据的bootstrap样式网格</p><p>DataVisualization- 数据可视化</p><p>vue-drag-and-drop-list- 创建排序列表的Vue指令</p><p>vuwe- 基于微信WeUI所开发的专用于Vue2的组件库</p><p>vue-typer- 模拟用户输入选择和删除文本的Vue组件</p><p>vue-impression- 移动Vuejs2 UI元素</p><p>vue-datatable- 使用Vuejs创建的DataTableView</p><p>vue-instant- 轻松创建自动提示的自定义搜索控件</p><p>vue-slider-component- 在vue1和vue2中使用滑块</p><p>vue-touch-ripple- vuejs的触摸ripple组件</p><p>coffeebreak- 实时编辑CSS组件工具</p><p>vue-datasource- 创建VueJS动态表格</p><p>handsontable- 网页表格组件</p><p>vue-bootstrap-table- 可排序可检索的表格</p><p>vue-google-signin-button- 导入谷歌登录按钮</p><p>vue-float-label- VueJS浮动标签模式</p><p>vue-tagsinput- 基于VueJS的标签组件</p><p>vue-social-sharing- 社交分享组件</p><p>vue-popup-mixin- 用于管理弹出框的遮盖层</p><p>cubeex- 包含一套完整的移动UI</p><p>vue-fullcalendar- vue FullCalendar封装</p><p>vue-material-design- Vue MD风格组件</p><p>vue-morris- Vuejs组件封装Morrisjs库</p><p>we-vue- Vue2及weui1开发的组件</p><p>vue-form-2- 全面的HTML表单管理的解决方案</p><p>vue-side-nav- 响应式的侧边导航</p><p>mint-indicator- VueJS移动加载指示器插件</p><p>vue-ripple- 制作谷歌MD风格涟漪效果的Vue组件</p><p>vue-touch-keyboard- VueJS虚拟键盘组件</p><p>vue-parallax- 整洁的视觉效果</p><p>vue-typewriter- vue组件类型</p><p>vue-ios-alertview- iOS7+ 风格的alertview服务</p><p>paco-ui-vue- PACOUI的vue组件</p><p>vue-button- Vue按钮组件</p><h2 id="UI组件（原文链接：https-www-cnblogs-com-calamus-p-8242446-html）"><a href="#UI组件（原文链接：https-www-cnblogs-com-calamus-p-8242446-html）" class="headerlink" title="UI组件（原文链接：https://www.cnblogs.com/calamus/p/8242446.html）"></a>UI组件（原文链接：<a href="https://www.cnblogs.com/calamus/p/8242446.html%EF%BC%89">https://www.cnblogs.com/calamus/p/8242446.html）</a></h2><p>element - 饿了么出品的Vue2的web UI工具套件<br>Vux - 基于Vue和WeUI的组件库<br>mint-ui - Vue 2的移动UI元素<br>iview - 基于 Vuejs 的开源 UI 组件库<br>Keen-UI - 轻量级的基本UI组件合集<br>vue-material - 通过Vue Material和Vue 2建立精美的app应用<br>muse-ui - 三端样式一致的响应式 UI 库<br>vuetify - 为移动而生的Vue JS 2组件框架<br>vonic - 快速构建移动端单页应用<br>eme - 优雅的Markdown编辑器<br>vue-multiselect - Vue.js选择框解决方案<br>vue-table - 简化数据表格<br>VueCircleMenu - 漂亮的vue圆环菜单<br>vue-chat - vuejs和vuex及webpack的聊天示例<br>radon-ui - 快速开发产品的Vue组件库<br>vue-waterfall - Vue.js的瀑布布局组件<br>vue-carbon - 基于 vue 开发MD风格的移动端<br>vue-beauty - 由vue和ant design创建的优美UI组件<br>vue-blu - 帮助你轻松创建web应用<br>vueAdmin - 基于vuejs2和element的简单的管理员模板<br>vue-syntax-highlight - Sublime Text语法高亮<br>vue-infinite-scroll - VueJS的无限滚动指令<br>Vue.Draggable - 实现拖放和视图模型数组同步<br>vue-awesome-swiper - vue.js触摸滑动组件<br>vue-calendar - 日期选择插件<br>bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件<br>vue-swipe - VueJS触摸滑块<br>vue-amap - 基于Vue 2和高德地图的地图组件<br>vue-chartjs - vue中的Chartjs的封装<br>vue-datepicker - 日历和日期选择组件<br>markcook - 好看的markdown编辑器<br>vue-google-maps - 带有双向数据绑定Google地图组件<br>vue-progressbar - vue轻量级进度条<br>vue-picture-input - 移动友好的图片文件输入组件<br>vue-infinite-loading - VueJS的无限滚动插件<br>vue-upload-component - Vuejs文件上传组件<br>vue-datetime-picker - 日期时间选择控件<br>vue-scroller - Vonic UI的功能性组件<br>vue2-calendar - 支持lunar和日期事件的日期选择器<br>vue-video-player - VueJS视频及直播播放器<br>vue-fullcalendar - 基于vue.js的全日历组件<br>rubik - 基于Vuejs2的开源 UI 组件库<br>VueStar - 带星星动画的vue点赞按钮<br>vue-mugen-scroll - 无限滚动组件<br>mint-loadmore - VueJS的双向下拉刷新组件<br>vue-tables-2 - 显示数据的bootstrap样式网格<br>vue-virtual-scroller - 带任意数目数据的顺畅的滚动<br>DataVisualization - 数据可视化<br>vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器<br>Vueditor - 所见即所得的编辑器<br>vue-html5-editor - html5所见即所得编辑器<br>vue-msgbox - vuejs的消息框<br>vue-slider - vue 滑动组件<br>vue-core-image-upload - 轻量级的vue上传插件<br>vue-slide - vue轻量级滑动组件<br>vue-lazyload-img - 移动优化的vue图片懒加载插件<br>vue-drag-and-drop-list - 创建排序列表的Vue指令<br>vue-progressive-image - Vue的渐进图像加载插件<br>vuwe - 基于微信WeUI所开发的专用于Vue2的组件库<br>vue-dropzone - 用于文件上传的Vue组件<br>vue-charts - 轻松渲染一个图表<br>vue-swiper - 易于使用的滑块组件<br>vue-images - 显示一组图片的lightbox组件<br>vue-carousel-3d - VueJS的3D轮播组件<br>vue-region-picker - 选择中国的省份市和地区<br>vue-typer - 模拟用户输入选择和删除文本的Vue组件<br>vue-impression - 移动Vuejs2 UI元素<br>vue-datatable - 使用Vuejs创建的DataTableView<br>vue-instant - 轻松创建自动提示的自定义搜索控件<br>vue-dragging - 使元素可以拖拽<br>vue-slider-component - 在vue1和vue2中使用滑块<br>vue2-loading-bar - 最简单的仿Youtube加载条视图<br>vue-datepicker - 漂亮的Vue日期选择器组件<br>vue-video - Vue.js的HTML5视频播放器<br>vue-toast-mobile - VueJS的toast插件<br>vue-image-crop-upload - vue图片剪裁上传组件<br>vue-tooltip - 带绑定信息提示的提示工具<br>vue-highcharts - HighCharts组件<br>vue-touch-ripple - vuejs的触摸ripple组件<br>coffeebreak - 实时编辑CSS组件工具<br>vue-datasource - 创建VueJS动态表格<br>vue2-timepicker - 下拉时间选择器<br>vue-date-picker - VueJS日期选择器组件<br>vue-scrollbar - 最简单的滚动区域组件<br>vue-quill - vue组件构建quill编辑器<br>vue-google-signin-button - 导入谷歌登录按钮<br>vue-svgicon - 创建svg图标组件的工具<br>vue-float-label - VueJS浮动标签模式<br>vue-baidu-map - 基于 Vue 2的百度地图组件库<br>vue-social-sharing - 社交分享组件<br>vue2-editor - HTML编辑器<br>vue-tagsinput - 基于VueJS的标签组件<br>vue-easy-slider - Vue 2.x的滑块组件<br>datepicker - 基于flatpickr的时间选择组件<br>vue-chart - 强大的高速的vue图表解析<br>vue-music-master - vue手机端网页音乐播放器<br>handsontable - 网页表格组件<br>vue-simplemde - VueJS的Markdown编辑器组件<br>vue-popup-mixin - 用于管理弹出框的遮盖层<br>cubeex - 包含一套完整的移动UI<br>vue-fullcalendar - vue FullCalendar封装<br>vue-material-design - Vue MD风格组件<br>vue-morris - Vuejs组件封装Morrisjs库<br>we-vue - Vue2及weui1开发的组件<br>vue-image-clip - 基于vue的图像剪辑组件<br>vue-bootstrap-table - 可排序可检索的表格<br>vue-radial-progress - Vue.js放射性进度条组件<br>vue-slick - 实现流畅轮播框的vue组件<br>vue-pull-to-refresh - Vue2的上拉下拉<br>vue-form-2 - 全面的HTML表单管理的解决方案<br>vue-side-nav - 响应式的侧边导航<br>mint-indicator - VueJS移动加载指示器插件<br>chartjs - Vue Bulma的chartjs组件<br>vue-scroll - vue滚动<br>vue-ripple - 制作谷歌MD风格涟漪效果的Vue组件<br>vue-touch-keyboard - VueJS虚拟键盘组件<br>vue-chartkick - VueJS一行代码实现优美图表<br>vue-ztree - 用 vue 写的树层级组件<br>vue-m-carousel - vue 移动端轮播组件<br>vue-datepicker-simple - 基于vue的日期选择器<br>vue-tabs - 多tab页轻型框架<br>vue-verify-pop - 带气泡提示的vue校验插件<br>vue-parallax - 整洁的视觉效果<br>vue-img-loader - 图片加载UI组件<br>vue-typewriter - vue组件类型<br>vue-smoothscroll - smoothscroll的VueJS版本<br>vue-city - 城市选择器<br>vue-tree - vue树视图组件<br>vue-ios-alertview - iOS7+ 风格的alertview服务<br>dd-vue-component - 订单来了的公共组件库<br>paco-ui-vue - PACOUI的vue组件<br>vue-cmap - Vue China map可视化组件<br>vue-button - Vue按钮组件<br>开发框架<br>vue.js - 流行的轻量高效的前端组件化方案<br>vue-admin - Vue管理面板框架<br>electron-vue - Electron及VueJS快速启动样板<br>vue-2.0-boilerplate - Vue2单页应用样板<br>vue-spa-template - 前后端分离后的单页应用开发<br>Framework7-Vue - VueJS与Framework7结合<br>vue-bulma - 轻量级高性能MVVM Admin UI框架<br>vue-webgulp - 仿VueJS Vue loader示例<br>vue-element-starter - vue启动页<br>实用库<br>vuex - 专为 Vue.js 应用程序开发的状态管理模式<br>vuelidate - 简单轻量级的基于模块的Vue.js验证<br>qingcheng - qingcheng主题<br>vue-desktop - 创建管理面板网站的UI库<br>vue-meta - 管理app的meta信息<br>vue-axios - 将axios整合到VueJS的封装<br>vue-svg-icon - vue2的可变彩色svg图标方案<br>avoriaz - VueJS测试实用工具库<br>vue-framework7 - 结合VueJS使用的Framework7组件<br>vue-bootstrap-modal - vue的Bootstrap样式组件<br>vuep - 用实时编辑和预览来渲染Vue组件<br>vue-online - reactive的在线和离线组件<br>vue-lazy-render - 用于Vue组件的延迟渲染<br>vue-password-strength-meter - 交互式密码强度计<br>element-admin - 支持 vuecli 的 Element UI 的后台模板<br>vue-electron - 将选择的API封装到Vue对象中的插件<br>cleave - 基于cleave.js的Cleave组件<br>vue-events - 简化事件的VueJS插件<br>vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件<br>vue-cordova - Cordova的VueJS插件<br>vue-router-transition - 页面过渡插件<br>vue-gesture - VueJS的手势事件插件<br>http-vue-loader - 从html及js环境加载vue文件<br>vue-qart - 用于qartjs的Vue2指令<br>vuemit - 处理VueJS事件<br>vue-websocket - VueJS的Websocket插件<br>vue-local-storage - 具有类型支持的Vuejs本地储存插件<br>lazy-vue - 懒加载图片<br>vue-bus - VueJS的事件总线<br>vue-reactive-storage - vue插件的Reactive层<br>vue-notifications - 非阻塞通知库<br>vue-lazy-component - 懒加载组件或者元素的Vue指令<br>v-media-query - vue中添加用于配合媒体查询的方法<br>vue-observe-visibility - 当元素在页面上可见或隐藏时检测<br>vue-ts-loader - 在Vue装载机检查脚本<br>vue-pagination-2 - 简单通用的分页组件<br>vuex-i18n - 定位插件<br>Vue.resize - 检测HTML调整大小事件的vue指令<br>vuex-shared-mutations - 分享某种Vuex mutations<br>vue-file-base64 - 将文件转换为Base64的vue组件<br>modal - Vue Bulma的modal组件<br>Famous-Vue - Famous库的vue组件<br>leo-vue-validator - 异步的表单验证组件<br>Vue-Easy-Validator - 简单的表单验证<br>vue-truncate-filter - 截断字符串的VueJS过滤器<br>vue-zoombox - 一个高级zoombox<br>vue-input-autosize - 基于内容自动调整文本输入的大小<br>vue-lazyloadImg - 图片懒加载插件<br>服务端<br>nuxt.js - 用于服务器渲染Vue app的最小化框架<br>express-vue - 简单的使用服务器端渲染vue.js<br>vue-ssr - 非常简单的VueJS服务器端渲染模板<br>vue-ssr - 结合Express使用Vue2服务端渲染<br>vue-easy-renderer - Nodejs服务端渲染<br>辅助工具<br>DejaVue - Vuejs可视化及压力测试<br>vue-play - 展示Vue组件的最小化框架<br>vscode-VueHelper - 目前vscode最好的vue代码提示插件<br>vue-generate-component - 轻松生成Vue js组件的CLI工具<br>vue-multipage-cli - 简单的多页CLI<br>VuejsStarterKit - vuejs starter套件<br>应用实例<br>koel - 基于网络的个人音频流媒体服务<br>pagekit - 轻量级的CMS建站系统<br>vuedo - 博客平台<br>jackblog-vue - 个人博客系统<br>vue-cnode - 重写vue版cnode社区<br>CMS-of-Blog - 博客内容管理器<br>rss-reader - 简单的rss阅读器<br>vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客<br>swoole-vue-webim - Web版的聊天应用<br>vue-dashing-js - nuvo-dashing-js的fork<br>fewords - 功能极其简单的笔记本<br>vue-blog - 使用Vue2.0 和Vuex的vue-blog<br>Demo示例<br>Vue-cnodejs - 基于vue重写Cnodejs.org的webapp<br>NeteaseCloudWebApp - 高仿网易云音乐的webapp<br>vue-zhihu-daily - 知乎日报 with Vuejs<br>vue-wechat - vue.js开发微信app界面<br>vue2-demo - 从零构建vue2 + vue-router + vuex 开发环境<br>eleme - 高仿饿了么app商家详情<br>vue-demo - vue简易留言板<br>maizuo - vue&#x2F;vuex&#x2F;redux仿卖座网<br>spa-starter-kit - 单页应用启动套件<br>vue-music - Vue 音乐搜索播放<br>douban - 模仿豆瓣前端<br>vue-Meizi - vue最新实战项目<br>zhihudaily-vue - 知乎日报web版<br>vue-demo-kugou - vuejs仿写酷狗音乐webapp<br>VueDemo_Sell_Eleme - Vue2高仿饿了么外卖平台<br>vue2.0-taopiaopiao - vue2.0与express构建淘票票页面<br>vue-leancloud-blog - 一个前后端完全分离的单页应用<br>node-vue-server-webpack - Node.js+Vue.js+webpack快速开发框架<br>mi-by-vue - VueJS仿小米官网<br>vue-fis3 - 流行开源工具集成demo<br>vue2.x-douban - Vue2实现简易豆瓣电影webApp<br>vue-demo-maizuo - 使用Vue2全家桶仿制卖座电影<br>vue-zhihudaily - 知乎日报 Web 版本<br>vue-adminLte-vue-router - vue和adminLte整合应用<br>vue-axios-github - 登录拦截登出功能<br>Zhihu-Daily-Vue.js - Vuejs单页网页应用<br>hello-vue-django - 使用带有Django的vuejs的样板项目<br>vue-cnode - vue单页应用demo<br>x-blog - 开源的个人blog项目<br>vue-express-mongodb - 简单的前后端分离案例<br>websocket_chat - 基于vue和websocket的多人在线聊天室<br>photoShare - 基于图片分享的社交平台<br>vue-zhihudaily-2.0 - 使用Vue2.0+vue-router+vuex创建的zhihudaily<br>notepad - 本地存储的记事本<br>vueBlog - 前后端分离博客<br>vue-ruby-china - VueJS框架搭建的rubychina平台<br>Zhihu_Daily - 基于Vue和Nodejs的Web单页应用<br>vue-koa-demo - 使用Vue2和Koa1的全栈demo<br>vue2.x-Cnode - 基于vue全家桶的Cnode社区<br>life-app-vue - 使用vue2完成多功能集合到小webapp<br>github-explorer - 寻找最有趣的GitHub库<br>vue-trip - vue2做的出行webapp<br>vue-ssr-boilerplate - 精简版的ofvue-hackernews-2<br>vue-bushishiren - 不是诗人应用<br>houtai - 基于vue和Element的后台管理系统<br>ios7-vue - 使用vue2.0 vue-router vuex模拟ios7<br>Framework7-VueJS - 使用移动框架的示例<br>cnode-vue - 基于vue和vue-router构建的cnodejs web网站SPA<br>vue-cli-multipage-bootstrap - 将vue官方在线示例整合到组件中<br>vue-cnode - 用 Vue 做的 CNode 官网<br>HyaReader - 移动友好的阅读器<br>zhihu-daily - 轻松查看知乎日报内容<br>seeMusic - 跨平台云音乐播放器<br>vue-cnode - 使用cNode社区提供的接口<br>zhihu-daily-vue - 知乎日报<br>sls-vuex2-demo - vuex2商城购物车demo<br>vue-dropload - 用以测试下拉加载与简单路由<br>vue-cnode-mobile - 搭建cnode社区<br>Vuejs-SalePlatform - vuejs搭建的售卖平台demo<br>v-notes - 简单美观的记事本<br>vue-starter - VueJs项目的简单启动页<br>vue-memo - 用 vue写的记事本应用</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2和Vue3的区别</title>
      <link href="/2022/10/08/vue26/"/>
      <url>/2022/10/08/vue26/</url>
      
        <content type="html"><![CDATA[<h3 id="一、vue2和vue3双向数据绑定原理的区别？"><a href="#一、vue2和vue3双向数据绑定原理的区别？" class="headerlink" title="一、vue2和vue3双向数据绑定原理的区别？"></a>一、vue2和vue3双向数据绑定原理的区别？</h3><p>vue2 的双向数据绑定是利用ES5 的一个 API Object.definePropert()对数据进行劫持 结合 发布订阅模式的方式来实现的<br>vue3发生了改变，使用proxy替换Object.defineProerty,使用Proxy的优势：<br>可直接监听数组类型的数据变化<br>性能的提升<br>监听的目标为对象本身，不需要像Object.defineProperty一样遍历每个属性，有一定的性能提升<br>可直接实现对象属性的新增&#x2F;删除</p><h3 id="二、根节点的不同"><a href="#二、根节点的不同" class="headerlink" title="二、根节点的不同"></a>二、根节点的不同</h3><p>vue2只接受一个跟几点，而vue3在组件中支持多个根节点.</p><span id="more"></span><blockquote><p>vue2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="三、Composition-API-组合api"><a href="#三、Composition-API-组合api" class="headerlink" title="三、Composition API (组合api)"></a>三、Composition API (组合api)</h3><p>vue2和vue3最大的区别就是:</p><p>vue2中是使用的Options API，这种写法不方便我们的阅读和交流，逻辑过于分散。</p><p>vue3中是使用的Composition API (组合api)</p><blockquote><p>vue2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">// 数据</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span></span>() &#123;&#125;,</span><br><span class="line">    // 方法</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><p>这样代码会更加简介和整洁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">        // 数据 和 方法都在setup里面使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="四、生命周期的变化"><a href="#四、生命周期的变化" class="headerlink" title="四、生命周期的变化"></a>四、生命周期的变化</h3><blockquote><p>vu2————————–&gt;vue3</p><p>beforeCreate  -&gt; setup()开始创建组件之前，创建的是data和method<br>created       -&gt; setup()<br>beforeMount   -&gt; onBeforeMount组件挂载到节点上之前执行的函数。<br>mounted       -&gt; onMounted组件挂载完成后执行的函数<br>beforeUpdate  -&gt; onBeforeUpdate组件更新之前执行的函数。<br>updated       -&gt; onUpdated组件更新完成之后执行的函数。<br>beforeDestroy -&gt; onBeforeUnmount组件挂载到节点上之前执行的函数。<br>destroyed     -&gt; onUnmounted组件卸载之前执行的函数。dszhuoyi<br>activated     -&gt; onActivated组件卸载完成后执行的函数<br>deactivated   -&gt; onDeactivated</p></blockquote><p>注意:如果想要在vue中获取dom节点在created中用this.$nexttick</p><h3 id="五、-vue2和vue3的diff算法"><a href="#五、-vue2和vue3的diff算法" class="headerlink" title="五、 vue2和vue3的diff算法"></a>五、 vue2和vue3的diff算法</h3><blockquote><p>vue2</p></blockquote><p>vue2 diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。<br>vue2 diff算法会比较每一个vnode,而对于一些不参与更新的元素，进行比较是有点消耗性能的。</p><blockquote><p>vue3</p></blockquote><p>vue3 diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags就是优化的标识。<br>只会比较patchFlags发生变化的vnode,进行更新视图，对于没有变化的元素做静态标记，在渲染的时候直接复用</p><h3 id="六、-v-if-和-v-for的优先级"><a href="#六、-v-if-和-v-for的优先级" class="headerlink" title="六、 v-if 和 v-for的优先级"></a>六、 v-if 和 v-for的优先级</h3><blockquote><p>vue2</p></blockquote><p>我们最好不要把v-if和v-for同时用在一个元素上，这样会带来性能的浪费(每次都要先渲染才会进行条件判断)</p><p>v-for 优先于 v-if 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=<span class="string">&quot;index == 1&quot;</span> v-for=<span class="string">&quot;(item,index) in arr&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><p>v-if 优先于 v-for 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=<span class="string">&quot;index == 1&quot;</span> v-for=<span class="string">&quot;(item,index) in arr&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue中会给我们报警告：<br>意思就是：属性“index”在渲染期间被访问，但未在实例上定义(v-if先进行判断，但是这时候v-for还没有渲染，所以index是找不到的)</p><a href="https://blog.csdn.net/m0_64969829/article/details/123047804" title="" target="">文章来源</a>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vite创建Vue3项目</title>
      <link href="/2022/10/08/vue25/"/>
      <url>/2022/10/08/vue25/</url>
      
        <content type="html"><![CDATA[<p>通过Vite创建的Vue3项目是可以跟Vue2项目共存的，即不影响我们旧的Vue2的项目。</p><p>前提条件：已安装 15.0 或更高版本的 Node.js</p><p>1）在需要创建项目的文件夹下打开终端，并执行指令：</p><blockquote><p>npm init vite@latest</p></blockquote><span id="more"></span><p>这里使用npm，不需使用cnpm，否则会默认创建一个名为init的Vue3项目<br>如果是第一次执行此指令，窗口会提示让你安装 vue-vite？？,选择y，进行安装即可；</p><p>2）接下来直接输入项目名称后回车：my-vue3-application（这里输入你的项目名称）</p><p>3）使用键盘上的上下箭头选择框架：vue   然后回车 </p><p>4）接下来选择vue的版本，我们选择：vue-ts （Vue2基于JS,Vue3基于TS）后回车</p><p>5）进入我们创建好的项目文件夹（my-vue3-application），安装依赖，启动运行Vue3项目</p><blockquote><p>cd my-vue3-application<br>npm install<br>npm run dev</p></blockquote><p>最后启动起来的地址默认是: <a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 2.x项目完整搭建步骤</title>
      <link href="/2022/10/08/vue24/"/>
      <url>/2022/10/08/vue24/</url>
      
        <content type="html"><![CDATA[<p>1）安装Node（转淘宝镜像）和2.x版本的vue-cli</p><blockquote><p>安装node后可通过指令：node –version</p><p>查看版本号</p><p>安装vue-cli后可通过指令：vue –version 或 vue -V</p><p>查看版本号</p></blockquote><span id="more"></span><p>2）使用vue-cli脚手架初始化vue项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my_vue_project</span><br></pre></td></tr></table></figure><blockquote><p>my_vue_project为项目名</p></blockquote><p>执行以上命令后，项目包已经生成node_module 、package.json配置文件等</p><p>3）安装项目依赖（进入刚刚创建的项目文件夹）</p><blockquote><p>cd  my_vue_project</p><p>cnpm install</p></blockquote><p>4）启动项目</p><blockquote><p>cnpm run dev<br>或<br>cnpm start</p></blockquote><p>这样vue网站就启动起来了，默认是本地8080端口，当然可以配置文件：config</p><p>port:8080,&#x2F;&#x2F;修改启动端口号</p><p>autoOpenBrowser:true,&#x2F;&#x2F;自动打开浏览器，反之为false</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实现通过npm启动和打包时自动切换assetsPublicPath的路径</title>
      <link href="/2022/10/08/vue23/"/>
      <url>/2022/10/08/vue23/</url>
      
        <content type="html"><![CDATA[<p>通常情况下我们是修改config》index.js》assetsPublicPath的值：<br>开发环境：’&#x2F;‘<br>生产环境：’.&#x2F;‘</p><p>来解决这个问题，但是我们每次在开发和生产环境（测试与打包）切换的时候，就要手动去修改这个值，这是比较麻烦的，万一忘记修改了，打包到线上就会出现异常，相当烦人！<br>有没有一个让npm进行测试运行和打包的时候自动切换这个路径的一劳永逸的办法呢？</p><p>答案是有的！</p><span id="more"></span><p>1）修改package.json配置脚本指令（dev,start,build）：</p><pre><code class="bash">  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;set NODE_ENV=development&amp;&amp;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,    &quot;start&quot;: &quot;set NODE_ENV=development&amp;&amp;npm run dev&quot;,    &quot;build&quot;: &quot;set NODE_ENV=production&amp;&amp;node build/build.js&quot;  &#125;  </code></pre><p>看看我们的指令dev,start,build都添加了什么内容。<br>增加一个名为NODE_ENV的变量，同时：</p><blockquote><p>（1）在执行指令npm run dev 或 npm run start指令时给变量赋值为：development</p><p>（2）在执行指令 npm run build指令时给变量赋值为：production</p></blockquote><p>2）增加修改config》index.js中的内容：</p><blockquote><p>‘use strict’<br>const path &#x3D; require(‘path’)<br>const runPath &#x3D; process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘development’ ? ‘&#x2F;‘ : ‘.&#x2F;‘ &#x2F;&#x2F;#新增项&#x2F;</p><p>module.exports &#x3D; {<br>    dev: {</p><pre><code>    // Paths    assetsSubDirectory: &#39;static&#39;,    assetsPublicPath: runPath,//#修改项/    proxyTable: {    },    // Various Dev Server settings    host: &#39;localhost&#39;, // can be overwritten by process.env.HOST    port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined    autoOpenBrowser: false,    errorOverlay: true,    notifyOnErrors: true,    poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-    /**     * Source Maps     */    // https://webpack.js.org/configuration/devtool/#development    devtool: &#39;cheap-module-eval-source-map&#39;,    // If you have problems debugging vue-files in devtools,    // set this to false - it *may* help    // https://vue-loader.vuejs.org/en/options.html#cachebusting    cacheBusting: true,    cssSourceMap: true},build: {    // Template for index.html    index: path.resolve(__dirname, &#39;../dist/index.html&#39;),    // Paths    assetsRoot: path.resolve(__dirname, &#39;../dist&#39;),    assetsSubDirectory: &#39;static&#39;,    assetsPublicPath: runPath,//#修改项/    /**     * Source Maps     */    productionSourceMap: true,    // https://webpack.js.org/configuration/devtool/#production    devtool: &#39;#source-map&#39;,    // Gzip off by default as many popular static hosts such as    // Surge or Netlify already gzip all static assets for you.    // Before setting to `true`, make sure to:    // npm install --save-dev compression-webpack-plugin    productionGzip: false,    productionGzipExtensions: [&#39;js&#39;, &#39;css&#39;],    // Run the build command with an extra argument to    // View the bundle analyzer report after build finishes:    // `npm run build --report`    // Set to `true` or `false` to always turn it on or off    bundleAnalyzerReport: process.env.npm_config_report}</code></pre><p>}</p></blockquote><p>调整的地方是备注为“新增项”和“修改项”的内容</p><p>这样，我们便实现了Vue项目在运行和打包自动切换路径的功能。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入ElementUi</title>
      <link href="/2022/10/08/vue22/"/>
      <url>/2022/10/08/vue22/</url>
      
        <content type="html"><![CDATA[<p>1.安装Element-UI框架</p><blockquote><p>官网：npm i element-ui -S<br>也可以是<br>npm install element-ui –save</p></blockquote><span id="more"></span><p>2.在main.js中引入对应js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><p>3.让Vue使用ElementUI </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p>通过以上步骤就可以在项目中使用（包括this.$message弹窗也能被识别）ElementUI了。</p><p>当然我们有时候可能只是想使用弹窗功能，只需按以下步骤即可：</p><p>1.安装Element-UI框架</p><blockquote><p>官网：npm i element-ui -S</p><p>也可以是</p><p>npm install element-ui –save</p></blockquote><p>2.在main.js中引入对应js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">Message</span><br><span class="line">&#125; from <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><p>3.引入ElementUI的Message模块，并挂在到Vue中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">Message</span><br><span class="line">&#125; from <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$message</span> = Message;</span><br></pre></td></tr></table></figure><p>这样我们就可以通过：this.$message(‘弹窗出来了’)</p><p>来使用弹窗功能。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目中加入百度统计</title>
      <link href="/2022/10/08/vue21/"/>
      <url>/2022/10/08/vue21/</url>
      
        <content type="html"><![CDATA[<p>原本我用的是CNZZ插件来做访客统计的功能，但是现在不免费了，一年最低要近1000块大洋才能使用，我只能呵呵。</p><p>主要是网站没人气嘛没必要花这笔钱，而且还穷。</p><p>那就这样吧，再用下下去，就不划算了！！！</p><p>于是在百度搜罗资料，寻求一个Vue项目能做访客统计的插件。</p><p>最终选中了百度统计这款插件，话不多说，用起来先！</p><p>1.申请百度统计的账号（已有账号请跳过此步。）</p><span id="more"></span><blockquote><p>官方地址：<a href="https://tongji.baidu.com/sc-web/">https://tongji.baidu.com/sc-web/</a></p></blockquote><p>2.新建网站，获取代码</p><blockquote><p>需要填写项：网站域名、网站首页、网站首页、行业类别<br>其中“网站域名“和”网站首页”是必填，因为直接关系到统计的对象</p></blockquote><p>填写好之后，如果后续要调整是可以编辑的；</p><p>这里我发现，配置好之后总是会直接进入统计页面，后续难找到这个页面，于是我自己做了一个记录：这是我的后台，你的自己记录，嘿嘿。</p><p>创建好之后，点击“获取代码”，然后“复制代码”，这个代码就是我们需要用到网站配置中去的。</p><p>3.在Vue项目中引入统计的代码，实现统计功能</p><p>Vue的项目不同于其它直观的Web项目，如果直接在script脚本中引入，无法生效；</p><p>1）在App.vue页面created中放入统计代码（这里放你自己的代码，我呈现的是我的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">   var _hmt = _hmt || [];</span><br><span class="line">   (<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     var hm = document.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">     hm.src = <span class="string">&quot;https://hm.baidu.com/hm.js?d76ad973f84629076d1bae45eb4d2ad5&quot;</span>;</span><br><span class="line">     var s = document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[0];</span><br><span class="line">     s.parentNode.insertBefore(hm, s);</span><br><span class="line">   &#125;)();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2）在main.js中添加以下内容</p><pre><code class="bash">router.beforeEach((to, from, next) =&gt; &#123;  //添加页面访问记录  if (to.path) &#123;    if (window._hmt) &#123;      window._hmt.push([&#39;_trackPageview&#39;, &#39;/#&#39; + to.fullPath])    &#125;  &#125;  next()&#125;)</code></pre><p>3）完成以上两步后，我们就可以打包网站部署到服务器上去了，接下来就是验证统计功能有没有生效</p><blockquote><p>回到刚才生成统计代码的页面，点击代码检查，或者点击前面的刷新按钮；系统便会检测统计功能是否生效;如果生效“首页代码状态”显示的是“代码安装正确”</p></blockquote><p>注意：生效后大概20分钟才会生成访问分析的报告。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 百度统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中UI库Ant Design Vue 回到顶部（BackTop）组件的使用</title>
      <link href="/2022/10/08/vue20/"/>
      <url>/2022/10/08/vue20/</url>
      
        <content type="html"><![CDATA[<p>首先看下官方文档的使用说明，写出了以下范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;components-back-top-demo-custom&quot;</span>&gt;</span><br><span class="line">      &lt;a-back-top&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;ant-back-top-inner&quot;</span>&gt;</span><br><span class="line">          &lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;up&quot;</span>&gt;&lt;/a-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a-back-top&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure><span id="more"></span>    <p>可能有的开发人员会碰到回到顶部的图标并没有加载出来，F12看下页面源码也只有最外层DIV,而a-back-top,并没有渲染出来，也就是没有生效。</p><p>遇到这种情况是因为当前滚动区域并不是Window(整个视窗)，而是其中的某一块（DIV）;</p><p>也就是说要让BackTop生效，那么它所绑定的对象必须是可滚动的，这样才会生效。</p><p>这就要用到一个属性：target</p><p>我们调整以下刚刚的写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;div <span class="built_in">id</span>=<span class="string">&quot;components-back-top-demo-custom&quot;</span>&gt;</span><br><span class="line">        &lt;a-back-top :target=<span class="string">&quot;backtop&quot;</span>&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;ant-back-top-inner&quot;</span>&gt;</span><br><span class="line">            &lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;up&quot;</span>&gt;&lt;/a-icon&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/a-back-top&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br></pre></td></tr></table></figure><p>这个target是一个函数，返回的是可滚动区域对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">backtop</span></span>() &#123;</span><br><span class="line">   <span class="built_in">return</span> document.querySelector(<span class="string">&quot;#contentC&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样BackTop的功能就生效了。</p><p>这里附上我使用的样式：</p><pre><code class="bash">#components-back-top-demo-custom .ant-back-top-inner &#123;  cursor: pointer;  height: 40px;  width: 40px;  line-height: 40px;  background-color: #61AFEF;  font-size: 20px;  border-radius: 50%;  color: #fff;  text-align: center;  float: right;   bottom: 8em;  right: -2em;  position: relative;&#125;#components-back-top-demo-custom .ant-back-top-inner:hover &#123;  background-color: #6ED69F;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中使用分享插件social-share</title>
      <link href="/2022/10/08/vue19/"/>
      <url>/2022/10/08/vue19/</url>
      
        <content type="html"><![CDATA[<p>老规矩先安装依赖：</p><blockquote><p>cnpm install vue-social-share -S</p></blockquote><p>安装完后从main.js中引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Share from <span class="string">&#x27;vue-social-share&#x27;</span></span><br><span class="line">import <span class="string">&#x27;vue-social-share/dist/client.css&#x27;</span>;</span><br><span class="line">Vue.use(Share)</span><br></pre></td></tr></table></figure><span id="more"></span><p>最后在页面中使用了：</p><blockquote><p><share :config="config"></share></p></blockquote><p>以上的config是插件的常用配置，是一个对象，其属性有以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">config: &#123;</span><br><span class="line">        url: <span class="string">&quot;&quot;</span>, // 网址，默认使用 window.location.href</span><br><span class="line">        <span class="built_in">source</span>: <span class="string">&quot;&quot;</span>, // 来源（QQ空间会用到）, 默认读取<span class="built_in">head</span>标签：&lt;meta name=<span class="string">&quot;site&quot;</span> content=<span class="string">&quot;http://overtrue&quot;</span> /&gt;</span><br><span class="line">        title: <span class="string">&quot;&quot;</span>, // 标题，默认读取 document.title 或者 &lt;meta name=<span class="string">&quot;title&quot;</span> content=<span class="string">&quot;share.js&quot;</span> /&gt;</span><br><span class="line">        description: <span class="string">&quot;&quot;</span>, // 描述, 默认读取<span class="built_in">head</span>标签：&lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;PHP弱类型的实现原理分析&quot;</span> /&gt;</span><br><span class="line">        image: <span class="string">&quot;&quot;</span>, // 图片, 默认取网页中第一个img标签</span><br><span class="line">        sites: [</span><br><span class="line">          <span class="string">&quot;qzone&quot;</span>,</span><br><span class="line">          <span class="string">&quot;qq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;weibo&quot;</span>,</span><br><span class="line">          <span class="string">&quot;wechat&quot;</span>,</span><br><span class="line">          <span class="string">&quot;douban&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tencent&quot;</span>,</span><br><span class="line">          <span class="string">&quot;linkedin&quot;</span>,</span><br><span class="line">          <span class="string">&quot;google&quot;</span>,</span><br><span class="line">          <span class="string">&quot;facebook&quot;</span>,</span><br><span class="line">          <span class="string">&quot;twitter&quot;</span>,</span><br><span class="line">        ], // 启用的站点</span><br><span class="line">        disabled: [</span><br><span class="line">          <span class="string">&quot;qzone&quot;</span>,</span><br><span class="line">          <span class="string">&quot;qq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tencent&quot;</span>,</span><br><span class="line">          <span class="string">&quot;douban&quot;</span>,</span><br><span class="line">          <span class="string">&quot;linkedin&quot;</span>,</span><br><span class="line">          <span class="string">&quot;google&quot;</span>,</span><br><span class="line">          <span class="string">&quot;facebook&quot;</span>,</span><br><span class="line">          <span class="string">&quot;twitter&quot;</span>,</span><br><span class="line">        ], // 禁用的站点</span><br><span class="line">        wechatQrcodeTitle: <span class="string">&quot;微信扫一扫：分享&quot;</span>, // 微信二维码提示文字</span><br><span class="line">        wechatQrcodeHelper:</span><br><span class="line">          <span class="string">&quot;&lt;p&gt;微信里点“发现”，扫一下&lt;/p&gt;&lt;p&gt;二维码便可将本文分享至朋友圈。&lt;/p&gt;&quot;</span>,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>使用后我们会发现页面中图标并没有完整的呈现</p><p>看下网页css代码的引用路径发现问题点在于样式中字体的引用路径是绝对路径，</p><p>我们需要调整为当前相对路径，具体的做法是：</p><blockquote><p>修改node_modules下文件夹:vue-social-share&gt;dist&gt;client.css 文件中将顶部“@font-face”中 url中的“&#x2F;static”改为“.&#x2F;static”</p></blockquote><p>这样就能正确显示图标了。</p><p>当然了由于一般代码是不会对node_modules上传管控的，这就意味着，每次新download下载，都要自己去改以下，这就有一定的局限性，不方便嘛。</p><p>为了规避此弊端，我们可以将client.css下载到本地，再将client.css里面引入的图标文件（刚刚调整的那几个）复制到src下面的static文件下，这样就可以一次性修改样式表里的路径了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> social-share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中实现页面刷新的几种方式</title>
      <link href="/2022/10/08/vue18/"/>
      <url>/2022/10/08/vue18/</url>
      
        <content type="html"><![CDATA[<p>1.原页面刷新，类似于F5</p><blockquote><p>this.$router.go(0)<br>或者<br>location.reload()</p></blockquote><p>2.创建一个空白页面（blank.vue），通过路由的方式先跳转到空白页面再跳转回来</p><span id="more"></span><blockquote><p>this.$router.replace({ path:’&#x2F;blank’ })</p></blockquote><p>3.使用inject &#x2F; provide组合控制显示</p><p>方法1和2的刷新是比较传统的动态刷新，整个页面会出现停顿和白屏，体验感不好。</p><p>推荐使用方法3，类似于静态刷新。</p><p>(1）添加：provide</p><p>1）在路由容器（一般是在App.vue 页面中）router-view添加：v-if&#x3D;”isRouterAlive”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">                        &lt;router-view</span><br><span class="line">                          :key=<span class="string">&quot;<span class="variable">$route</span>.fullPath&quot;</span></span><br><span class="line">                          v-if=<span class="string">&quot;isRouterAlive&quot;</span></span><br><span class="line">                        &gt;&lt;/router-view&gt;</span><br><span class="line">                      &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>2）在data函数中添加：isRouterAlive: true,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      isRouterAlive: <span class="literal">true</span>,</span><br><span class="line">      leftheight: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      csscenter: &#123;</span><br><span class="line">        height: this.leftheight,</span><br><span class="line">      &#125;,</span><br><span class="line">      slideTop: <span class="literal">true</span>,</span><br><span class="line">      backgroundDiv: &#123;</span><br><span class="line">        // backgroundImage: <span class="string">&quot;url(&quot;</span> + require(<span class="string">&quot;../static/img/n3.jpg&quot;</span>) + <span class="string">&quot;)&quot;</span>,</span><br><span class="line">        backgroundRepeat: <span class="string">&quot;no-repeat&quot;</span>,</span><br><span class="line">        backgroundSize: <span class="string">&quot;110% 100%&quot;</span>,</span><br><span class="line">        backgroundAttachment: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">        backgroundposition: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        // filter: <span class="string">&quot;grayscale(10%)&quot;</span>,</span><br><span class="line">        //  filter: <span class="string">&quot;blur(1px)&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  3)添加一个provide类型，内容如下：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="title">provide</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">    reload: this.reload,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>  4)在method方法中添加以下内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">      this.isRouterAlive = <span class="literal">false</span>; //先关闭，</span><br><span class="line">      this.<span class="variable">$nextTick</span>(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;inject&#x27;</span>);</span><br><span class="line">        this.isRouterAlive = <span class="literal">true</span>; //再打开</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">```      </span><br><span class="line">(2)引用：inject</span><br><span class="line"></span><br><span class="line">在需要刷新的页面注入inject</span><br><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">inject: [<span class="string">&quot;reload&quot;</span>]</span><br><span class="line">this.reload();</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line">使用范例：</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  inject: [<span class="string">&quot;reload&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span></span>() &#123;</span><br><span class="line">    window.setTimeout(() =&gt; &#123;</span><br><span class="line">      this.orderlist1 = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist1&quot;</span>));</span><br><span class="line">      this.orderlist2 = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist2&quot;</span>));</span><br><span class="line">      this.showinfo();      </span><br><span class="line">    &#125;, 500);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.reload();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里做了一个延迟刷新，因为是静态的，为了验证是否起到作用，可以在relolad()方法中打印有一些标识信息；</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用AOS动画插件，让你的网页更酷炫</title>
      <link href="/2022/10/08/vue17/"/>
      <url>/2022/10/08/vue17/</url>
      
        <content type="html"><![CDATA[<p>根据官方文档，使用此插件可以通过直接引用的方式，也可以是下载安装本地包；<br>1.直接使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://unpkg.com/aos@next/dist/aos.css&quot;</span>/&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/aos@next/dist/aos.js”</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">AOS.init();</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这种引入方式如果是在Vue项目中，自然是从首页（index.html）中引入。</p><span id="more"></span><p>2.npm或者yarn安装</p><p>Vue项目自然是推荐这种方式</p><blockquote><p>npm install –save aos@next</p><p>or<br>yarn add aos@next</p></blockquote><p>然后在main.js引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import AOS from <span class="string">&#x27;aos&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;aos/dist/aos.css&#x27;</span></span><br><span class="line">AOS.init();</span><br></pre></td></tr></table></figure><p>以上AOS.init()  实际上是默认了以下配置（详细功能配置可查看官方文档）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">AOS.init(&#123;</span><br><span class="line">  // Global settings:</span><br><span class="line">  <span class="built_in">disable</span>: <span class="literal">false</span>, // accepts following values: <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;tablet&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, boolean, expression or <span class="keyword">function</span></span><br><span class="line">  startEvent: <span class="string">&#x27;DOMContentLoaded&#x27;</span>, // name of the event dispatched on the document, that AOS should initialize on</span><br><span class="line">  initClassName: <span class="string">&#x27;aos-init&#x27;</span>, // class applied after initialization</span><br><span class="line">  animatedClassName: <span class="string">&#x27;aos-animate&#x27;</span>, // class applied on animation</span><br><span class="line">  useClassNames: <span class="literal">false</span>, // <span class="keyword">if</span> <span class="literal">true</span>, will add content of `data-aos` as classes on scroll</span><br><span class="line">  disableMutationObserver: <span class="literal">false</span>, // disables automatic mutations<span class="string">&#x27; detections (advanced)</span></span><br><span class="line"><span class="string">  debounceDelay: 50, // the delay on debounce used while resizing window (advanced)</span></span><br><span class="line"><span class="string">  throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:</span></span><br><span class="line"><span class="string">  offset: 120, // offset (in px) from the original trigger point</span></span><br><span class="line"><span class="string">  delay: 0, // values from 0 to 3000, with step 50ms</span></span><br><span class="line"><span class="string">  duration: 400, // values from 0 to 3000, with step 50ms</span></span><br><span class="line"><span class="string">  easing: &#x27;</span>ease<span class="string">&#x27;, // default easing for AOS animations</span></span><br><span class="line"><span class="string">  once: false, // whether animation should happen only once - while scrolling down</span></span><br><span class="line"><span class="string">  mirror: false, // whether elements should animate out while scrolling past them</span></span><br><span class="line"><span class="string">  anchorPlacement: &#x27;</span>top-bottom<span class="string">&#x27;, // defines which position of the element regarding to window should trigger the animation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>接下来就是如何在网页中实现功能渲染了。</p><p>不得不说还是挺简单的：只要将特性绑定到控件上即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">   <span class="built_in">id</span>=<span class="string">&quot;blog_left&quot;</span></span><br><span class="line">   class=<span class="string">&quot;csleft&quot;</span></span><br><span class="line">   data-aos=<span class="string">&quot;slide-down&quot;</span></span><br><span class="line">   data-aos-duration=<span class="string">&quot;1500&quot;</span></span><br><span class="line">   data-aos-easing=<span class="string">&quot;ease-in-out&quot;</span></span><br><span class="line">   data-aos-mirror=<span class="string">&quot;true&quot;</span></span><br><span class="line">   data-aos-once=<span class="string">&quot;false&quot;</span></span><br><span class="line">   data-aos-anchor-placement=<span class="string">&quot;top-center&quot;</span></span><br><span class="line"> &gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>  这样一个初始化1500ms的下拉做菜单动画效果就完成。</p><p>当然了这是比较简单的用法，更酷炫的用法参考官方文档结合自己的项目去实现咯。</p><p>这里附上常用的属性（特效名、锚点位置、缓动方法）：</p><h3 id="Animations"><a href="#Animations" class="headerlink" title="Animations"></a>Animations</h3><h2 id="Fade-animations"><a href="#Fade-animations" class="headerlink" title="Fade animations"></a>Fade animations</h2><p>fade<br>fade-up<br>fade-down<br>fade-left<br>fade-right<br>fade-up-right<br>fade-up-left<br>fade-down-right<br>fade-down-left</p><h2 id="Flip-animations"><a href="#Flip-animations" class="headerlink" title="Flip animations"></a>Flip animations</h2><p>flip-up<br>flip-down<br>flip-left<br>flip-right</p><h2 id="Slide-animations"><a href="#Slide-animations" class="headerlink" title="Slide animations"></a>Slide animations</h2><p>slide-up<br>slide-down<br>slide-left<br>slide-right</p><h2 id="Zoom-animations"><a href="#Zoom-animations" class="headerlink" title="Zoom animations"></a>Zoom animations</h2><p>zoom-in<br>zoom-in-up<br>zoom-in-down<br>zoom-in-left<br>zoom-in-right<br>zoom-out<br>zoom-out-up<br>zoom-out-down<br>zoom-out-left<br>zoom-out-right</p><h3 id="Anchor-placements"><a href="#Anchor-placements" class="headerlink" title="Anchor placements"></a>Anchor placements</h3><p>top-bottom<br>top-center<br>top-top<br>center-bottom<br>center-center<br>center-top<br>bottom-bottom<br>bottom-center<br>bottom-top</p><h3 id="Easing-functions"><a href="#Easing-functions" class="headerlink" title="Easing functions"></a>Easing functions</h3><p>linear<br>ease<br>ease-in<br>ease-out<br>ease-in-out<br>ease-in-back<br>ease-out-back<br>ease-in-out-back<br>ease-in-sine<br>ease-out-sine<br>ease-in-out-sine<br>ease-in-quad<br>ease-out-quad<br>ease-in-out-quad<br>ease-in-cubic<br>ease-out-cubic<br>ease-in-out-cubic<br>ease-in-quart<br>ease-out-quart<br>ease-in-out-quart</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> AOS动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Vue icon 图标的使用方法</title>
      <link href="/2022/10/08/vue16/"/>
      <url>/2022/10/08/vue16/</url>
      
        <content type="html"><![CDATA[<p>先看<a href="https://2x.antdv.com/components/icon-cn" title="" target="">官方文档</a><br>直接点击Outlined栏相应的图标会自动将图标名称复制到你的剪切板上,这里我们点击一个类似菜单的图标：<menu-fold-outlined /></p><p>通常我们会这样去使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;menu-fold-outlined&quot;</span>&gt;&lt;/a-icon&gt;</span><br></pre></td></tr></table></figure><p>但是并不会显示出来</p><p>正确的用法应该是：我们在调用的时候标签要去掉分类词</p><span id="more"></span><blockquote><p>标签去除Oulined、TwoTone、Filled,首字母小写，后续大写字母转小写并加-</p></blockquote><p>所以刚刚的那个标签应该这么用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;menu-fold&quot;</span>&gt;&lt;/a-icon&gt;</span><br></pre></td></tr></table></figure><p>官方下面文档上没见到有提示，这里写给大家避避坑。</p><p>当然更高级的用法使用的时候也可以像官方文档写的一样，通过components传值：这样可以不用去掉‘分类词’直接用了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Vue 菜单（Menu）的用法介绍</title>
      <link href="/2022/10/08/vue15/"/>
      <url>/2022/10/08/vue15/</url>
      
        <content type="html"><![CDATA[<h4> 根据：<a href="https://2x.antdv.com/components/menu-cn" title="" target="">Ant DesiGN Vue 官网</a> 文档，常用属性参考如下：</h4><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-menu</span><br><span class="line">      mode=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">      triggerSubMenuAction=<span class="string">&quot;click&quot;</span></span><br><span class="line">      :overflowedIndicator=<span class="string">&quot;hideico&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;removekind()&quot;</span>&gt;</span><br><span class="line">        &lt;img class=<span class="string">&quot;loginimg&quot;</span> v-bind:src=<span class="string">&quot;headimg&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">          &lt;audio</span><br><span class="line">            style=<span class="string">&quot;height: 0px; width: 0px&quot;</span></span><br><span class="line">            <span class="built_in">id</span>=<span class="string">&quot;audio&quot;</span></span><br><span class="line">            ref=<span class="string">&quot;audio&quot;</span></span><br><span class="line">            controls</span><br><span class="line">            muted</span><br><span class="line">            :src=<span class="string">&quot;musicsrc&quot;</span></span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&quot;audio/mpeg&quot;</span></span><br><span class="line">          &gt;&lt;/audio&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-caret-left&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(2)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-headset&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(0)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-caret-right&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(1)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;span v-text=<span class="string">&quot;musicname&quot;</span> class=<span class="string">&quot;musicname&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;a-switch</span><br><span class="line">          checked-children=<span class="string">&quot;Light&quot;</span></span><br><span class="line">          un-checked-children=<span class="string">&quot;Dark&quot;</span></span><br><span class="line">          default-checked</span><br><span class="line">          @click=<span class="string">&quot;toggleDark&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;writeblog()&quot;</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">&quot;el-icon-edit-outline&quot;</span>&gt;&lt;/i&gt;&lt;span&gt; 文章发布&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;writemessage()&quot;</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">&quot;el-icon-position&quot;</span>&gt; &lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;csdot&quot;</span>&gt; 留言板块&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;a-input-search</span><br><span class="line">          <span class="built_in">id</span>=<span class="string">&quot;searchtxt&quot;</span></span><br><span class="line">          clearable</span><br><span class="line">          placeholder=<span class="string">&quot;Search...&quot;</span></span><br><span class="line">          @search=<span class="string">&quot;onSearch&quot;</span></span><br><span class="line">          class=<span class="string">&quot;border_radius1&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">    &lt;/a-menu&gt;</span><br></pre></td></tr></table></figure><p>mode:为菜单的呈现方式有3个</p><blockquote><p>vertical：竖直【默认】</p><p>horizontal：水平</p><p>inline：内联</p></blockquote><p>theme：主题颜色(light&#x2F;dark)2种，其中默认为： light</p><p>multiple：菜单是否可多选，默认为：false</p><p>selectedKeys(v-model)：当前选中菜单key集合</p><p>style：菜单的样式</p><p>defaultOpenKeys：初始展开菜单key集合</p><p>defaultSelectedKeys：初始选中菜单key集合</p><p>triggerSubMenuAction：导航栏缩放时的图标样式（默认为3个黑色的小圆点）</p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:overflowedIndicator=<span class="string">&quot;hideico&quot;</span></span><br></pre></td></tr></table></figure><p>对应的hideico为一个slot样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">   <span class="built_in">return</span> &#123;</span><br><span class="line">     headimg: <span class="string">&quot;/static/img/head1.png&quot;</span>,</span><br><span class="line">     musicname: <span class="string">&quot;正在播放:无&quot;</span>,</span><br><span class="line">     palyflag: <span class="literal">false</span>,</span><br><span class="line">     musicindex: 0,</span><br><span class="line">     musicsrc: require(<span class="string">&quot;../assets/music/烟花再美也不及你-三暮雨.mp3&quot;</span>),</span><br><span class="line">     userinfo: &#123; account: <span class="string">&quot;&quot;</span>, password: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">     SelfSearch: <span class="string">&quot;&quot;</span>,</span><br><span class="line">     Islogin: <span class="literal">false</span>,</span><br><span class="line">     dialogFormVisible: <span class="literal">false</span>,</span><br><span class="line">     hideico:&lt;i class=<span class="string">&#x27;el-icon-s-fold&#x27;</span> style=<span class="string">&#x27;border:1px solid white;&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>这里用的是elementui的一个图标，如果是Ant Design Vue 的icon就是：</p><pre><code class="bash">hideico:&quot;&lt;a-icon type=&#39;menu&#39; /&gt;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入highlight.js实现代码高亮，兼容IE</title>
      <link href="/2022/10/08/vue14/"/>
      <url>/2022/10/08/vue14/</url>
      
        <content type="html"><![CDATA[<p>【方案一】</p><p>根据highlight.js官网的介绍，我们在main.js文件中通过import的方式引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import hljs from <span class="string">&quot;highlight.js&quot;</span>;</span><br><span class="line">import <span class="string">&quot;highlight.js/styles/monokai-sublime.css&quot;</span>;</span><br><span class="line">Vue.use(hljs)</span><br></pre></td></tr></table></figure><p>这里用到了富文本框WandEditor，引入高亮；</p><blockquote><p>this.editor.highlight &#x3D; hljs</p></blockquote><p>以上测试环境和打包后在IE上都不兼容，其它浏览器正常运行；</p><span id="more"></span><p>尝试过使用Vue中兼容IE的用法：ranspileDependencies</p><blockquote><p>在项目根目录与package.json同级创建：Vue.config.js文件【这个文件创建后项目会自动识别，无需特别引入】，代码如下。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  transpileDependencies: [</span><br><span class="line">    /[/\\]node_modules[/\\](.+?)?highlight.js/,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测无效。</p><p>也试过从webpack下手，通过引入babel-profill</p><p>修改webpack.base.conf.js为以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"></span><br><span class="line">    app: [<span class="string">&#x27;babel-polyfill&#x27;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>module&gt;rules&gt;include</p><blockquote><p>include: [resolve(‘src’), resolve(‘test’), resolve(‘node_modules&#x2F;webpack-dev-server&#x2F;client’),resolve(‘node_modules&#x2F;highlight.js’)]</p></blockquote><p>完整文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">var webpack = require(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const utils = require(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line">const config = require(<span class="string">&#x27;../config&#x27;</span>)</span><br><span class="line">const vueLoaderConfig = require(<span class="string">&#x27;./vue-loader.conf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> resolve(<span class="built_in">dir</span>) &#123;</span><br><span class="line">  <span class="built_in">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="built_in">dir</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      jQuery: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">      $: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line">  // entry: &#123;</span><br><span class="line">  //   app: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  // &#125;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">&#x27;babel-polyfill&#x27;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ?</span><br><span class="line">      config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="built_in">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.vue$/,</span><br><span class="line">        loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.js$/,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>), resolve(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>),resolve(<span class="string">&#x27;node_modules/highlight.js&#x27;</span>)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;media/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;fonts/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">    // prevent webpack from injecting useless setImmediate polyfill because Vue</span><br><span class="line">    // <span class="built_in">source</span> contains it (although only uses it <span class="keyword">if</span> it<span class="string">&#x27;s native).</span></span><br><span class="line"><span class="string">    setImmediate: false,</span></span><br><span class="line"><span class="string">    // prevent webpack from injecting mocks to Node native modules</span></span><br><span class="line"><span class="string">    // that does not make sense for the client</span></span><br><span class="line"><span class="string">    dgram: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    fs: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    net: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    tls: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    child_process: &#x27;</span>empty<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>亲测无效。<br>【方案二】</p><p>通过require的方式引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">   this.kind = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist2&quot;</span>));</span><br><span class="line">   <span class="keyword">if</span> (!this.isie) &#123;</span><br><span class="line">     console.log(<span class="string">&quot;不是ie&quot;</span>);</span><br><span class="line">     this.hljs = require(<span class="string">&quot;highlight.js&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     console.log(<span class="string">&quot;是ie&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>原本想的是IE浏览器不引入js，发布信息在Chrome等高亮功能正常的浏览器上，这样IE浏览器也能正常访问；</p><p>这样在wangEditor配置信息中：</p><blockquote><p>if (this.hljs !&#x3D; null) this.editor.highlight &#x3D; this.hljs;</p></blockquote><p>起初，以为这种方案在本地是可行的，因为IE浏览器能正常访问网站，Chrome浏览器也能使用代码高亮的功能；</p><p>但是一旦打包到线上就同“方案一”一样，不兼容IE；</p><p>查阅资料后得知：</p><blockquote><p>require只能用在node里面，前端之所以能用，是因为我们引用了require.js插件来辅助；</p><p>require不是前端语法，打包的时候会被编译；</p></blockquote><p>也就是说只要打包，就会编译对应的js模块。</p><p>方案二扑街。<br>【方案三】<br>在main.js中补充以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;highlight&#x27;</span>, <span class="keyword">function</span> (el) &#123;</span><br><span class="line">  <span class="built_in">let</span> blocks = el.querySelectorAll(<span class="string">&#x27;pre code&#x27;</span>);</span><br><span class="line">  blocks.forEach((block) =&gt; &#123;</span><br><span class="line">    hljs.highlightBlock(block)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在从index.html中引入相应的js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> href=<span class="string">&quot;http://apps.bdimg.com/libs/highlight.js/9.1.0/styles/default.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://apps.bdimg.com/libs/highlight.js/9.1.0/highlight.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上css和js可以在IE中打开下载到本地，以静态资源引入更容易管控（避免官网网络影响）；</p><p>然后在需要代码高亮的地方绑定一个特性：v-highlight</p><p>这里由于我用到了wangEditor富文本框，所以实现方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row</span><br><span class="line">       &gt;&lt;el-col&gt;</span><br><span class="line">         &lt;el-form-item label=<span class="string">&quot;博客内容&quot;</span> required&gt;</span><br><span class="line">           &lt;el-row</span><br><span class="line">             &gt;&lt;el-col&gt; &lt;div <span class="built_in">id</span>=<span class="string">&quot;editor&quot;</span> v-highlight&gt;&lt;/div&gt; &lt;/el-col</span><br><span class="line">           &gt;&lt;/el-row&gt;</span><br><span class="line">         &lt;/el-form-item&gt; &lt;/el-col</span><br><span class="line">     &gt;&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><p>同时，富文本框中的配置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.editor.config.onchange = (html) =&gt; &#123;        </span><br><span class="line">       this.info_ = html; // 绑定当前逐渐地值</span><br><span class="line">       this.<span class="variable">$emit</span>(<span class="string">&quot;change&quot;</span>, html); // 将内容同步到父组件中</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><p>【附录】</p><p>1.其它特性或样式用法参照官网；<br>2.这里方案三绑定了富文本框，输入源码后并不会里面呈现高亮效果，需要在其它文本框点击后才能触发；在IE中效果不会生效，但是从Chrome等其它浏览器生成高亮样式的文章后，从IE刷新是可以看到效果的，所以IE网站是可以正常访问浏览的。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue中引入静态图片</title>
      <link href="/2022/10/08/vue13/"/>
      <url>/2022/10/08/vue13/</url>
      
        <content type="html"><![CDATA[<p>1.将图片放在assets或其某文件下</p><p>2.通过以下两种方法引入</p><p>1).import  img1 from ‘..&#x2F;assets&#x2F;images&#x2F;img1.jpg’</p><p>在data中定义地址变量：pic:img1</p><p>2)直接在data中通过require引入:</p><p>pic: require(“..&#x2F;assets&#x2F;images&#x2F;img1.jpg”) </p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code常用的扩展插件</title>
      <link href="/2022/10/08/vue12/"/>
      <url>/2022/10/08/vue12/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Vetur<br>vue 代码?亮插件,vue开发神器</p></li><li><p>Auto Close Tag<br>html?动闭合标签插件</p></li><li><p>Beautify<br>格式化插件</p></li><li><p>Chinese (Simplified) vscode<br>汉化插件</p><span id="more"></span></li><li><p>Code Runner<br>在编辑器?运?js代码，同时可在terminal?显?打印结果的?具【?便调试代码,?持多种语??如 C++, Python, Java等等】</p></li><li><p>Git History<br>git ?具，?标定位到代码?上，可以在代码后边显?代码最近修改时间及修改?等信息</p></li><li><p>Git Project Manager<br>git 项?管理?具</p></li><li><p>GitLens — Git supercharged<br>git ?具，作?和 Git History 类似</p></li><li><p>HTML Snippets<br>快速?成html代码?具</p></li><li><p>Live Server<br>快速启动?个本地服务，?便html?件预览调试等</p></li><li><p>npm Intellisense<br>快速引?依赖插件</p></li><li><p>Path Autocomplete<br>路径提?插件</p></li><li><p>Prettier - Code formatter<br>代码格式化插件</p></li><li><p>Visual Studio IntelliCode<br>代码智能补全插件</p></li><li><p>Vue Theme<br>vue 代码主题插件</p></li><li><p>Vue VSCode Snippets<br>快速?成vue代码插件</p></li><li><p>vscode wxml</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2022/10/08/vue11/"/>
      <url>/2022/10/08/vue11/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Vue的生命周期-？"><a href="#什么是Vue的生命周期-？" class="headerlink" title="什么是Vue的生命周期 ？"></a>什么是Vue的生命周期 ？</h3><blockquote><p>Vue 的实例从创建到销毁的过程 ，就是生命周期 ，也就是从开始创建 ，初始化数据 ，编译模板 ，挂载Dom到渲染DOM ，更新数据再到渲染 ，卸载等一系列的过程 ，我们称这是Vue的生命周期。</p></blockquote><span id="more"></span><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><blockquote><p>从创建到销毁顺序执行的生命周期函数 :beforeCreate、created、 beforeMount、mounted、beforeUpdate、 updated、beforeDestroy、destroyed<br>而这些Vue生命周期过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数。</p></blockquote><h3 id="Vue生命周期的作用是什么？"><a href="#Vue生命周期的作用是什么？" class="headerlink" title="Vue生命周期的作用是什么？"></a>Vue生命周期的作用是什么？</h3><p>Vue生命周期过程中会伴随着多个事件钩子 ，这些钩子函数让我们在控制整个Vue实例的过程时更容易形成好的逻辑<br>Vue生命周期总共分8个阶段：创建前&#x2F;后 ，载入前&#x2F;后 ，更新前&#x2F;后 ，销毁前&#x2F;后</p><p>各个生命周期函数的作用：</p><h2 id="创建前-x2F-后-beforeCreate-x2F-created"><a href="#创建前-x2F-后-beforeCreate-x2F-created" class="headerlink" title="创建前&#x2F;后(beforeCreate &#x2F; created)"></a>创建前&#x2F;后(beforeCreate &#x2F; created)</h2><blockquote><p>在beforeCreate阶段 ，vue实例的挂载元素el和数据对象data都为undefined ，还未初始化 ，也就是说此时我们还拿不到数据</p><p>在created阶段 ，vue实例的数据对象data有了 ，但是实例对象el还没有 ，也就是说可以拿到数据 ，但是无法获取Dom节点 ，此时data 和 methods已经可以使用 但是页面还没有渲染出来</p><p>created阶段data有了才能拿到数据</p><p>所以我们在开发中 ，的一些获取数据的逻辑都可以写在created钩子函数中</p></blockquote><h2 id="载入前-x2F-后-（beforeMount-x2F-mounted）"><a href="#载入前-x2F-后-（beforeMount-x2F-mounted）" class="headerlink" title="载入前&#x2F;后 （beforeMount &#x2F; mounted）"></a>载入前&#x2F;后 （beforeMount &#x2F; mounted）</h2><blockquote><p>在beforeMount阶段 ，vue实例的$el和data都初始化了 ，但还是挂载之前的虚拟DOM节点 ，此时实例尚未挂载完成 ，此时页面上还看不到真实数据 只是一个模板页面而已</p><p>在mounted阶段 ，vue实例挂载完成 ，页面成功渲染数据已经真实渲染到页面上 在这个钩子函数里面我们可以使用一些第三方的插件</p><p>mounted页面才真正渲染完成</p><p>created拿不到elDom节点<br>注意：在beforeMount阶段 可以拿到el实例但是只是挂载的el虚拟DOM节点 ，在mounted阶段 el被新创建的vm.$el替换，并挂载到实例上此时才能操作页面上的DOM元素。</p></blockquote><p><b>以上四个钩子函数都是在Vue生命周期过程中自动调用。</b></p><h2 id="更新前-x2F-后-（beforeUpdate-x2F-updated）"><a href="#更新前-x2F-后-（beforeUpdate-x2F-updated）" class="headerlink" title="更新前&#x2F;后 （beforeUpdate &#x2F; updated）"></a>更新前&#x2F;后 （beforeUpdate &#x2F; updated）</h2><blockquote><p>在beforeUpdate 阶段 ，数据更新时调用，发生在虚拟DOM打补丁之前 页面上数据还是旧的。</p><p>在updated阶段 ，由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的，只有在数据改变后才调用。</p></blockquote><h2 id="销毁前-x2F-后-（beforeDestroy-x2F-destroyed）"><a href="#销毁前-x2F-后-（beforeDestroy-x2F-destroyed）" class="headerlink" title="销毁前&#x2F;后 （beforeDestroy &#x2F; destroyed）"></a>销毁前&#x2F;后 （beforeDestroy &#x2F; destroyed）</h2><blockquote><p>beforeDestroy在实例销毁之前调用 ，在这一步，实例仍然完全可用。</p><p>destroyed 实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p></blockquote><p>页面第一次加载只会调用触发 beforeCreate created beforeMount mounted</p><p>每个阶段对应的钩子函数 ，我们都可以在其内部做一些对应的逻辑。</p><p>【常用钩子函数的运用场景】</p><p>【beforeCreate 】此时页面开始创建 ，可以加loading等事件</p><p>【created 】加载实列触发或 一些异步请求调用 ，loading结束等事件</p><p>【mounted 】获取Dom节点操作DOM ，在这个钩子函数里面我们可以使用一些第三方的插件实例写在这个函数内</p><p>【updated】 做一些数据统一更新处理的相应函数</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios中使用异步（async +await）</title>
      <link href="/2022/10/08/vue10/"/>
      <url>/2022/10/08/vue10/</url>
      
        <content type="html"><![CDATA[<p>1.定义方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> getIteminfo(<span class="built_in">id</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">id</span> == null) <span class="built_in">id</span> = getPara();//获取页面参数</span><br><span class="line"></span><br><span class="line">    var item_options = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> await axios(&#123;</span><br><span class="line"></span><br><span class="line">        url: dev_proxyftpname + <span class="string">&quot;/api/findOneById&quot;</span>,</span><br><span class="line"></span><br><span class="line">        method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">        data: JSON.stringify(&#123; <span class="built_in">id</span>: <span class="built_in">id</span> &#125;),</span><br><span class="line"></span><br><span class="line">        headers: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="built_in">timeout</span>: 1000 * 30,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">        .<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (res.data) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (res.data.data != null) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">return</span> res.data.data;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>2.调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getIteminfo().<span class="keyword">then</span>(async res =&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.articleTemplateId != null) &#123;</span><br><span class="line">             await getTemplates(res.articleTemplateId).<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                 html += res.templateContent;</span><br><span class="line">                 $(<span class="string">&quot;.&quot;</span> + className).append(analysisHtml(html));</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中全局变量和全局函数的使用</title>
      <link href="/2022/10/08/vue9/"/>
      <url>/2022/10/08/vue9/</url>
      
        <content type="html"><![CDATA[<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>1.直接在main.js中通过prototype定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.accessToken = <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>在页面中调用：this.accessToken<br>这种方法简单但是，当需要定义变量很多的时候，管理就很繁杂，这个时候就不宜使用。</p><span id="more"></span><p>2.定义一个通用js文件，在文件中定义通用变量（通过export default 暴露），最后引入（import）调用;</p><p>定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//universal.js</span><br><span class="line">const accessToken =<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">accessToken , </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用（可以在需要的页面引入，也可以在main.js中引入）</p><p>（1）在需要的页面直接引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123; Token &#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import universal from <span class="string">&#x27;../universal&#x27;</span> // 引入模块</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line"><span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">Token: universal.accessToken  //获取方法定义的变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>（2）从main.js中引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import universal from <span class="string">&#x27;../universal&#x27;</span> // 引入模块</span><br><span class="line">Vue.prototype.universal = universal</span><br></pre></td></tr></table></figure><p>后在页面调用：this.universal.accessToken</p><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><p>1.在main.js中直接定义一个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.getToken = <span class="function"><span class="title">function</span></span> () &#123;&#125;</span><br></pre></td></tr></table></figure><p>后在组件中调用：this.getToken()</p><p>2.定义一个js文件，然后挂载到main.js中</p><p>定义的js文件:universal.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*配置通用方法， 新增方法请写备注*/</span><br><span class="line">exports.install = <span class="keyword">function</span> (Vue, options) &#123;    </span><br><span class="line">    /*判断是不是图片*/</span><br><span class="line">    Vue.prototype.isImage = <span class="keyword">function</span> (fileName) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof fileName !== <span class="string">&#x27;string&#x27;</span>) <span class="built_in">return</span>;</span><br><span class="line">        <span class="built_in">let</span> name = fileName.toLowerCase();</span><br><span class="line">        <span class="built_in">return</span> name.endsWith(<span class="string">&#x27;.png&#x27;</span>) || name.endsWith(<span class="string">&#x27;.jpeg&#x27;</span>) || name.endsWith(<span class="string">&#x27;.jpg&#x27;</span>) || name.endsWith(<span class="string">&#x27;.png&#x27;</span>) || name.endsWith(<span class="string">&#x27;.bmp&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挂载到 main.js中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Universal from <span class="string">&#x27;./assets/theme/js/universal&#x27;</span></span><br><span class="line">Vue.use(Universal)</span><br></pre></td></tr></table></figure><p>在页面中调用其中的某个方法：this.isImage(‘xxx’)</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex状态管理模式</title>
      <link href="/2022/10/08/vue8/"/>
      <url>/2022/10/08/vue8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>State：定义存储状态对象</p><p>Getter:获取到State后，对其计算返回需要的值（获取计算状态对象）</p><p>Mutation：提交更新状态对象（同步，异步使用：Action）</p><p>Action:提交一个或多个Mutation，不是直接变更状态</p><p>Module:模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p></blockquote><span id="more"></span><ol><li>定义（在main.js中）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const store = new vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line">orderlist: &#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">mutations: &#123;</span><br><span class="line">setOrderValue(state, orderlist) &#123;</span><br><span class="line">state.orderlist = orderlist</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">getOrderValue: state =&gt; state.orderlist,</span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line">&#125;,</span><br><span class="line">modules: &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>2.提交状态对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.commit(<span class="string">&quot;setOrderValue&quot;</span>, <span class="string">&quot;要提交的数据&quot;</span>);</span><br></pre></td></tr></table></figure>3.获取状态对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var orderLists= this.<span class="variable">$store</span>.getters.getOrderValue;</span><br></pre></td></tr></table></figure>需要注意的是状态对象信息在页面刷新后就不存在了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router的封装配置</title>
      <link href="/2022/10/08/vue7/"/>
      <url>/2022/10/08/vue7/</url>
      
        <content type="html"><![CDATA[<p>1.安装（如果在创建项目的时候没有确认安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-router --save</span><br></pre></td></tr></table></figure><p>之后在src下会生成一个文件夹router，这里我们删除这个文件夹。（安装好就行了，不用它的默认文件夹，我们自己封装）</p><span id="more"></span><p>2.配置</p><p>在根目录下（与main.js同级），创建routes.js文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Login from <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line">import index from <span class="string">&#x27;@/components/index&#x27;</span></span><br><span class="line"></span><br><span class="line">import Theme from <span class="string">&#x27;@/Views/Theme&#x27;</span></span><br><span class="line">import PermissionManage from <span class="string">&#x27;@/Views/PermissionManage&#x27;</span></span><br><span class="line">import MenuManage from <span class="string">&#x27;@/Views/MenuManage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default [</span><br><span class="line">    &#123; path: <span class="string">&quot;/&quot;</span>, component: Login &#125;,/*默认登录页面*/</span><br><span class="line">    &#123; path: <span class="string">&quot;/Login&quot;</span>, component: Login &#125;,/*路由跳转登录页面*/</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/index&quot;</span>, component: index, children: [</span><br><span class="line">            &#123; path: <span class="string">&quot;/&quot;</span>, component: Theme &#125;,/*二级菜单主页*/            </span><br><span class="line">            &#123; path: <span class="string">&quot;/PermissionManage&quot;</span>, component: PermissionManage &#125;,/*角色权限管理*/</span><br><span class="line">            &#123; path: <span class="string">&quot;/MenuManage&quot;</span>, component: MenuManage &#125;,/*菜单管理*/</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>文件夹目录结构：</p><p>默认主页是登录页面：Login</p><p>登录成功后进入页面：index 这个页面的构成如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">      &lt;mainheader&gt;&lt;/mainheader&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;mainleft&gt;&lt;/mainleft&gt;</span><br><span class="line">        &lt;maincontent&gt;&lt;/maincontent&gt;</span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import mainheader from <span class="string">&quot;@/components/mainheader&quot;</span>;</span><br><span class="line">  import mainleft from <span class="string">&quot;@/components/mainleft&quot;</span>;</span><br><span class="line">  import maincontent from <span class="string">&quot;@/components/maincontent&quot;</span>;</span><br><span class="line">  import mainbottom from <span class="string">&quot;@/components/mainbottom&quot;</span>;</span><br><span class="line">  import &#123; navActive &#125; from <span class="string">&quot;../assets/theme/js/frame&quot;</span>;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    inject: [<span class="string">&quot;reload&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">      var getuid = sessionStorage.getItem(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (getuid == null) &#123;</span><br><span class="line">        this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">          path: `/`,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        this.reload();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.reload();       </span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      mainheader,</span><br><span class="line">      mainleft,</span><br><span class="line">      maincontent,</span><br><span class="line">      mainbottom,</span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">&quot;Index&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 由顶部（mainheader）、左边菜单（mainleft），内容区（maincontent）、底部（mainbottom）构成</p><p>maincontent （内容区）包含有路由容器：router-view</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;maincontent&quot;</span>&gt;      </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;rcontent&quot;</span>&gt;</span><br><span class="line">        &lt;router-view :key=<span class="string">&quot;<span class="variable">$route</span>.fullPath&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;&#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>左边菜单通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line"></span><br><span class="line">     path: `/` +Theme  ,</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>通过路由容易的渲染，便可在内容区渲染出路由名Theme这个页面，</p><p>同样的页面还有：PermissionManage、MenuManage</p><p>这些都是相对于index的子菜单或称为二级菜单；路由的表现形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path: <span class="string">&quot;/index&quot;</span>, component: index, children: [</span><br><span class="line">           &#123; path: <span class="string">&quot;/&quot;</span>, component: Theme &#125;,/*二级菜单主页*/            </span><br><span class="line">           &#123; path: <span class="string">&quot;/PermissionManage&quot;</span>, component: PermissionManage &#125;,/*角色权限管理*/</span><br><span class="line">           &#123; path: <span class="string">&quot;/MenuManage&quot;</span>, component: MenuManage &#125;,/*菜单管理*/</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>3.在main.js中引入并挂载路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Routes from <span class="string">&#x27;./routes.js&#x27;</span></span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes: Routes,</span><br><span class="line">mode: <span class="string">&quot;history&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置好路由后，除了通过router-veiw，还可通过 router-link实现路由跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：&lt;router-link to=<span class="string">&quot;/home&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue错误笔记集合</title>
      <link href="/2022/10/08/vue6/"/>
      <url>/2022/10/08/vue6/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-is-not-defined"><a href="#Vue-is-not-defined" class="headerlink" title="Vue is not defined"></a>Vue is not defined</h3><p>在使用HTML button：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>出现了错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue is not defined</span><br></pre></td></tr></table></figure><p>解决办法：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1）&lt;button <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">2)&lt;button @click.prevent=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue项目渲染模式为history时刷新异常"><a href="#Vue项目渲染模式为history时刷新异常" class="headerlink" title="Vue项目渲染模式为history时刷新异常"></a>Vue项目渲染模式为history时刷新异常</h3><p>图片显示异常、以及控制台出现js引入路径错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/live2d-widget/lib/L2Dwidget.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/js/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">headimg: <span class="string">&quot;./static/img/head.jpg&quot;</span>,</span><br></pre></td></tr></table></figure><p>以上三个路径改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/static/live2d-widget/lib/L2Dwidget.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/static/js/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">headimg: <span class="string">&quot;/static/img/head.jpg&quot;</span>,</span><br></pre></td></tr></table></figure><p>就可以了。<br>这是因为：</p><blockquote><p>.&#x2F;     是当前所在目录（相对路径）</p><p>&#x2F;      是项目根目录（绝对路径）</p><p>hash模式的根路径即项目的根目录，是固定的，而history模式以&#x2F;开头的路径会被当做是根路径，所以以 .&#x2F; 在hisorty模式下引入文件自然是无效的。</p></blockquote><p>所以，其实无论是哪种模式，只要以    &#x2F;    引入静态文件都是可以的。</p><h3 id="nginx配置的网页刷新-404"><a href="#nginx配置的网页刷新-404" class="headerlink" title="nginx配置的网页刷新 404"></a>nginx配置的网页刷新 404</h3><p>如果我们在nginx下添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html</span><br></pre></td></tr></table></figure><p>刷新虽然没有出现404，但是页面还是没有正常显示（白屏），打开控制台发现以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError:Unexpected token &lt;</span><br></pre></td></tr></table></figure><p>这是由于：nginx配置与代码静态资源打包方式不匹配</p><p>需要修改：</p><p>index.js下build节点中以下属性改为绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsPublicPath:<span class="string">&#x27;/&#x27;</span>,</span><br></pre></td></tr></table></figure><p>这样刷新就正常了。</p><h3 id="ue-cli-·-Failed-to-download-repo-vuejs-templates-x2F-webpack-connect-ECONNREFUSED-127-0-0-1-443"><a href="#ue-cli-·-Failed-to-download-repo-vuejs-templates-x2F-webpack-connect-ECONNREFUSED-127-0-0-1-443" class="headerlink" title="ue-cli · Failed to download repo vuejs-templates&#x2F;webpack: connect ECONNREFUSED 127.0.0.1:443"></a>ue-cli · Failed to download repo vuejs-templates&#x2F;webpack: connect ECONNREFUSED 127.0.0.1:443</h3><p>创建一个新的vue项目（vue init webpack “项目名称”）时 出现以上错误提示。<br>有想过重新安装webpack，可能安装后会增加或修改一些配置信息。<br>但实际上我现在还在用webpack打包项目呢，所以问题不是在这。</p><p>与此同时ping github.com 不通，所以问题点大概是访问不了github导致的。<br>于是查阅资料，做了一些配置就能成功创建vue项目了。</p><p>当然是为了帮助访问github用的，下面就是我本次的配置方法（同时也将是访问不了github网站时的推荐方案）；</p><!--more--><p>1.点击左下角的window图标》搜索“记事本”</p><blockquote><p>这里我们不直接打开，而是：<br>右键》以管理员身份运行；<br>因为接下来我们将要修改的文件需要以管理员身份才能修改成功。</p></blockquote><p>2.点击记事本“文件”》打开</p><blockquote><p>在文件弹窗的顶部可操作文件地址框中输入：<br>C:\Windows\System32\drivers\etc<br>然后回车</p></blockquote><p>这里我的win10电脑下是空的，不着急；我们将文件弹窗右下角的选择项由“文本文档”调整为“所有文件”；发现多了包括hosts在内的几个文件；<br>如果是win7能直接看到hosts.txt文件；</p><p>3.双击hosts(.txt)，在文档的末尾添加以下内容</p><blockquote><p>192.30.255.112 github.com git<br>185.31.16.184 github.global.ssl.fastly.net </p></blockquote><p>最后保存。</p><p>接下来就是验证我们的配置是否解决了问题；</p><h2 id="在cmd中输入：ping-github-com-（OK）"><a href="#在cmd中输入：ping-github-com-（OK）" class="headerlink" title="在cmd中输入：ping github.com    （OK）"></a>在cmd中输入：ping github.com    （OK）</h2><h2 id="新建vue项目：vue-init-webpack-“项目名称”-（OK）"><a href="#新建vue项目：vue-init-webpack-“项目名称”-（OK）" class="headerlink" title="新建vue项目：vue init webpack “项目名称”  （OK）"></a>新建vue项目：vue init webpack “项目名称”  （OK）</h2>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cnpm 安装指定版本的脚手架vue-cli</title>
      <link href="/2022/10/08/vue5/"/>
      <url>/2022/10/08/vue5/</url>
      
        <content type="html"><![CDATA[<p>1.安装npm</p><p>去Node.js官网下载安装Node.js，npm也就安装上了。</p><p>2.安装国内淘宝镜像，以后就可以通过cnpm代替npm指令，使用国内源，执行效率更高：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><span id="more"></span><p>3.安装vue-cli指定的版本</p><p>（1）.查询脚手架版本列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view vue-cli versions --json</span><br></pre></td></tr></table></figure><p>（2）.安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-cli@2.9.6 --save</span><br></pre></td></tr></table></figure><h3 id="安装指定版本模块：cnpm-install-g-模块-版本号-–save"><a href="#安装指定版本模块：cnpm-install-g-模块-版本号-–save" class="headerlink" title="安装指定版本模块：cnpm install -g 模块@版本号 –save"></a>安装指定版本模块：cnpm install -g 模块@版本号 –save</h3>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli更新</title>
      <link href="/2022/10/08/vue4/"/>
      <url>/2022/10/08/vue4/</url>
      
        <content type="html"><![CDATA[<p>1.卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g  </span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">yarn global remove vue-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.安装新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">yarn global add@vue/cli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入Jquery</title>
      <link href="/2022/10/08/vue3/"/>
      <url>/2022/10/08/vue3/</url>
      
        <content type="html"><![CDATA[<p>1.首先在依赖中填写要引入jquery版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;@babel/polyfill&quot;</span>: <span class="string">&quot;^7.12.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;ant-design-vue&quot;</span>: <span class="string">&quot;^1.6.5&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;axios&quot;</span>: <span class="string">&quot;^0.20.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;^2.13.2&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;view-design&quot;</span>: <span class="string">&quot;^4.4.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;^2.5.2&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-axios&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-resource&quot;</span>: <span class="string">&quot;^1.5.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.4.7&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;wangeditor&quot;</span>: <span class="string">&quot;^4.7.10&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>  <span id="more"></span><p>  “jquery”: “^3.6.0”–这就是要引入的Jquery及版本</p><ol start="2"><li>在build文件夹下的webpack.base.conf.js文件中加入以下代码    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line"></span><br><span class="line">      jQuery: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line"></span><br><span class="line">      $: <span class="string">&quot;jquery&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在main.js中引入（全局）jquery<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import $ from <span class="string">&#x27;jquery&#x27;</span></span><br></pre></td></tr></table></figure>注意因为第二步已经使用了jquery，不需要用在main.js中 使用vue.use()，否则：</li></ol><h3 id="vue-cil-浏览器控制台报错：this-init-is-not-a-function"><a href="#vue-cil-浏览器控制台报错：this-init-is-not-a-function" class="headerlink" title="vue-cil 浏览器控制台报错：this._init is not a function"></a>vue-cil 浏览器控制台报错：this._init is not a function</h3><ol start="4"><li>最后就是运行项目。cmd里面安装依赖了：</li></ol><h3 id="npm-install-–save-jquery"><a href="#npm-install-–save-jquery" class="headerlink" title="npm install –save jquery"></a>npm install –save jquery</h3><p>如果有淘宝镜像就使用命令：</p><h3 id="cnpm-install-–save-jquery"><a href="#cnpm-install-–save-jquery" class="headerlink" title="cnpm install –save jquery"></a>cnpm install –save jquery</h3><p>至此，就可以使用jquery了，$这个符号也能被识别了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 打包后图片显示，或因为路径原因，显示白屏？</title>
      <link href="/2022/10/08/vue2/"/>
      <url>/2022/10/08/vue2/</url>
      
        <content type="html"><![CDATA[<p>打包后由于路径不对，导致资源文件加载不到，需要调整：</p><p>1.config&#x2F;index.js 修改以下两个地方</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1).</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">dev:&#123;</span><br><span class="line"></span><br><span class="line">// Paths</span><br><span class="line"></span><br><span class="line">assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line"></span><br><span class="line">// assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,/*调试*/</span><br><span class="line"></span><br><span class="line">assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,/*发布*/</span><br><span class="line"></span><br><span class="line">proxyTable: &#123;</span><br><span class="line"></span><br><span class="line">changeOrigin: <span class="literal">true</span>,/*允许跨域*/</span><br><span class="line"></span><br><span class="line">\&quot;/api\&quot;: &#123;</span><br><span class="line"></span><br><span class="line">target:\&quot;https://www.romanticlife.top\&quot;,</span><br><span class="line"></span><br><span class="line">// target:\&quot;http://localhost:8090\&quot;,</span><br><span class="line"></span><br><span class="line">secure:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">pathRewrite: &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">build: &#123;</span><br><span class="line"></span><br><span class="line">// Template <span class="keyword">for</span> index.html</span><br><span class="line"></span><br><span class="line">index: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Paths</span><br><span class="line"></span><br><span class="line">assetsRoot: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line"></span><br><span class="line">assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line"></span><br><span class="line">// assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,/*调试*/</span><br><span class="line"></span><br><span class="line">assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,/*发布*/</span><br></pre></td></tr></table></figure><p>一般来说第一步就能解决问题，如果还不行就继续以下步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2.build/webpack.prod.conf.js</span><br><span class="line">在output中添加publicPath:<span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"></span><br><span class="line">3.build/utils.js</span><br><span class="line">51行---修改为 publicPath:<span class="string">&#x27;../../&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装axios，添加拦截器</title>
      <link href="/2022/09/29/vue1/"/>
      <url>/2022/09/29/vue1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装axios"><a href="#1-安装axios" class="headerlink" title="1.安装axios"></a>1.安装axios</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h3 id="2-封装axios"><a href="#2-封装axios" class="headerlink" title="2.封装axios"></a>2.封装axios</h3><p>在src下新建文件夹：axios，添加http.js，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import axios from <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default axios</span><br><span class="line">/* post 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> post(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.post(url, data)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* get 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> get(url, params = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios</span><br><span class="line">            .get(url, &#123;</span><br><span class="line">                params: params</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;* patch 请求方法 *&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> patch(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.patch(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* put 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> put(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.put(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-从main-js引入，并加入拦截器"><a href="#3-从main-js引入，并加入拦截器" class="headerlink" title="3.从main.js引入，并加入拦截器"></a>3.从main.js引入，并加入拦截器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import http from <span class="string">&quot;./axios/http&quot;</span>//封装axios方法:post,get,patch,put</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$post</span> = http.post</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$get</span> = http.get</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$patch</span> = http.patch</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$put</span> = http.put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********配置axios--begin***********/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//基础参数</span><br><span class="line"></span><br><span class="line">Axios.create(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">timeout</span>: 1000 * 30,</span><br><span class="line"></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加请求拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.request.use(<span class="keyword">function</span> (config) &#123;</span><br><span class="line"></span><br><span class="line">  config.headers = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> config;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(error);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.response.use(<span class="keyword">function</span> (res) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res.status === 200) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res.data.code == <span class="string">&quot;5002&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">      Message(res.data.msg);</span><br><span class="line"></span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        router.push(&#123;</span><br><span class="line"></span><br><span class="line">          path: `/`,</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;, 2000);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> res;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> Message.error(res.statusText);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  const status =</span><br><span class="line"></span><br><span class="line">    (error.response &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status) ||</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  var msg = <span class="string">&#x27;未知错误&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line"></span><br><span class="line">    error.code == <span class="string">&#x27;ECONNABORTED&#x27;</span> &amp;&amp;</span><br><span class="line"></span><br><span class="line">    error.message.indexOf(<span class="string">&#x27;timeout&#x27;</span>) != -1</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;请求超时...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 404)</span><br><span class="line"></span><br><span class="line">    msg = error.response.data.path + <span class="string">&#x27; 接口404报错。&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 500)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;网络已断开或服务器错误...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 504)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;数据响应超时，请重新登录操作...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Message(msg);</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line"></span><br><span class="line">  //控制台打印错误</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(msg);</span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/***********配置axios--end***********/</span><br></pre></td></tr></table></figure><h3 id="4-调用"><a href="#4-调用" class="headerlink" title="4.调用"></a>4.调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">selectinfo</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  this.<span class="variable">$post</span>(</span><br><span class="line"></span><br><span class="line">   apiUrl,</span><br><span class="line"></span><br><span class="line">    JSON.stringify(this.selectParameters)</span><br><span class="line"></span><br><span class="line">  ).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    this.selectParameters.totalElements = res.data.data.totalElements;</span><br><span class="line"></span><br><span class="line">    this.listinfo =res.data.data.list;</span><br><span class="line"></span><br><span class="line">  &#125;).catch(err=&gt;&#123;console.log(err)&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习之路 - Processes</title>
      <link href="/2022/09/28/electron1/"/>
      <url>/2022/09/28/electron1/</url>
      
        <content type="html"><![CDATA[<h4> 阅读本文前建议先看：<a href="https://xuexiup.github.io/2022/10/13/special3/" title="" target="">基础教程</a></h4><h4> 你也可以查看：<a href="https://www.electronjs.org/zh/docs/latest/tutorial/process-model" title="" target="">官网资料</a></h4><h3 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h3><p>Electron从Chromium继承了它的多进程架构，这使得该框架在架构上非常类似于现代web浏览器。本文将扩展 <a href="https://www.romanticlife.top/blog/0/236" title="" target="">教程</a> 中应用的概念。<br>为什么不是单进程》？</p><p>Web浏览器是非常复杂的应用程序。除了显示网页内容的主要功能之外，他们还有许多次要职责，比如管理多个窗口(或标签)和加载第三方扩展。</p><p>在早期，浏览器通常使用一个进程来实现所有这些功能。虽然这种模式意味着你打开的每个标签的开销更小，但它也意味着一个网站的崩溃或挂起会影响整个浏览器。</p><span id="more"></span><h3 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h3><p>为了解决这个问题，Chrome团队决定每个标签将在自己的过程中呈现，以限制网页上的漏洞或恶意代码可能对整个应用程序造成的伤害。然后，一个单一的浏览器进程控制这些进程，以及应用程序的整个生命周期。</p><p>Electron应用的结构与此非常相似。</p><p>作为一个应用程序开发者，你控制两种类型的进程:main和renderer。</p><p>这些过程类似于Chrome自己的浏览器及其渲染过程。</p><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h3><p>每个Electron应用程序都有一个单独的主进程，它充当应用程序的入口点。主进程运行在Node.js环境中，这意味着它能够require模块并使用所有Node.js api。</p><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><p>主进程的主要目的是使用 <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" title="" target="">BrowserWindow</a> 模块创建和管理应用程序窗口。</p><p>BrowserWindow类的每个实例都会创建一个应用程序窗口，在一个单独的渲染进程中加载一个网页。你可以在主进程中使用窗口的 <a href="https://www.electronjs.org/zh/docs/latest/api/web-contents" title="" target="">webContents</a> 对象与这些web内容进行交互。</p><blockquote><p>main.js</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const &#123; BrowserWindow &#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const win = new BrowserWindow(&#123; width: 800, height: 1500 &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const contents = win.webContents</span><br><span class="line">console.log(contents)</span><br></pre></td></tr></table></figure><p>注意:渲染器进程也会为  <a href="https://www.electronjs.org/zh/docs/latest/tutorial/web-embeds" title="" target="">web embeds</a> 创建，比如BrowserView模块。webContents对象也可以访问嵌入的web内容。</p><p>因为BrowserWindow模块是一个  <a href="https://nodejs.org/api/events.html#events_class_eventemitter" title="" target="">EventEmitter</a> ，您还可以为各种用户事件添加处理程序(例如，最小化或最大化窗口)。</p><p>当BrowserWindow实例被销毁时，它对应的渲染进程也会终止。</p><h3 id="应用的声明周期"><a href="#应用的声明周期" class="headerlink" title="应用的声明周期"></a>应用的声明周期</h3><p>主进程还通过Electron的 <a href="https://www.electronjs.org/zh/docs/latest/api/app" title="" target="">app</a> 模块控制应用程序的生命周期。此模块提供了大量事件和方法，您可以使用它们来添加自定义应用程序行为(例如，以编程方式退出应用程序、修改应用程序停靠或显示关于面板)。</p><p>作为一个实际的例子，在快速入门指南中显示的应用程序使用应用程序api来创建一个更原生的应用程序窗口体验。</p><h3 id="VUE项目js-base64不兼容IE"><a href="#VUE项目js-base64不兼容IE" class="headerlink" title="VUE项目js-base64不兼容IE"></a>VUE项目js-base64不兼容IE</h3><p>一般我们直接通过指令：</p><blockquote><p>npm install –save js-base64 </p></blockquote><p>安装base64插件，但是是默认安装高版本（3或以上），它的问题就是不兼容ie11</p><p>解决办法：</p><p>1）卸载已经安装的base64插件（未安装则跳过此步）</p><blockquote><p>npm uninstall js-base64</p></blockquote><p>2）安装指定版本（安装2.x.x版本）</p><blockquote><p>npm install <a href="mailto:&#106;&#115;&#45;&#x62;&#x61;&#115;&#101;&#x36;&#x34;&#x40;&#50;&#x2e;&#54;&#46;&#50;">&#106;&#115;&#45;&#x62;&#x61;&#115;&#101;&#x36;&#x34;&#x40;&#50;&#x2e;&#54;&#46;&#50;</a> –save</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端返回的数据会带一个换行符（“↵”），前端如何根据该符号进行换行展示</title>
      <link href="/2022/09/28/html1/"/>
      <url>/2022/09/28/html1/</url>
      
        <content type="html"><![CDATA[<h3 id="方法一：textarea赋值"><a href="#方法一：textarea赋值" class="headerlink" title="方法一：textarea赋值"></a>方法一：textarea赋值</h3><p>　　当我们拿到后端返回的数据时，直接通过v-model绑定给textarea，就会有默认的换行，但是它不能随内容高度增加textarea高度实现自适应，如果用JS来实现的话，相对麻烦一点。</p><h3 id="方法二：使用v-html输出文本"><a href="#方法二：使用v-html输出文本" class="headerlink" title="方法二：使用v-html输出文本"></a>方法二：使用v-html输出文本</h3><p>　　“↵”符号在html中会识别别为\r,\n等转义字符，所以我们可以使用\r\n去替换（.replace(&#x2F;(\r\n|\n|\r)&#x2F;gm, ‘ &lt; br &#x2F;&gt; ‘)）</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &lt;span v-html=<span class="string">&quot;detail.replace(/(\r\n|\n|\r)/gm, &#x27;&lt;br /&gt;&#x27;)&quot;</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
