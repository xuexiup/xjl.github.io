<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 使用大全</title>
      <link href="/2099/12/06/hexo1/"/>
      <url>/2099/12/06/hexo1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.如何设置hexo首页只显示部分摘要而不是全部内容？</p></blockquote><h2 id="为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。"><a href="#为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。" class="headerlink" title="为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。"></a>为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。</h2><h2 id="实现的方法有两种："><a href="#实现的方法有两种：" class="headerlink" title="实现的方法有两种："></a>实现的方法有两种：</h2><h3 id="方法1：添加概述（description）-属性"><a href="#方法1：添加概述（description）-属性" class="headerlink" title="方法1：添加概述（description） 属性"></a>方法1：添加概述（description） 属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">description:  为了便于检索和页面美观，首页的文章可以显示部分或者隐藏正文内容。</span><br></pre></td></tr></table></figure><p>这种方法比较繁琐，因为这种情况下我们并不会花费太多的时间去写描述，由此会降低我们文章的质量。</p><h3 id="方法2：添加文章阶段特性"><a href="#方法2：添加文章阶段特性" class="headerlink" title="方法2：添加文章阶段特性"></a>方法2：添加文章阶段特性</h3><p>在我们需要隐藏内容的起始行添加以下内容即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>2.如何引入在线代码编辑工具codepen？</p></blockquote><h3 id="安装-codepen"><a href="#安装-codepen" class="headerlink" title="安装 codepen"></a>安装 codepen</h3><h2 id="npm-安装："><a href="#npm-安装：" class="headerlink" title="npm 安装："></a>npm 安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-codepen --save</span><br></pre></td></tr></table></figure><h2 id="yarn-安装："><a href="#yarn-安装：" class="headerlink" title="yarn 安装："></a>yarn 安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-codepen</span><br></pre></td></tr></table></figure><h3 id="md-语法结构"><a href="#md-语法结构" class="headerlink" title="md 语法结构"></a>md 语法结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125;</span><br></pre></td></tr></table></figure><p>userId：对应codepen官网注册的用户id（也可以是直接是github账号）<br>anonymous：data-slug-hash   对应codepen官网生成的示例id<br>theme：主题<br>defaultTab： 默认展示的tab，包括 html,css,result<br>height: 高<br>width： 宽<br>注意这里的宽默认百分之百，高没有默认；如果要修改宽高不要加一个%,否则有误。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen xuexiup dyegQKa dark [css,result  [265]] %&#125;</span><br></pre></td></tr></table></figure><h3 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h3><iframe id="cp_embed_dyegQKa" src="//codepen.io/xuexiup/embed/dyegQKa?height=[265]]&theme-id=dark&slug-hash=dyegQKa&default-tab=[css,result" scrolling="no" frameborder="no" height="[265]]" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="对应可直接引用的html"><a href="#对应可直接引用的html" class="headerlink" title="对应可直接引用的html"></a>对应可直接引用的html</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=<span class="string">&quot;codepen&quot;</span> data-height=<span class="string">&quot;300&quot;</span> data-default-tab=<span class="string">&quot;html,result&quot;</span> data-slug-hash=<span class="string">&quot;dyegQKa&quot;</span> data-user=<span class="string">&quot;xuexiup&quot;</span> style=<span class="string">&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;</span>&gt;</span><br><span class="line">  &lt;span&gt;See the Pen &lt;a href=<span class="string">&quot;https://codepen.io/xuexiup/pen/dyegQKa&quot;</span>&gt;</span><br><span class="line">  Untitled&lt;/a&gt; by xuexiup (&lt;a href=<span class="string">&quot;https://codepen.io/xuexiup&quot;</span>&gt;@xuexiup&lt;/a&gt;)</span><br><span class="line">  on &lt;a href=<span class="string">&quot;https://codepen.io&quot;</span>&gt;CodePen&lt;/a&gt;.&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script async src=<span class="string">&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.如何设置hexo中主题Freemind的默认的顶部目录（）？</p></blockquote><p>在配置文件：themes\freemind_config.yml中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - title: Archives</span><br><span class="line">    url: archives</span><br><span class="line">    intro: <span class="string">&quot;All the articles.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-archive&quot;</span></span><br><span class="line">  - title: Categories</span><br><span class="line">    url: categories</span><br><span class="line">    intro: <span class="string">&quot;All the categories.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-folder&quot;</span></span><br><span class="line">  - title: Tags</span><br><span class="line">    url: tags</span><br><span class="line">    intro: <span class="string">&quot;All the tags.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-tags&quot;</span></span><br><span class="line">  - title: About</span><br><span class="line">    url: about</span><br><span class="line">    intro: <span class="string">&quot;About me.&quot;</span></span><br><span class="line">    icon: <span class="string">&quot;fa fa-user&quot;</span></span><br></pre></td></tr></table></figure><p>按照对应格式配置即修改了顶部菜单内容。</p><blockquote><p>4.如何首页显示内容的条数？</p></blockquote><p>在配置文件：_config.yml中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  per_page: 5</span><br><span class="line">  order_by: -<span class="built_in">date</span></span><br></pre></td></tr></table></figure><p>per_page对应首页显示内容的条数，order_by 按照该属性排序。</p><blockquote><p>5.给文章添加评论功能？</p></blockquote><h2 id="这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）"><a href="#这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）" class="headerlink" title="这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）"></a>这里我使用的韩国的“来比力”插件，目前社区版是免费的（用于个人网站系统）</h2><h3 id="1-首先去来必力官网注册Livere账号"><a href="#1-首先去来必力官网注册Livere账号" class="headerlink" title="1.首先去来必力官网注册Livere账号"></a>1.首先去来必力官网注册Livere账号</h3><a href="https://livere.com/" title="" target="">官网传送门</a><h3 id="2-安装-社区版（一般网站）"><a href="#2-安装-社区版（一般网站）" class="headerlink" title="2.安装 社区版（一般网站）"></a>2.安装 社区版（一般网站）</h3><p>然后就会生成以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">----配置代码---</span><br><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;lv-container&quot;</span> data-id=<span class="string">&quot;city&quot;</span> data-uid=<span class="string">&quot;系统给你生成的LivereId&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   (<span class="keyword">function</span>(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (typeof LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="built_in">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span><br><span class="line">       j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, <span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">-------------------------------------</span><br></pre></td></tr></table></figure><h3 id="3-修改主题配置文件"><a href="#3-修改主题配置文件" class="headerlink" title="3.修改主题配置文件"></a>3.修改主题配置文件</h3><p>我的主题配置文件路径为：&#x2F;themes\freemind_config.yml</p><p>在最后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Livere评论系统 </span></span><br><span class="line">Livere:</span><br><span class="line">livere_uid: 系统给你生成的LivereId</span><br></pre></td></tr></table></figure><h3 id="4-在主题（theme-x2F-freemind-）中的-layout-x2F-partial-x2F-post-下新增-livere-ejs文件，内容如下："><a href="#4-在主题（theme-x2F-freemind-）中的-layout-x2F-partial-x2F-post-下新增-livere-ejs文件，内容如下：" class="headerlink" title="4.在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;post 下新增 livere.ejs文件，内容如下："></a>4.在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;post 下新增 livere.ejs文件，内容如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;lv-container&quot;</span> data-id=<span class="string">&quot;city&quot;</span> data-uid=<span class="string">&quot;&lt;%=theme.livere_uid%&gt;&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   (<span class="keyword">function</span>(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (typeof LivereTower === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="built_in">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = <span class="string">&#x27;https://cdn-city.livere.com/js/embed.dist.js&#x27;</span>;</span><br><span class="line">       j.async = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, <span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><h3 id="5-修改-article-ejs"><a href="#5-修改-article-ejs" class="headerlink" title="5.修改 article.ejs"></a>5.修改 article.ejs</h3><p>在主题（theme&#x2F;freemind ）中的 layout&#x2F;_partial&#x2F;article.ejs 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- comment --&gt;</span><br><span class="line">&lt;%- partial(<span class="string">&#x27;post/comment&#x27;</span>, &#123;page: item&#125;) %&gt;</span><br></pre></td></tr></table></figure><p>下添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="keyword">if</span> (theme.livere_uid) &#123; %&gt;</span><br><span class="line">&lt;%- partial(<span class="string">&#x27;post/livere&#x27;</span>) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="6-最后就是部署到github上"><a href="#6-最后就是部署到github上" class="headerlink" title="6.最后就是部署到github上"></a>6.最后就是部署到github上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>6.如何在 hexo 网站中引入图片</p></blockquote><h3 id="1-首先安装插件：hexo-renderer-marked"><a href="#1-首先安装插件：hexo-renderer-marked" class="headerlink" title="1.首先安装插件：hexo-renderer-marked"></a>1.首先安装插件：hexo-renderer-marked</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><h3 id="2-修改-config-yml配置文件"><a href="#2-修改-config-yml配置文件" class="headerlink" title="2.修改_config.yml配置文件"></a>2.修改_config.yml配置文件</h3><p>增加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br><span class="line">  </span><br></pre></td></tr></table></figure>  <h3 id="3-在项目根据路source文件夹下新建一个文件夹：img"><a href="#3-在项目根据路source文件夹下新建一个文件夹：img" class="headerlink" title="3.在项目根据路source文件夹下新建一个文件夹：img"></a>3.在项目根据路source文件夹下新建一个文件夹：img</h3><p>这个文件夹存图片资源；比如我这里放了一个theme.gif的动态图；</p><h3 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4.使用方法"></a>4.使用方法</h3><h2 id="记住我的路径的使用方式相对路径（相对路径）；"><a href="#记住我的路径的使用方式相对路径（相对路径）；" class="headerlink" title="记住我的路径的使用方式相对路径（相对路径）；"></a>记住我的路径的使用方式相对路径（相对路径）；</h2><h2 id="以下这种引入图片的-方式也可以修改图片的样式。"><a href="#以下这种引入图片的-方式也可以修改图片的样式。" class="headerlink" title="以下这种引入图片的 方式也可以修改图片的样式。"></a>以下这种引入图片的 方式也可以修改图片的样式。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;/img/theme.gif&quot;</span>&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure><blockquote><p>7.Hexo网站如何添加ico图标？</p></blockquote><h3 id="1-将图标放置在根目录：source-img-下"><a href="#1-将图标放置在根目录：source-img-下" class="headerlink" title="1.将图标放置在根目录：source\img 下"></a>1.将图标放置在根目录：source\img 下</h3><h3 id="2-修改根目录下-themes-freemind-layout-partial-head-ejs-内容"><a href="#2-修改根目录下-themes-freemind-layout-partial-head-ejs-内容" class="headerlink" title="2.修改根目录下 themes\freemind\layout_partial\head.ejs 内容"></a>2.修改根目录下 themes\freemind\layout_partial\head.ejs 内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.favicon)&#123; %&gt;</span><br><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;icon&quot;</span> href=<span class="string">&quot;/img/favicon.ico&quot;</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Freemind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基本元素</title>
      <link href="/2022/10/13/html7/"/>
      <url>/2022/10/13/html7/</url>
      
        <content type="html"><![CDATA[<h3 id="New-HTML5-新属性："><a href="#New-HTML5-新属性：" class="headerlink" title="New : HTML5 新属性："></a>New : HTML5 新属性：</h3><blockquote><p>accesskey 设置访问元素的键盘快捷键。</p><p>class 规定元素的类名（classname）</p><p>contenteditableNew 规定是否可编辑元素的内容。</p><p>contextmenuNew 指定一个元素的上下文菜单。当用户右击该元素，出   现上下文菜单 </p><p>data-*New 用于存储页面的自定义数据</p><p>dir 设置元素中内容的文本方向。</p><p>draggableNew 指定某个元素是否可以拖动</p><p>dropzoneNew 指定是否将数据复制，移动，或链接，或删除</p><p>hiddenNew hidden 属性规定对元素进行隐藏。</p><p>id 规定元素的唯一 id</p><p>lang 设置元素中内容的语言代码。</p><p>spellcheckNew 检测元素是否拼写错误</p><p>style 规定元素的行内样式（inline style）</p><p>tabindex 设置元素的 Tab 键控制次序。</p><p>title 规定元素的额外信息（可在工具提示中显示）</p><p>translateNew 指定是否一个元素的值在页面载入时是否需要翻译 </p></blockquote><span id="more"></span><h3 id="窗口事件属性（Window-Event-Attributes）-由窗口触发该事件-适用于-body-标签"><a href="#窗口事件属性（Window-Event-Attributes）-由窗口触发该事件-适用于-body-标签" class="headerlink" title="窗口事件属性（Window Event Attributes） 由窗口触发该事件 (适用于 body 标签):"></a>窗口事件属性（Window Event Attributes） 由窗口触发该事件 (适用于 body 标签):</h3><blockquote><p>onafterprintNew script 在打印文档之后运行脚本 </p><p>onbeforeprintNew script 在文档打印之前运行脚本 </p><p>onbeforeonloadNew script 在文档加载之前运行脚本 </p><p>onblur script 当窗口失去焦点时运行脚本 </p><p>onerrorNew script 当错误发生时运行脚本 </p><p>onfocus script 当窗口获得焦点时运行脚本 </p><p>onhaschangeNew script 当文档改变时运行脚本 </p><p>onload script 当文档加载时运行脚本</p><p>onmessageNew script 当触发消息时运行脚本 </p><p>onofflineNew script 当文档离线时运行脚本 </p><p>ononlineNew script 当文档上线时运行脚本 </p><p>onpagehideNew script 当窗口隐藏时运行脚本 </p><p>onpageshowNew script 当窗口可见时运行脚本 </p><p>onpopstateNew script 当窗口历史记录改变时运行脚本 </p><p>onredoNew script 当文档执行再执行操作（redo）时运行脚本</p><p>onresizeNew script 当调整窗口大小时运行脚本 </p><p>onstorageNew script 当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本 </p><p>onundoNew script 当文档执行撤销时运行脚本 </p><p>onunloadNew script 当用户离开文档时运行脚本 </p></blockquote><h3 id="表单事件-Form-Events-表单事件在HTML表单中触发-适用于所有-HTML-元素-但该HTML元素需在form表单内"><a href="#表单事件-Form-Events-表单事件在HTML表单中触发-适用于所有-HTML-元素-但该HTML元素需在form表单内" class="headerlink" title="表单事件(Form Events) 表单事件在HTML表单中触发 (适用于所有 HTML 元素, 但该HTML元素需在form表单内):"></a>表单事件(Form Events) 表单事件在HTML表单中触发 (适用于所有 HTML 元素, 但该HTML元素需在form表单内):</h3><blockquote><p>onblur script 当元素失去焦点时运行脚本</p><p>onchange script 当元素改变时运行脚本</p><p>oncontextmenuNew script 当触发上下文菜单时运行脚本</p><p>onfocus script 当元素获得焦点时运行脚本 </p><p>onformchangeNew script 当表单改变时运行脚本 </p><p>onforminputNew script 当表单获得用户输入时运行脚本 </p><p>oninputNew script 当元素获得用户输入时运行脚本 </p><p>oninvalidNew script 当元素无效时运行脚本 </p><p>onreset script 当表单重置时运行脚本。HTML 5 不支持。 </p><p>onselect script 当选取元素时运行脚本 </p><p>onsubmit script 当提交表单时运行脚本 </p></blockquote><h3 id="键盘事件（Keyboard-Events）"><a href="#键盘事件（Keyboard-Events）" class="headerlink" title="键盘事件（Keyboard Events）"></a>键盘事件（Keyboard Events）</h3><blockquote><p>onkeydown script 当按下按键时运行脚本 </p><p>onkeypress script 当按下并松开按键时运行脚本 </p><p>onkeyup script 当松开按键时运行脚本</p></blockquote><h3 id="鼠标事件（Mouse-Events）-通过鼠标触发事件-类似用户的行为-属性"><a href="#鼠标事件（Mouse-Events）-通过鼠标触发事件-类似用户的行为-属性" class="headerlink" title="鼠标事件（Mouse Events） 通过鼠标触发事件, 类似用户的行为: 属性"></a>鼠标事件（Mouse Events） 通过鼠标触发事件, 类似用户的行为: 属性</h3><blockquote><p>onclick script 当单击鼠标时运行脚本 </p><p>ondblclick script 当双击鼠标时运行脚本 </p><p>ondragNew script 当拖动元素时运行脚本 </p><p>ondragendNew script 当拖动操作结束时运行脚本 </p><p>ondragenterNew script 当元素被拖动至有效的拖放目标时运行脚本</p><p>ondragleaveNew script 当元素离开有效拖放目标时运行脚本</p><p>ondragoverNew script 当元素被拖动至有效拖放目标上方时运行脚本</p><p>ondragstartNew script 当拖动操作开始时运行脚本 </p><p>ondropNew script 当被拖动元素正在被拖放时运行脚本 </p><p>onmousedown script 当按下鼠标按钮时运行脚本 </p><p>onmousemove script 当鼠标指针移动时运行脚本 </p><p>onmouseout script 当鼠标指针移出元素时运行脚本 </p><p>onmouseover script 当鼠标指针移至元素之上时运行脚本 </p><p>onmouseup script 当松开鼠标按钮时运行脚本 </p><p>onmousewheelNew script 当转动鼠标滚轮时运行脚本 </p><p>onscrollNew script 当滚动元素的滚动条时运行脚本 </p></blockquote><h3 id="多媒体事件-Media-Events-通过视频（videos），图像（images）或者音频（audio）-触发该事件，多应用于HTML媒体元素比如-audio-embed-img-object-和video-："><a href="#多媒体事件-Media-Events-通过视频（videos），图像（images）或者音频（audio）-触发该事件，多应用于HTML媒体元素比如-audio-embed-img-object-和video-：" class="headerlink" title="多媒体事件(Media Events) 通过视频（videos），图像（images）或者音频（audio） 触发该事件，多应用于HTML媒体元素比如 audio, embed, img, object, 和video)："></a>多媒体事件(Media Events) 通过视频（videos），图像（images）或者音频（audio） 触发该事件，多应用于HTML媒体元素比如 audio, embed, img, object, 和video)：</h3><blockquote><p>onabort script 当发生中止事件时运行脚本 </p><p>oncanplayNew script 当媒介能够开始播放但可能因缓冲而需要停止时运行脚本 </p><p>oncanplaythroughNew script 当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本 </p><p>ondurationchangeNew script 当媒介长度改变时运行脚本</p><p>onemptiedNew script 当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本 </p><p>onendedNew script 当媒介已抵达结尾时运行脚本 </p><p>onerrorNew script 当在元素加载期间发生错误时运行脚本</p><p>onloadeddataNew script 当加载媒介数据时运行脚本</p><p>onloadedmetadataNew script 当媒介元素的持续时间以及其他媒介数据已加载时运行脚本 </p><p>onloadstartNew script 当浏览器开始加载媒介数据时运行脚本 onpauseNew script 当媒介数据暂停时运行脚本 </p><p>onplayNew script 当媒介数据将要开始播放时运行脚本 </p><p>onplayingNew script 当媒介数据已开始播放时运行脚本 </p><p>onprogressNew script 当浏览器正在取媒介数据时运行脚本</p><p>onratechangeNew script 当媒介数据的播放速率改变时运行脚本</p><p>onreadystatechangeNew script 当就绪状态（ready-state）改变时运行脚本</p><p>onseekedNew script 当媒介元素的定位属性 [1] 不再为真且定位已结束时运行脚本 </p><p>onseekingNew script 当媒介元素的定位属性为真且定位已开始时运行脚本 </p><p>onstalledNew script 当取回媒介数据过程中（延迟）存在错误时运行脚本 </p><p>onsuspendNew script 当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本 </p><p>ontimeupdateNew script 当媒介改变其播放位置时运行脚本</p><p>onvolumechangeNew script 当媒介改变音量亦或当音量被设置为静音时运行脚本 </p><p>onwaitingNew script 当媒介已停止播放但打算继续播放时运行脚本 </p></blockquote><h3 id="其他事件："><a href="#其他事件：" class="headerlink" title="其他事件："></a>其他事件：</h3><blockquote><p>onshowNew script 当 menu 元素在上下文显示时触发</p><p>ontoggleNew script 当用户打开或关闭 details 元素时触发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glyphicon和font awesome字体图标的混合使用导致样式混乱</title>
      <link href="/2022/10/13/html6/"/>
      <url>/2022/10/13/html6/</url>
      
        <content type="html"><![CDATA[<p>原则上字体文件的混合使用不会出现混乱，或页面出现乱码标识，框框等问题，如果出现了这种问题，可以从以下几种方式去排查。</p><blockquote><p>1).对应css文件引用路径不对<br>2).只是引用了css，却没有添加对应的fonts文件夹【字体文件】<br>3). css文件与字体文件的相对路径不对<br>4).网站中自定义了全局 font,或font-family 导致 字体文件显示不出来</p></blockquote><span id="more"></span><p>比较常见的问题就是前3个问题，最后一个坑可能有些时候会碰到，这个时候我们需要：</p><blockquote><p>将css文件中对应的font-family 加个 ！important,提高其作用级。</p></blockquote><p>例如。将font-awesome.css中 .fa下的font 或 bootstrap.cs中类<br>glyphicon下的 font-family 添加 ！important 这样可以解决 4)引起的问题，当然这里要确保字体文件的</p><blockquote><p>！important 在自定义（全局）font字体属性之后。</p><p>使用方法：<br>glyphicon————-gylphicon glyphicon-search[放大镜]<br>font awesome——–fa fa-book fa-2x[2倍大小的 书 ]</p><p>详细可看官网一手资料。</p></blockquote><p>这里注意的是使用字体文件时我们不需要安装fonts文件夹下的字体文件，是可以正常使用。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5的主要功能构成</title>
      <link href="/2022/10/13/html5/"/>
      <url>/2022/10/13/html5/</url>
      
        <content type="html"><![CDATA[<p>HTML5主要以下功能构成：</p><blockquote><p>Canvas (2D和3D)<br>Channel消息传送<br>Cross- document消息传送<br>Geolocation<br>MathML<br>Microdata<br>Server-Sent Events<br>Scalable Vector Graphics (SVG)<br>WebSocket API及协议<br>Web Origin Concept<br>Web Storage<br>Web SQL database<br>Web Workers<br>XMLHttpRequest Level 2</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式导航</title>
      <link href="/2022/10/13/html4/"/>
      <url>/2022/10/13/html4/</url>
      
        <content type="html"><![CDATA[<p>以下是实现HTML5响应式导航的一个示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;title&gt;响应式导航&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .topnav &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            background-color: <span class="comment">#333;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            .topnav a &#123;</span><br><span class="line">                <span class="built_in">float</span>: left;</span><br><span class="line">                display: block;</span><br><span class="line">                color: <span class="comment">#f2f2f2;</span></span><br><span class="line">                text-align: center;</span><br><span class="line">                padding: 14px 16px;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">                font-size: 17px;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                .topnav a:hover &#123;</span><br><span class="line">                    background-color: <span class="comment">#ddd;</span></span><br><span class="line">                    color: black;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            .topnav .icon &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        @media screen and (max-width: 600px) &#123;</span><br><span class="line">            .topnav a:not(:first-child) &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .topnav a.icon &#123;</span><br><span class="line">                <span class="built_in">float</span>: right;</span><br><span class="line">                display: block;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            .container &#123;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            .bar1, .bar2, .bar3 &#123;</span><br><span class="line">                width: 35px;</span><br><span class="line">                height: 5px;</span><br><span class="line">                background-color: <span class="comment">#333;</span></span><br><span class="line">                margin: 6px 0;</span><br><span class="line">                transition: 0.4s;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar1 &#123;</span><br><span class="line">                -webkit-transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">                transform: rotate(-45deg) translate(-9px, 6px);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar2 &#123;</span><br><span class="line">                opacity: 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .change .bar3 &#123;</span><br><span class="line">                -webkit-transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">                transform: rotate(45deg) translate(-8px, -8px);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @media screen and (max-width: 600px) &#123;</span><br><span class="line">            .topnav.responsive &#123;</span><br><span class="line">                position: relative;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                .topnav.responsive .icon &#123;</span><br><span class="line">                    position: absolute;</span><br><span class="line">                    right: 0;</span><br><span class="line">                    top: 0;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                .topnav.responsive a &#123;</span><br><span class="line">                    <span class="built_in">float</span>: none;</span><br><span class="line">                    display: block;</span><br><span class="line">                    text-align: left;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> myFunction(iconid) &#123;</span><br><span class="line">            iconid.classList.toggle(<span class="string">&quot;change&quot;</span>);</span><br><span class="line">            var x = document.getElementById(<span class="string">&quot;myTopnav&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (x.className === <span class="string">&quot;topnav&quot;</span>) &#123;</span><br><span class="line">                x.className += <span class="string">&quot; responsive&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x.className = <span class="string">&quot;topnav&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;topnav&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;myTopnav&quot;</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#home&quot;</span>&gt;主页&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#news&quot;</span>&gt;新闻中心&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#contact&quot;</span>&gt;联系我们&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;#about&quot;</span>&gt;关于&lt;/a&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;javascript:void(0);&quot;</span> style=<span class="string">&quot;font-size:15px;&quot;</span> class=<span class="string">&quot;icon&quot;</span>&gt;</span><br><span class="line">            &lt;!--&amp;<span class="comment">#9776;--&gt;</span></span><br><span class="line">            &lt;div class=<span class="string">&quot;container&quot;</span> onclick=<span class="string">&quot;myFunction(this)&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;bar3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;padding-left:16px&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;内容&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径中的点“./”、“../”、“/”代表的含义</title>
      <link href="/2022/10/13/html3/"/>
      <url>/2022/10/13/html3/</url>
      
        <content type="html"><![CDATA[<p>.&#x2F; 代表当前目录</p><p>..&#x2F; 代表上一层目录</p><p>&#x2F; 代表根目录</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Abp生成模板项目</title>
      <link href="/2022/10/13/special4/"/>
      <url>/2022/10/13/special4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-通过官网选择前后端语言，这里我后台语言选的是“ASP-NET-Core”-前端语言选的是“Vue-js”"><a href="#1-通过官网选择前后端语言，这里我后台语言选的是“ASP-NET-Core”-前端语言选的是“Vue-js”" class="headerlink" title="1.通过官网选择前后端语言，这里我后台语言选的是“ASP.NET Core”,前端语言选的是“Vue.js”"></a>1.通过官网选择前后端语言，这里我后台语言选的是“ASP.NET Core”,前端语言选的是“Vue.js”</h3><h3 id="2-在“Choose-your-project’s-name”栏输入项目名；“邮箱”选填可不填。"><a href="#2-在“Choose-your-project’s-name”栏输入项目名；“邮箱”选填可不填。" class="headerlink" title="2.在“Choose your project’s name”栏输入项目名；“邮箱”选填可不填。"></a>2.在“Choose your project’s name”栏输入项目名；“邮箱”选填可不填。</h3><h3 id="3-点击“Create-my-project-”便可生出abp模板项目后下载。"><a href="#3-点击“Create-my-project-”便可生出abp模板项目后下载。" class="headerlink" title="3.点击“Create my project!”便可生出abp模板项目后下载。"></a>3.点击“Create my project!”便可生出abp模板项目后下载。</h3><h3 id="4-打开生成的文件夹，有个版本号（我这里是6-5-0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。"><a href="#4-打开生成的文件夹，有个版本号（我这里是6-5-0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。" class="headerlink" title="4.打开生成的文件夹，有个版本号（我这里是6.5.0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。"></a>4.打开生成的文件夹，有个版本号（我这里是6.5.0）的文件夹，里面的文件夹“aspnet-core”也就是后台项目，可通过vs打开开发；而“vue”文件夹就是前端项目源文件，可通过vscode或Hbuilder等软件开发。</h3><p>后台项目文件夹各项目的主要作用：</p><blockquote><p>src路径下<br>.Application：应用服务层<br>.Core：领域层<br>.EntityFrameworkCore：基础层<br>.Migrator：abp数据库迁移项目<br>.Web.Core、.Web.Host：展现层<br>test路径下<br>.Tests：单元测试</p></blockquote><span id="more"></span><h3 id="5-生成数据库，让后台服务运行起来："><a href="#5-生成数据库，让后台服务运行起来：" class="headerlink" title="5.生成数据库，让后台服务运行起来："></a>5.生成数据库，让后台服务运行起来：</h3><h2 id="1）用vs2019（或其它版本的vs软件）打开后台项目；"><a href="#1）用vs2019（或其它版本的vs软件）打开后台项目；" class="headerlink" title="1）用vs2019（或其它版本的vs软件）打开后台项目；"></a>1）用vs2019（或其它版本的vs软件）打开后台项目；</h2><h2 id="2）在解决方案名上点击右键，然后点击执行：还原NuGet包"><a href="#2）在解决方案名上点击右键，然后点击执行：还原NuGet包" class="headerlink" title="2）在解决方案名上点击右键，然后点击执行：还原NuGet包"></a>2）在解决方案名上点击右键，然后点击执行：还原NuGet包</h2><h2 id="3）删除-EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）"><a href="#3）删除-EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）" class="headerlink" title="3）删除.EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）"></a>3）删除.EntityFrameworkCore下的Migrations默认的所有文件（数据库历史配置记录文件，这里后续重新生成我们需要的配置。）</h2><h2 id="4）在-Web-Host项目下修改appsettings-json中一下内容："><a href="#4）在-Web-Host项目下修改appsettings-json中一下内容：" class="headerlink" title="4）在.Web.Host项目下修改appsettings.json中一下内容："></a>4）在.Web.Host项目下修改appsettings.json中一下内容：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">//<span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Server=localhost; Database=abpblogDb; Trusted_Connection=True;&quot;</span></span><br><span class="line"><span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Data Source=localhost;Initial Catalog=abpBlogDb;user=dcxz2017;password=qqq;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当然这里的数据库连接配置，需要修改成你想要的信息。</p><h2 id="5）打开程序包管理器控制台（工具》NuGet-包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意："><a href="#5）打开程序包管理器控制台（工具》NuGet-包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意：" class="headerlink" title="5）打开程序包管理器控制台（工具》NuGet 包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意："></a>5）打开程序包管理器控制台（工具》NuGet 包管理器》程序包管理器控制台），输入数据库迁移命令前需要注意：</h2><blockquote><p>a.设置启动项目：在网站项目（这里是.Web.Host）上右键》设为启动项目<br>b.程序包管理器控制台：选择默认项目为刚刚删除数据库历史配置文件的那个项目（这里为：.EntityFrameworkCore）</p></blockquote><p>然后依次执行以下命令：</p><blockquote><p>（1）新增数据迁移执行命令：Add-Migration first_init</p><p>（2）执行更新数据库命令：Update-Database</p></blockquote><p>执行完后，数据库中就生成了相应的数据库表信息。</p><p>这时候就可启动后台服务项目了（一个swagger接口可视化的网站）。</p><h3 id="6-启动前端项目"><a href="#6-启动前端项目" class="headerlink" title="6.启动前端项目"></a>6.启动前端项目</h3><p>在vue文件夹下打开cmd依次执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br><span class="line"></span><br><span class="line">yarn serve --open</span><br></pre></td></tr></table></figure><p>如果是npm则依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如果启动后出现控制台提示跨域的错误则在appsettings.json中节点App的“CorsOrigins”属性中添加对应可跨域的服务网址，例如本项目是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&quot;App&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;ServerRootAddress&quot;</span>: <span class="string">&quot;https://localhost:44311/&quot;</span>,</span><br><span class="line"><span class="string">&quot;ClientRootAddress&quot;</span>: <span class="string">&quot;http://localhost:4200/&quot;</span>,</span><br><span class="line"><span class="string">&quot;CorsOrigins&quot;</span>: <span class="string">&quot;http://localhost:4200,http://localhost:8080,http://localhost:8081,http://localhost:3000&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>默认的账号密码：admin&#x2F;123qwe</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Abp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sessionStorage和localStorage的区别与用法</title>
      <link href="/2022/10/13/html2/"/>
      <url>/2022/10/13/html2/</url>
      
        <content type="html"><![CDATA[<p>二者都是用于浏览器存储，多用于用来存储网站一些需要页面交互的隐秘信息。<br>当然主流浏览器和高版本的IE浏览器是支持这两种用法的，为了代码的严谨性我们可以加一个判断：</p><pre><code class="bash"> if (!window.sessionStorage) &#123;              this.$message(&quot;浏览器不支持sessionStorage，请联系管理员解决&quot;);            &#125;</code></pre><span id="more"></span><h2 id="1）sesstionStorage-临时存储-在浏览器打开期间存在-用来储存数据的-存储量小存储数据，浏览器关闭后存储信息才清除："><a href="#1）sesstionStorage-临时存储-在浏览器打开期间存在-用来储存数据的-存储量小存储数据，浏览器关闭后存储信息才清除：" class="headerlink" title="1）sesstionStorage(临时存储): 在浏览器打开期间存在, 用来储存数据的,存储量小存储数据，浏览器关闭后存储信息才清除："></a>1）sesstionStorage(临时存储): 在浏览器打开期间存在, 用来储存数据的,存储量小存储数据，浏览器关闭后存储信息才清除：</h2><blockquote><p>sessionStorage.setItem(‘key’, ‘需要存储的值’);&#x2F;&#x2F;存</p><p>sessionStorage.getItem(‘key’));&#x2F;&#x2F;取</p><p>sessionStorage.removeItem(‘key’);&#x2F;&#x2F;删除指定key信息</p><p>sessionStorage.clear();&#x2F;&#x2F;删除所有存储信息</p></blockquote><p>　</p><h2 id="2）localStorage-长期存储-用来储存数据的-数据在浏览器关闭依然存在-存储量更大，其存取与删除方式与sessionStorage类似"><a href="#2）localStorage-长期存储-用来储存数据的-数据在浏览器关闭依然存在-存储量更大，其存取与删除方式与sessionStorage类似" class="headerlink" title="2）localStorage(长期存储): 用来储存数据的,数据在浏览器关闭依然存在,存储量更大，其存取与删除方式与sessionStorage类似"></a>2）localStorage(长期存储): 用来储存数据的,数据在浏览器关闭依然存在,存储量更大，其存取与删除方式与sessionStorage类似</h2><blockquote><p>localStorage.setItem(‘key’,  ‘需要存储的值’);&#x2F;&#x2F;存<br>localStorage.getItem(‘key’);&#x2F;&#x2F;取<br>localStorage.removeItem(‘key’);&#x2F;&#x2F;删除指定key信息<br>localStorage.clear();&#x2F;&#x2F;删除所有本地存储信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙箱环境（sandbox environment）</title>
      <link href="/2022/10/13/terminology/"/>
      <url>/2022/10/13/terminology/</url>
      
        <content type="html"><![CDATA[<p>沙箱环境<br>Sandbo(又叫沙箱、沙盘、沙盒)环境，即是一个虚拟系统程序，允许你在沙盘环境中运行浏览器或其他程序，因此运行所产生的变化可以随后删除。</p><span id="more"></span><p>它创造了一个类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。其为一个独立的虚拟环境，可以用来测试不受信任的应用程序或上网行为。</p><p>沙箱早期主要用于测试可疑软件等，比如黑客们为了试用某种病毒或者不安全产品，往往可以将它们在沙箱环境中运行。经典的沙箱系统的实现途径一般是通过拦截系统调用，监视程序行为，然后依据用户定义的策略来控制和限制程序对计算机资源的使用，比如改写注册表，读写磁盘等。</p><p>沙盒测试<br>沙盒测试就是在产品未上线前在内部环境或网络下进行的测试，此时在正常的线上环境是无法看到或查询到该产品或项目的，只有产品在测试环境下无问题上传到生产环境之后，用户才能看到该产品或功能</p>]]></content>
      
      
      <categories>
          
          <category> 百科知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习之路 -基础教程篇</title>
      <link href="/2022/10/13/special3/"/>
      <url>/2022/10/13/special3/</url>
      
        <content type="html"><![CDATA[<p>以下内容是根据 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-prerequisites" title="" target="">官网</a> 资料和自己实践整理（查阅资料）所得；</p><blockquote><p>根据官网说明：Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。</p></blockquote><span id="more"></span><h3 id="创建第一个Electron应用程序"><a href="#创建第一个Electron应用程序" class="headerlink" title="创建第一个Electron应用程序"></a>创建第一个Electron应用程序</h3><h2 id="简介》"><a href="#简介》" class="headerlink" title="简介》"></a>简介》</h2><p>Electron应用程序是使用npm包建立的。Electron可执行文件应该安装在项目的devDependencies中，并且可以使用package.json文件中中的脚本在开发模式下运行。</p><p>可执行文件运行package.json的main属性中的JavaScript入口点。这个文件控制着Electron的主进程，它运行着Node.js的一个实例，负责应用的生命周期，显示本地接口，执行特权操作，以及管理渲染进程。</p><p>渲染进程(或简称渲染器)负责显示图形内容。您可以通过将网页指向一个web地址或一个本地HTML文件来将网页加载到渲染器中。渲染器的行为与普通网页非常相似，并且可以访问相同的web api。</p><h2 id="学前需知》"><a href="#学前需知》" class="headerlink" title="学前需知》"></a>学前需知》</h2><p>通过将Chromium和Node.js嵌入到一个二进制文件中，Electron允许您使用一个JavaScript代码库创建在Windows、macOS和Linux上运行的跨平台应用程序。</p><p>Electron是一个原生的web应用包装层，运行在Node.js环境中，因此在进入学习之前需要熟悉Node和前端web开发基础知识：</p><p><a href="https://developer.mozilla.org/en-US/docs/Learn" title="" target="">Getting started with the Web (MDN Web Docs)</a> </p><p><a href="https://nodejs.dev/learn" title="" target="">NodeJS官方入门指南</a></p><h2 id="与其它桌面程序应用框架的对比》"><a href="#与其它桌面程序应用框架的对比》" class="headerlink" title="与其它桌面程序应用框架的对比》"></a>与其它桌面程序应用框架的对比》</h2><p>同样是做桌面应用程序的框架，那么它和传统的Winform和WPF又有什么区别呢？</p><p>Winform：上手容易，技术老套，性能一般，常用组件库DevExpress,SunnyUI，适合对性能要求不高的项目</p><p>WPF：性能高，可以做炫酷的效果，上手进阶难，适合大型的桌面应用程序</p><p>Electron：对前端技术人员比较友好，相当于在网页上套了一层壳，可以打包成exe程序，只是打包后比较臃肿，性能堪忧，不过上手容易，方法都是封装好了的，根据官方可以快速构建一个桌面应用程序。</p><p>当然基于c++ 开发的QT框架也能做出漂亮的桌面应用程序。</p><p>所以这么看来Eelectron也是挺有优势的，因为是基于web开发来实现跨平台的桌面应用程序，对于如今广大的前端开发用户还是很友好的，当然其性能和对内存的处理以及打包文件的处理是不够好的。</p><h2 id="开发工具》"><a href="#开发工具》" class="headerlink" title="开发工具》"></a>开发工具》</h2><p>这里我使用的是：<a href="https://code.visualstudio.com/" title="" target="">Visual Studio Code</a></p><p>这个软件也是基于Electron开发出来的。</p><h2 id="创建项目》"><a href="#创建项目》" class="headerlink" title="创建项目》"></a>创建项目》</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-electron-app &amp;&amp; <span class="built_in">cd</span> my-electron-app</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p>使用方式：<br>这里我是在E盘（你自己的项目存放位置）下的文件搜索框内容输入cmd，<br>这样打开命令提示符号终端窗口，然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-electron-app &amp;&amp; <span class="built_in">cd</span> my-electron-app</span><br></pre></td></tr></table></figure><p>回车</p><p>这样就会在E盘下生成 my-electron-app 这个文件夹，并且指令进入此文件夹</p><p>接着使用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>这样就是初始化创建了项目的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br></pre></td></tr></table></figure><p>当然了如果使用了淘宝镜像，可以使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init </span><br></pre></td></tr></table></figure><p>来替换 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="Electron的安装》"><a href="#Electron的安装》" class="headerlink" title="Electron的安装》"></a>Electron的安装》</h2><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure><p>执行以上命令：在初始化包并安装Electron之后，package.json文件应该如下所示。同时文件夹下还生成了node_modules文件夹，其中包含Electron可执行文件，以及一个包锁：.package-lock.json来指定要安装的确切依赖版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;electron progroam&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;zl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^20.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上文件（package.json）中的main对应的脚本文件(这里是main.js）<br>它是Electron应用程序的入口。这个脚本控制主进程，它运行在Node.js环境中，负责控制应用的生命周期，显示本机接口，执行特权操作，以及管理渲染进程(后面会详细介绍)。<br>这里的main.js是我们在创建应用的时候自己命名的，但是框架并没有为我们生成这个js文件，所以我们需要在根目录下自己去手动生成，以此来保证配置正确运行。这里我们将main.js中的内容设置简单点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">&#x27;hello Electron!&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="程序启动配置》"><a href="#程序启动配置》" class="headerlink" title="程序启动配置》"></a>程序启动配置》</h2><p>由于Electron的主进程是在Node.js中运行的，所以您可以使用Electron命令执行任意Node.js代码(甚至可以将其用作REPL)。<br>要执行这个脚本，就需要需要添加“electron .”到package.json的scripts字段中的start指令中。这个指令将告诉Electron可执行文件在当前目录中查找主脚本，并在dev模式中运行它。这样package.json内容如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;my-electron-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;electron progroam&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;start&quot;:&quot;electron .&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;zl&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;electron&quot;: &quot;^20.0.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>      <p>配置完start指令后，通过在终端（cmd）运行指令 npm run start便会在终端打印出“hello Electron!”。<br>当然这只是在Electron中执行了打印文字的脚本，接下来将学习如何使用HTML创建用户界面并将其加载到本地窗口中。<br>上面我们实现了通过在终端运行Electron指令–执行入口文件main.js</p><p>功能：打印文字；</p><p>接下来我们将学习如何在BrowserWindow中加载网页。</p><p>根据官网介绍：</p><blockquote><p>In Electron, each window displays a web page that can be loaded either from a local HTML file or a remote web address.<br>在Electron中，每个窗口都显示一个可以从本地HTML文件或远程web地址加载的网页。</p></blockquote><p>也就是Electron应用程序窗口可以显示本项目中的.html文件，也可以通过加载网站网络地址来实现网页的呈现。<br>如果是加载网站的url来实现网页的呈现，这种方式就相当于我们把网站开发好了，发布到外网上。然后在Electron中加载进来就可以了，相当于给网站外加了个一个浏览器的壳，这样对前端开发人员来说是相当友好滴。</p><h3 id="接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。"><a href="#接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。" class="headerlink" title="接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。"></a>接下来将介绍如何在Electron框架下的BrowserWindow中加载本地html文件以及已发布网站地址。</h3><h2 id="1）在BrowserWindow中加载本地（本项目）html文件"><a href="#1）在BrowserWindow中加载本地（本项目）html文件" class="headerlink" title="1）在BrowserWindow中加载本地（本项目）html文件"></a>1）在BrowserWindow中加载本地（本项目）html文件</h2><p>我们在根目录下创建一个名为index.html的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>那么我们如何将这个网页加载到Electron的浏览器窗口（BrowserWindow）中去呢？<br>前面我们已经了解到了，package.json配置文件中的main对应的是整个Electron程序的入口文件（这里是：main.js）。<br>这样我们需要将main.js中的内容修改为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>让我们看看以上配置内容的语义。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br></pre></td></tr></table></figure><p>以上配置用CommonJS模块语法导入了两个Electron模块：</p><blockquote><p>app：控制整个应用程序事件的声明周期</p><p>BrowserWindow：创建和管理应用程序的窗口</p></blockquote><p>这里我们可能已经注意到模块名称的大小写并不是使用统一的规则，这里面是有它自己的规则的，根据官网说明：</p><blockquote><p>Electron在这里遵循典型的JavaScript约定，其中PascalCase模块是可实例化的类构造函数(如BrowserWindow, Tray, Notification)，而camelCase模块是不可实例化的(如app, ipcreender, webContents)。</p></blockquote><p>需要注意的是：目前Electron不直接支持ECMAScript模块(即使用import来加载模块)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置表示：通过函数createWindow()加载你的网页到一个新的BrowserWindow实例；<br>也就是说窗口BrowserWindow可以被我们重写的，这样我们可以控制它的大小、显示的位置、是否显示自带的辅助功能菜单（File、Edit、View、Window、Help）以及是否显示最小化，最大化和关闭图标等功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上配置表示：应用程序执行时候就调用我们定义的函数createWindow()（重写BrowserWindow）<br>Electron的许多核心模块都是Node.js事件触发器，它们遵循Node的异步事件驱动架构。app模块就是其中一个发射器。</p><p>在Electron中，BrowserWindows只能在app模块的ready事件触发后创建。<br>你可以通过使用app.whenReady() API以及等这个事件的promise执行完后来回调createWindow()</p><h2 id="2）在BrowserWindow中加载网站网络URL来实现网页的呈现"><a href="#2）在BrowserWindow中加载网站网络URL来实现网页的呈现" class="headerlink" title="2）在BrowserWindow中加载网站网络URL来实现网页的呈现"></a>2）在BrowserWindow中加载网站网络URL来实现网页的呈现</h2><p>在以上内容的基础上，我们只需要将配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.loadURL(<span class="string">&#x27;https://www.romanticlife.top&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样就可以在BrowserWindow调用已发布的网站（本博客）<br>现在我们执行指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>此时我们看到index.html文件加载到窗口（BrowserWindow）中去了。<br>至此，Electron应用程序是已经能够正常的运行起来了，那么我们如如何去管理应用程序的窗口生命周期喃？</p><h2 id="管理应用程序的声明周期》"><a href="#管理应用程序的声明周期》" class="headerlink" title="管理应用程序的声明周期》"></a>管理应用程序的声明周期》</h2><p>Electron应用程序在窗口中显示的每个网页将运行在一个单独的进程中，称为渲染进程(或简称为渲染器)。</p><p>这个渲染过程与通用网页的渲染过程是一致的，即渲染过程可以访问与典型前端web开发相同的JavaScript api和工具，例如使用webpack来捆绑和缩减代码，或者使用React来构建用户界面…</p><p>应用程序窗口在每个操作系统上的行为都不同。比起默认地强制执行这些约定，Electron给你在应用程序代码中实现它们的选择，如果你希望遵循它们。你可以通过监听由应用程序和BrowserWindow模块发出的事件来实现基本的窗口约定。</p><p>检查Node的进程。平台变量可以帮助您在特定平台上有条件地运行代码。</p><p>注意</p><blockquote><p>Electron只能在三种可能的平台上运行:win32 (Windows)、linux (linux)和darwin (macOS)。</p></blockquote><h2 id="关闭所有窗口时退出应用-Windows-amp-Linux-》"><a href="#关闭所有窗口时退出应用-Windows-amp-Linux-》" class="headerlink" title="关闭所有窗口时退出应用 (Windows &amp; Linux)》"></a>关闭所有窗口时退出应用 (Windows &amp; Linux)》</h2><p>注意这里只是针对：window和Linux系统，macOS系统不适用。</p><p>在Windows和Linux上，关闭所有窗口通常会完全退出应用程序。如果要在Electron应用程序中实现这个模式，需要监听app模块的window-all-closed事件，并调用app.quit()来退出你的应用程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) app.quit()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们就是实现了一个Electron应用程序从创建》运行》关闭，整个生命周期。完整的代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-electron-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;electron progroam&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>:<span class="string">&quot;electron .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;zl&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^20.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main.js</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h3><p>如果你想在VS Code工具中调试Electron应用程序，则需要将VS Code附加到主进程和渲染进程。<br>以下是要运行的示例配置：</p><p>在你的项目下新建一个.vscode文件夹，并在其下创建一个launch.json配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;compounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Main + renderer&quot;</span>,</span><br><span class="line">      <span class="string">&quot;configurations&quot;</span>: [<span class="string">&quot;Main&quot;</span>, <span class="string">&quot;Renderer&quot;</span>],</span><br><span class="line">      <span class="string">&quot;stopAll&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Renderer&quot;</span>,</span><br><span class="line">      <span class="string">&quot;port&quot;</span>: 9222,</span><br><span class="line">      <span class="string">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pwa-chrome&quot;</span>,</span><br><span class="line">      <span class="string">&quot;webRoot&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Main&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;pwa-node&quot;</span>,</span><br><span class="line">      <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>&quot;</span>,</span><br><span class="line">      <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/node_modules/.bin/electron&quot;</span>,</span><br><span class="line">      <span class="string">&quot;windows&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;<span class="variable">$&#123;workspaceFolder&#125;</span>/node_modules/.bin/electron.cmd&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;--remote-debugging-port=9222&quot;</span>],</span><br><span class="line">      <span class="string">&quot;outputCapture&quot;</span>: <span class="string">&quot;std&quot;</span>,</span><br><span class="line">      <span class="string">&quot;console&quot;</span>: <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做了以上工作后，当你选择侧边栏的“运行和调试”时，会出现“Main + renderer”选项，这将允许你设置断点并检查主进程和渲染进程中的所有变量。</p><p>在以上launch.json文件中有3个配置项：</p><blockquote><p>1）Main用于启动主进程，并开放9222端口用于远程调试(–remote-debugging-port&#x3D;9222)。这是我们将用于监听Renderer调试器的端口。因为主进程是一个Node.js进程，类型被设置为pwa-node (pwa-是用来告诉VS Code使用最新的JavaScript调试器的一个前缀)。<br>2）Renderer用于调试渲染器进程。由于这个进程（Renderer）是由主进程创建的，所以我们必须“附加”到主进程上(“request”:“attach”)，而不是创建一个新的进程。渲染器进程是一个web进程，所以不得不使用pwa-chrome作为调试器。<br>3）Main + renderer是一个复合任务，可以同时执行前面的任务。</p></blockquote><p>因为我们是在Renderer中附加一个进程，所以有可能你的代码的前几行会被跳过，因为调试器在它们被执行之前没有足够的时间进行连接。可以通过刷新页面或在开发模式执行代码之前设置settimeout来解决这个问题。</p><h2 id="【知识延申】》如何给Chrome浏览器开启远程调试的功能？"><a href="#【知识延申】》如何给Chrome浏览器开启远程调试的功能？" class="headerlink" title="【知识延申】》如何给Chrome浏览器开启远程调试的功能？"></a>【知识延申】》如何给Chrome浏览器开启远程调试的功能？</h2><blockquote><p>。找到Chrome浏览器的安装地址（在Chrome浏览器的搜索栏输入：chrome:&#x2F;&#x2F;version    出现页面信息中的“可执行文件路径”项即是当前电脑中Chrome浏览器的安装地址）；<br>。关闭所有打开的Chrome浏览器<br>。在地址栏输入cmd，打开命令终端<br>。在命令终端中输入：chrome.exe –remote-debugging-port&#x3D;9222</p></blockquote><p>按照以上操作后便会自动打开一个网页：<a href="http://127.0.0.1:9222/json/version">http://127.0.0.1:9222/json/version</a><br>页面中的webSocketDebuggerUrl后面的地址，这就是我们远程链接的地址；测试的过程中，可能会发现标签页越开越多。只要至少保留一个标签页不关闭，那么这个浏览器窗口就可以一直使用。<br>当然如果你想在调试方面有更深入的了解，下面的指南提供了更多的信息:</p><p><a href="https://www.electronjs.org/docs/latest/tutorial/application-debugging" title="" target="">Application Debugging</a></p><p><a href="https://www.electronjs.org/docs/latest/tutorial/devtools-extension" title="" target="">DevTools Extensions</a></p><h3 id="预加载脚本：preload-js"><a href="#预加载脚本：preload-js" class="headerlink" title="预加载脚本：preload.js"></a>预加载脚本：preload.js</h3><p>接下来将了解什么是预加载脚本，以及如何使用预加载脚本安全地将私有api公开到渲染进程中以及如何使用Electron的进程间通信(IPC)模块在主进程和渲染进程之间通信。 </p><h2 id="什么是预加载脚本？"><a href="#什么是预加载脚本？" class="headerlink" title="什么是预加载脚本？"></a>什么是预加载脚本？</h2><blockquote><p>预加载脚本中的代码在网页加载到浏览器窗口之前运行。它可以访问DOM API和Node.js环境，通常通过contextBridge API向渲染器暴露私有API。</p></blockquote><p>因为主进程和渲染进程的职责有很大不同，Electron应用程序经常使用预加载脚本建立进程间通信(IPC)接口，在两种进程之间传递任意消息。</p><p>Electron的主进程是一个具有完全操作系统访问权限的Node.js环境。在Electron模块之上，你还可以访问Node.js内置模块，以及任何通过npm安装的包。另一方面，由于安全原因，渲染进程运行网页时默认不运行Node.js。</p><p>为了将Electron的不同过程类型连接在一起，我们需要使用一种称为预加载的特殊脚本。</p><h2 id="接下来了解使用预加载脚本增强渲染器。"><a href="#接下来了解使用预加载脚本增强渲染器。" class="headerlink" title="接下来了解使用预加载脚本增强渲染器。"></a>接下来了解使用预加载脚本增强渲染器。</h2><p>BrowserWindow的预加载脚本运行在可以访问HTML DOM和Node.js环境的上下文中。在渲染器加载页面之前会注入预加载脚本，类似于Chrome扩展的内容脚本。若要向渲染器添加需要特权访问的特性，可以通过contextBridge API定义全局对象。</p><p>为了演示这个概念，我们创建一个预加载脚本，实现将应用程序的Chrome、Node和Electron版本暴露到渲染器中。</p><p>新建preload.js脚本，用于暴露Electron进程的选定属性。在Versions全局变量中向渲染器进程添加Versions对象。内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const &#123; contextBridge &#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.exposeInMainWorld(<span class="string">&#x27;versions&#x27;</span>, &#123;</span><br><span class="line">  node: () =&gt; process.versions.node,</span><br><span class="line">  chrome: () =&gt; process.versions.chrome,</span><br><span class="line">  electron: () =&gt; process.versions.electron,</span><br><span class="line">  // we can also expose variables, not just <span class="built_in">functions</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要将这个脚本附加到你的渲染器进程，需要将它的路径传递给BrowserWindow构造函数中的webPreferences.preload项:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*main.js */</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            preload: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在以上内容中我们用到了两个Node.js的知识点：</p><blockquote><p>1）__dirname    字符串指向当前正在执行的脚本的路径(本例中即为项目的根文件夹)。</p><p>2）path. join    接口将多个路径拼接在一起，组成一个跨所有平台的组合路径字符串。</p></blockquote><p>此时，渲染器可以访问全局versions，接着让我们在窗口中显示该版本信息。这个变量可以通过window.versions或versions访问。</p><p>新建一个renderer.js脚本，用于通过 document.getElementById DOM API实现将 id为info的HTML元素的文本信息替换为版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*renderer.js*/</span><br><span class="line">const information = document.getElementById(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">information.innerText = `This app is using Chrome (v<span class="variable">$&#123;versions.chrome()&#125;</span>), Node.js (v<span class="variable">$&#123;versions.node()&#125;</span>), and Electron (v<span class="variable">$&#123;versions.electron()&#125;</span>)`</span><br></pre></td></tr></table></figure><p>然后修改index.html，添加一个id属性为info的新元素，并引入renderer.js脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;meta</span><br><span class="line">      http-equiv=<span class="string">&quot;X-Content-Security-Policy&quot;</span></span><br><span class="line">      content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;title&gt;Hello from Electron renderer!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello from Electron renderer!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;??&lt;/p&gt;</span><br><span class="line">    &lt;p <span class="built_in">id</span>=<span class="string">&quot;info&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;./renderer.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>完成以上步骤后，运行程序我们可以看到窗口显示出Chorm、Node.js、Electron的版本信息。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>正如上面所提到的那样，Electron的main和renderer进程职责不同且不可互换。这意味着不能从渲染进程直接访问Node.js api，也不能从主进程访问HTML文档对象模型(DOM)。</p><p>解决这个问题的方法是使用Electron的ipcMain和ipcrederer模块进行进程间通信(IPC)。如需从你的网页向主进程发送消息，你可以用ipcMain.handle句柄建立一个主进程，然后在预加载脚本中暴露一个调用ipcRenderer.invoke的函数去触发这个句柄。</p><p>为了演示这个观点，我们将在渲染器中添加一个名为ping()的全局函数，该函数将从主进程返回一个字符串。</p><p>首先，在预加载脚本中配置调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const &#123;</span><br><span class="line">    contextBridge,</span><br><span class="line">    ipcRenderer</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.exposeInMainWorld(<span class="string">&#x27;versions&#x27;</span>, &#123;</span><br><span class="line">    node: () =&gt; process.versions.node,</span><br><span class="line">    chrome: () =&gt; process.versions.chrome,</span><br><span class="line">    electron: () =&gt; process.versions.electron,</span><br><span class="line">    ping: () =&gt; ipcRenderer.invoke(<span class="string">&#x27;ping&#x27;</span>),</span><br><span class="line">    // we can also expose variables, not just <span class="built_in">functions</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="IPC安全机制》"><a href="#IPC安全机制》" class="headerlink" title="IPC安全机制》"></a>IPC安全机制》</h2><p>请注意，我们为何将ipcRenderer.invoke(‘ping’) 调用封装在一个帮助函数中，而不是直接通过上下文桥接暴露ipcRenderer模块的。你绝对不想通过preload直接暴露整个ipcRenderer模块。这将使渲染器能够向主进程发送任意IPC消息，并将为恶意代码提供有力的攻击载体。</p><p>然后，在主进程中设置handle 侦听器，此操作需要在加载HTML文件之前执行，以确保在渲染器进程发出invoke调用之前handle 侦听器已准备就绪：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*main.js */</span><br><span class="line">const &#123;</span><br><span class="line">    app,</span><br><span class="line">    ipcMain,</span><br><span class="line">    BrowserWindow</span><br><span class="line">&#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const createWindow = () =&gt; &#123;</span><br><span class="line">    const win = new BrowserWindow(&#123;</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 600,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            preload: path.join(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    ipcMain.handle(<span class="string">&#x27;ping&#x27;</span>, () =&gt; <span class="string">&#x27;pong&#x27;</span>)</span><br><span class="line">    win.loadFile(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">        app.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>设置好发送方和接收方之后，现在就可以通过刚才定义的“ping”通道从渲染器向主进程发送消息了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*renderer.js*/</span><br><span class="line">const information = document.getElementById(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">information.innerText = `This app is using Chrome (v<span class="variable">$&#123;versions.chrome()&#125;</span>), Node.js (v<span class="variable">$&#123;versions.node()&#125;</span>), and Electron (v<span class="variable">$&#123;versions.electron()&#125;</span>)`</span><br><span class="line"></span><br><span class="line">const func = async () =&gt; &#123;</span><br><span class="line">    const response = await window.versions.ping()</span><br><span class="line">    console.log(response) // prints out <span class="string">&#x27;pong&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>若要对ipcRenderer 和ipcMain模块更深入理解，查看完整的<a href="https://www.electronjs.org/docs/latest/tutorial/ipc" title="" target="">Inter-Process Communication</a>指南。</p><p>接下来将了解为应用添加更多功能的环境，又如何将应用分发给用户。</p><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>即增加应用程序的复杂性。</p><p>如果您一直按照本文进行操作，至此，您应该拥有一个具有静态用户界面的功能性Electron应用程序。从现在开始，你可以从两个大的方向来提升你的应用:</p><blockquote><p>1）增加渲染进程的web应用程序代码的复杂性</p><p>2）使操作系统和Node.js的深度集成</p></blockquote><p>理解这两个宽泛概念之间的区别是很重要的。</p><p>对于第一点，Electron对特殊环境是非必要的。在Electron中构建一个漂亮的待办事项列表的应用程序只是将你的Electron BrowserWindow指向一个漂亮的待办事项列表web应用程序。最终，你正在使用与在web上相同的工具(HTML、CSS、JavaScript)构建你的渲染器UI。因此，Electron的文档不会深入讨论如何使用标准的web工具。</p><p>另一方面，Electron还提供了一组丰富的工具，允许您与桌面环境集成，从创建托盘图标到为显示本地菜单添加全局快捷方式。它还在主进程中为您提供了Node.js环境的所有功能。这一功能集将Electron应用程序与在浏览器选项卡中运行网站分开，并且是Electron文档的重点。</p><p>Electron的文档中有许多教程，可以帮助您了解更高级的话题和更深入的操作系统集成。要开始使用，<br>请查看<a href="https://www.electronjs.org/docs/latest/tutorial/examples" title="" target="">How-To Examples</a>文档。</p><p>接着继续了解如何使Electron应用程序让最终用户使用？</p><p>为此我们将学习使用<a href="https://www.electronforge.io/" title="" target="">Electron Forge</a>打包和分发应用程序的基础知识。</p><h3 id="应用程序打包"><a href="#应用程序打包" class="headerlink" title="应用程序打包"></a>应用程序打包</h3><p>Electron没有任何打包和分发的工具捆绑到其核心模块中。一旦你有了一个在开发模式下工作的Electron应用程序，你需要使用其他工具来创建一个打包的应用程序，你可以分发给你的用户(也称为分发版)。分发文件可以是安装程序(如Windows上的MSI)，也可以是可移植的可执行文件(如macOS上的.app)。</p><h2 id="打包项目》"><a href="#打包项目》" class="headerlink" title="打包项目》"></a>打包项目》</h2><p>将 Electron Forge 添加到您应用的开发依赖中</p><p>并使用其”import”命令设置 Forge 的脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install @electron-forge/cli -g</span><br><span class="line"></span><br><span class="line">npx electron-forge import</span><br></pre></td></tr></table></figure><p>以上两条命令执行成功后会在项目中package.json文件scripts节点中自动新增以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run package</span><br></pre></td></tr></table></figure><p>会在根目录下生成可执行程序.exe文件夹out。</p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run make</span><br></pre></td></tr></table></figure><p>包含以下2个步骤：</p><blockquote><p>1）首先它将引用线下运行electronic -forge包，将您的应用程序代码与Electron二进制文件捆绑在一起。打包的代码将生成到一个文件夹中。</p><p>2）然后它将使用这个打包的app文件夹为每个配置的制造者创建一个单独的分发版。npm run make命令执行后，会在根目录下生成一个out文件夹，其中包含分发版和一个包含打包的应用程序代码（.exe）的文件夹。</p></blockquote><p>这样，out&#x2F;make文件夹中的分发版应该可以启动了</p><p>至此您已经创建了第一个捆绑的Electron应用程序。</p><p>以上我们已经成功生成了可执行文件，如何修改它exe可执行程序的图标、程序名称（xxx.exex）。。。？？？</p><h2 id="配置程序图标和名称等》"><a href="#配置程序图标和名称等》" class="headerlink" title="配置程序图标和名称等》"></a>配置程序图标和名称等》</h2><p>这是可以在打包脚本中去配置的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;package&quot;</span>:<span class="string">&quot;electron-packager . appName --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span>,</span><br></pre></td></tr></table></figure> <blockquote><p>.appName</p><p>表示生成的exe可执行文件的名称是appName，即：appName.exe</p><p>–icon&#x3D;favicon.ico</p><p>设置可执行文件的图标是favicon.ico，这个图标文件是我们已手动放在根目录下</p><p>–out&#x3D;.&#x2F;out </p><p>指定打包文件输出的文件夹位置,当前指定的为项目目录下的out文件夹</p><p>–asar </p><p>该参数可以不加（一般需要加上），如果加上，打包之后应用的源码会以.asar格式存在；否则会以文件夹app形式存在，app中呈现源码</p><p>–app-version&#x3D;1.0.1</p><p>设置项目程序的版本号</p><p>–overwrite</p><p>表示此次打包会覆盖上次打包的内容</p><p>–ignore&#x3D;node_modules</p><p>指定打包时忽略目录：node_modules </p></blockquote><h3 id="发布与更新"><a href="#发布与更新" class="headerlink" title="发布与更新"></a>发布与更新</h3><p>如果您一直按照本教程的流程学习，这是本教程的最后一步!在这小结，你将发布你的应用到</p><p><a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository" title="" target="">GitHub releases</a> </p>上，并将自动更新集成到你的应用代码中。<h2 id="使用update-electronjs-org"><a href="#使用update-electronjs-org" class="headerlink" title="使用update.electronjs.org"></a>使用update.electronjs.org</h2><p>Electron的维护者在 <a href="https://update.electronjs.org/">https://update.electronjs.org/</a> 上为开源应用程序提供免费的自动更新服务。它的要求是:</p><blockquote><p>1）应用运行在macOS或Windows上</p><p>2）应用程序有一个公共的GitHub库</p><p>3）构建版本发布到GitHub releases</p><p>4）构建是代码签名的（<a href="https://www.electronjs.org/zh/docs/latest/tutorial/code-signing" title="" target="">code signed</a>）</p></blockquote><h2 id="发布GitHub-release"><a href="#发布GitHub-release" class="headerlink" title="发布GitHub release"></a>发布GitHub release</h2><p>Electron Forge拥有 <a href="https://www.electronforge.io/config/publishers" title="" target="">Publisher</a> 插件，可以自动将打包的应用程序分发到各种来源。在本教程中，我们将使用GitHub Publisher，它将允许我们将我们的代码发布到GitHub上。</p><h2 id="生成个人访问令牌"><a href="#生成个人访问令牌" class="headerlink" title="生成个人访问令牌"></a>生成个人访问令牌</h2><p>Forge不能在未经允许的情况下发布到GitHub上的任何存储库。你需要传入一个经过验证的令牌，让Forge能够访问你的GitHub发行版。最简单的方法是使用 public_repo作用域 <a href="https://github.com/settings/tokens/new" title="" target="">create a new personal access token (PAT)</a>，它提供对公共存储库的写访问。一定要保密这个标志。</p><h2 id="设置GitHub发布者"><a href="#设置GitHub发布者" class="headerlink" title="设置GitHub发布者"></a>设置GitHub发布者</h2><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><p>Forge的 <a href="https://www.electronforge.io/config/publishers/github" title="" target="">GitHub Publisher</a> 是一个需要安装在你的项目的devDependencies中的插件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @electron-forge/publisher-github</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @electron-forge/publisher-github</span><br></pre></td></tr></table></figure><h2 id="在Forge中配置发布者"><a href="#在Forge中配置发布者" class="headerlink" title="在Forge中配置发布者"></a>在Forge中配置发布者</h2><p>一旦您安装了它，您需要在您的Forge配置中设置它。一个完整的选项列表记录在Forge的 <a href="https://js.electronforge.io/publisher/github/interfaces/publishergithubconfig" title="" target="">PublisherGitHubConfig</a> API文档中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*package.json*/</span><br><span class="line">&#123;</span><br><span class="line">  //...</span><br><span class="line">  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;forge&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;publishers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@electron-forge/publisher-github&quot;</span>,</span><br><span class="line">          <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;github-user-name&quot;</span>,</span><br><span class="line">              <span class="string">&quot;name&quot;</span>: <span class="string">&quot;github-repo-name&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;prerelease&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;draft&quot;</span>: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置身份验证令牌"><a href="#设置身份验证令牌" class="headerlink" title="设置身份验证令牌"></a>设置身份验证令牌</h2><p>您还需要让发布服务器知道您的身份验证令牌。默认情况下，它将使用存储在 GITHUB_TOKEN环境变量中的值。</p><h2 id="运行发布指令"><a href="#运行发布指令" class="headerlink" title="运行发布指令"></a>运行发布指令</h2><p>把Forge的 <a href="https://www.electronforge.io/cli#publish" title="" target="">publish command</a> 添加到你的npm脚本中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*package.json*/</span><br><span class="line">  //...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;package&quot;</span>: <span class="string">&quot;electron-forge package&quot;</span>,</span><br><span class="line">    <span class="string">&quot;make&quot;</span>: <span class="string">&quot;electron-forge make&quot;</span>,</span><br><span class="line">    <span class="string">&quot;publish&quot;</span>: <span class="string">&quot;electron-forge publish&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  //...</span><br><span class="line">```  </span><br><span class="line">这个命令将运行你配置的makers，并将输出分发版发布到新的GitHub版本:</span><br><span class="line">```bash</span><br><span class="line">npm run publish</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run publish</span><br></pre></td></tr></table></figure><p>默认情况下，这只会为您的主机操作系统和体系结构发布一个发行版。你可以通过传递–arch 标志到你的Forge命令来发布不同的架构。</p><p>这个版本的名称将对应于项目文件package.json中的version 字段。</p><h2 id="在GitHub-Actions中发布"><a href="#在GitHub-Actions中发布" class="headerlink" title="在GitHub Actions中发布"></a>在GitHub Actions中发布</h2><p>在本地发布是很痛苦的，特别是因为你只能为你的主机操作系统创建分发版(也就是说，你不能从macOS发布windows.exe文件)。</p><p>一个解决方案是通过自动化工作流发布你的应用程序，比如 <a href="https://github.com/features/actions" title="" target="">GitHub Actions</a>，它可以在Ubuntu、macOS和Windows上运行云中的任务。这正是 <a href="https://www.electronjs.org/fiddle" title="" target="">Electron Fiddle</a> 所采用的方法。你可以参考Fiddle<br>的 <a href="https://github.com/electron/fiddle/blob/main/.github/workflows/build.yaml" title="" target="">Build and Release pipeline</a> 以及 <a href="https://github.com/electron/fiddle/blob/main/forge.config.js" title="" target="">Forge configuration</a> 来了解更多细节。</p><h2 id="测试更新程序代码"><a href="#测试更新程序代码" class="headerlink" title="测试更新程序代码"></a>测试更新程序代码</h2><p>现在我们有了一个通过GitHub releases的功能发布系统，我们现在需要告诉我们的Electron应用程序在新发布的时候下载更新。Electron应用程序通过 <a href="https://www.electronjs.org/zh/docs/latest/api/auto-updater" title="" target="">autoUpdater</a> 模块实现这一功能，该模块从更新服务器提要读取数据，以检查是否有新版本可供下载。</p><p>update.electronjs.org服务提供了一个与更新程序兼容的提要。例如，Electron Fiddle v0.28.0将在<a href="https://update.electronjs.org/electron/fiddle/darwin/v0.28.0">https://update.electronjs.org/electron/fiddle/darwin/v0.28.0</a> 上检查端点，以查看是否有更新的GitHub版本可用。服务提供了一个与更新程序兼容的提要。例如，Electron Fiddle v0.28.0将在<a href="https://update.electronjs.org/electron/fiddle/darwin/v0.28.0">https://update.electronjs.org/electron/fiddle/darwin/v0.28.0</a> 上检查端点，以查看是否有更新的GitHub版本可用。</p><p>在你的版本发布到GitHub后，update.electronjs.org服务应该可以为你的应用程序工作。剩下的唯一步骤是使用autoUpdater 模块配置提要。</p><p>为了使这个过程更容易，Electron团队维护 <a href="https://github.com/electron/update-electron-app" title="" target="">update-electron-app</a> 模块，该模块在一个函数调用中为update.electronjs.org设置autoUpdater 样板文件——不需要配置。此模块将搜索update.electronjs.org feed，此与项目 package.json文件中”repository”字段匹配。</p><p>首先，将安装作为运行时依赖项的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install update-electron-app</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add update-electron-app</span><br></pre></td></tr></table></figure><p>然后，导入模块并在主进程中立即调用它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/*main.js*/</span><br><span class="line">require(<span class="string">&#x27;update-electron-app&#x27;</span>)()</span><br></pre></td></tr></table></figure><p>这样，一旦打包应用，它会为你发布的每一个新的GitHub版本实现自我更新。</p><p>在本小结中，我们配置了Electron Forge的GitHub发布者上传你的应用程序的分发到GitHub发行版。由于分发版不能总是在平台之间生成，如果您无法访问机器，我们建议在持续集成管道中设置您的构建和发布流程。</p><p>Electron应用程序可以通过将autoUpdater模块指向更新服务器feed进行自我更新。update.electronjs.org是Electron为GitHub上发布的开源应用提供的一个免费更新服务器。配置您的Electron应用程序来使用该服务就像安装和导入update-electron-app模块一样简单。</p><p>如果您的应用程序不符合update.electronjs.org的条件，您应该部署自己的更新服务器，并自己配置autoUpdater模块。</p><h1 id="问题集锦》"><a href="#问题集锦》" class="headerlink" title="问题集锦》"></a>问题集锦》</h1><p>1）命令cnpm install electron -g 是全局安装，用于在第一次安装后出现‘electron’不被识别的情况，安装成功了，使用：electron -v命令可以查看版本号。</p><p>当然了使用这个命令前需要添加淘宝镜像；具体可参照前面创建Vue项目里的操作方法，也可自行百度。</p><p>这里我在使用这个命令时出现了以下错误：</p><p>Error: EPERM: operation not permitted, mkdir ‘D:\softprogram\nodejs\node_modules\electron_tmp’<br>原因是：node权限问题；</p><p>解决办法：这里我们进入：D:\softprogram\nodejs》右键》属性》安全》点击“编辑”》选中“Users”》勾选权限框 “允许”栏中的所有权限》应用》确定</p><p>再执行命令：cnpm install electron -g，即可成功安装。</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBuilder X 开发 5+App(mui项目)</title>
      <link href="/2022/10/13/special2/"/>
      <url>/2022/10/13/special2/</url>
      
        <content type="html"><![CDATA[<p>根据 <a href="https://hx.dcloud.net.cn/" title="" target="">HBuilder X 官网</a> 介绍，工具具有以下特点:</p><blockquote><ol><li>轻巧<br>仅10余M的绿色发行包(不含插件)</li><li>极速<br>不管是启动速度、大文档打开速度、编码提示，都极速响应<br>C++的架构性能远超Java或Electron架构</li><li>vue开发强化<br><code>HX</code>对vue做了大量优化投入，开发体验远超其他开发工具<br><a href="https://hx.dcloud.net.cn/Tutorial/Language/vue">详见</a> 按下Alt+鼠标左键可直接打开网址</li><li>小程序支持<br>国外开发工具没有对中国的小程序开发优化，<code>HX</code>可开发<code>uni-app</code>或<code>小程序</code>、<code>快应用</code>等项目，为国人提供更高效工具</li><li>markdown利器<br><code>HX</code>是唯一一个新建文件默认类型是markdown的编辑器，也是对md支持最强的编辑器<br><code>HX</code>为md强化了众多功能，请<strong>务必点击</strong>【菜单-帮助-markdown语法示例】，快速掌握md及<code>HX</code>的强化技巧！</li><li>清爽护眼<br>HX的界面比其他工具更清爽简洁，绿柔主题经过科学的脑疲劳测试，是最适合人眼长期观看的主题界面<br><a href="https://hx.dcloud.net.cn/Tutorial/Other/health">详见</a></li><li>强大的语法提示<br><code>HX</code>是中国唯一一家拥有自主IDE语法分析引擎的公司，对前端语言提供准确的代码提示和转到定义(Alt+鼠标左键)</li><li>高效极客工具<br>更强大的多光标、智能双击…让字处理的效率大幅提升<br>了解<code>HX</code>的极客技巧，<a href="https://hx.dcloud.net.cn/Tutorial/UserGuide/skill">详见</a>，</li><li>更强的json支持<br>现代js开发中大量json结构的写法，<code>HX</code>提供了比其他工具更高效的操作<br><a href="https://hx.dcloud.net.cn/Tutorial/Language/json">详见</a></li></ol></blockquote><span id="more"></span><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1）去<a href="https://hx.dcloud.net.cn/" title="" target="">官网</a>下载HBuilder X 软件</p><p>2）文件》新建》项目》5+App</p><p>模板选择：mui项目</p><p>这样一个基本的使用mui框架的5+App项目就建好了。</p><p>调试运行<br>既然是一个App项目，那么它的运行不是像传统网站在浏览器中运行的，而是在安卓设备或者模拟器的虚拟机上运行的。<br>这里我的是逍遥模拟器<br>（1）在<a href="http://www.xyaz.cn/" title="" target="">逍遥模拟器官网</a> 上下载模拟器<br>（2）在项目里通过HBuilderx软件链接逍遥模拟器<br>点击HBuilderx上的 运行》运行到手机或模拟器<br>这里如果我们是第一次通过HBuilderx连接模拟器的话，是无法加测到模拟器的。因为我们还未对adb命令 做以下下配置：</p><h2 id="1）adb-exe添加到系统环境变量中去"><a href="#1）adb-exe添加到系统环境变量中去" class="headerlink" title="1）adb.exe添加到系统环境变量中去"></a>1）adb.exe添加到系统环境变量中去</h2><p>【1】在Hbuilderx的安装目录下找到adb的路径（我的是：D:\softprogram\HBuilderX3.3.11.20220209\HBuilderX.3.3.11.20220209\HBuilderX\plugins\launcher\tools\adbs）<br>【2】我的电脑》右键》属性》高级系统设置》环境变量》双击系统变量栏的Path》新建》将刚刚adb的路径添加进去》保存<br>我这里用的是win10电脑，其它系统处理类似</p><h2 id="2）验证adb命令是否配置正确"><a href="#2）验证adb命令是否配置正确" class="headerlink" title="2）验证adb命令是否配置正确"></a>2）验证adb命令是否配置正确</h2><p>在终端命令窗口（cmd）中输入指令:adb version 回车查看安卓模拟器的版本信息（我这里是Android Debug Bridge version 1.0.32），<br>输入指令：adb devices<br>如果出现：List of devices attached<br>那么表示我们接下来可以 通过adb指令让模拟器连接上电脑。</p><h2 id="3）让模拟器连接上电脑"><a href="#3）让模拟器连接上电脑" class="headerlink" title="3）让模拟器连接上电脑"></a>3）让模拟器连接上电脑</h2><p>【1】打开逍遥模拟器<br>【2】在逍遥模拟器的安装文件下打开终端命令窗口cmd<br>【3】执行命令：adb connect 127.0.0.1:21503<br>此时窗口出现信息：already connected to 127.0.0.1:21503</p><h2 id="4）5-APP-mui项目在安卓模拟器上运行"><a href="#4）5-APP-mui项目在安卓模拟器上运行" class="headerlink" title="4）5+APP mui项目在安卓模拟器上运行"></a>4）5+APP mui项目在安卓模拟器上运行</h2><p>回到HBuilderx项目中》运行》运行到手机或模拟器》运行到Android App基座<br>这时列表中会出现：127.0.0.1:21503<br>如果没有出现，请按照步骤执行：adb connect 127.0.0.1:21503<br>最后点击运行出现以下界面表示我们的项目已经在模拟器上跑起来了！</p><p>同时点击运行》运行到手机或模拟器》点击“显示Webview调试控制台”，可查看项目运行日志（排错）。<br>更多用法，可查看<a href="https://hx.dcloud.net.cn/" title="" target="">HBuilder X 官网</a> 和<a href="https://dev.dcloud.net.cn/mui/" title="" target="">mui 官网</a>相关知识。</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBuilder </tag>
            
            <tag> HBuilder X </tag>
            
            <tag> App </tag>
            
            <tag> mui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/2022/10/13/special1/"/>
      <url>/2022/10/13/special1/</url>
      
        <content type="html"><![CDATA[<p>开发微信公众号，我们需要用到微信公众平台的服务账号，也就是我们开发项目的身份吧。</p><p>需要注意的是，微信公众号分为订阅号、服务号、企业微信 三种</p><p>这也是我们创建账号选择账号的类型，同时一经创建后，类型无法修改。</p><p>创建是通过邮箱注册的，而且三种类型的服务号，一旦用邮箱注册其中一种，便无法再注册另外两种类型的微信公众号</p><p>这里我是选择的：服务号</p><span id="more"></span><p>但是在创建的过程中我发现无论选择那种主体类型（政府，媒体，企业，其他组织），需要的信息都很多，有些作为开发人员测试而言是无法提供的。</p><p>那么有没有办法个人测试开发微信公众号呢？</p><p>答案是有的！</p><p>微信公众平台测试号的申请与使用》</p><h3 id="1-什么时候需要申请测试号？"><a href="#1-什么时候需要申请测试号？" class="headerlink" title="1.什么时候需要申请测试号？"></a>1.什么时候需要申请测试号？</h3><p>目前想到的应用场景有2种:</p><h2 id="1-由于个人申请只能申请订阅号，公众号的许多其它功能无法使用-而测试号可以调用微信公众平台所有的接口，只是不能群发消息。"><a href="#1-由于个人申请只能申请订阅号，公众号的许多其它功能无法使用-而测试号可以调用微信公众平台所有的接口，只是不能群发消息。" class="headerlink" title="(1)由于个人申请只能申请订阅号，公众号的许多其它功能无法使用;而测试号可以调用微信公众平台所有的接口，只是不能群发消息。"></a>(1)由于个人申请只能申请订阅号，公众号的许多其它功能无法使用;而测试号可以调用微信公众平台所有的接口，只是不能群发消息。</h2><p>测试号申请无需公众帐号，快速申请接口测试号,直接体验和测试公众平台所有高级接口</p><h2 id="2-作为正式服务的测试号使用。"><a href="#2-作为正式服务的测试号使用。" class="headerlink" title="(2)作为正式服务的测试号使用。"></a>(2)作为正式服务的测试号使用。</h2><p>比如你现在正式环境跑着一个正式号的程序，所有的账号信息(appId 和 appSecret)都是正式号的，这个时候你修改了服务，升级了某些功能。为了不影响线上程序的正常使用，你可以再申请一个测试号来测试新版本程序。</p><h3 id="2-如何申请测试账号"><a href="#2-如何申请测试账号" class="headerlink" title="2.如何申请测试账号"></a>2.如何申请测试账号</h3><p>申请地址: 微信公众平台接口测试帐号申请</p><p>点击“登录”，然后扫一扫授权即可。</p><p>需要注意的是 测试号是和个人微信号关联起来的，不是公众号主体关联。。也就是每个人都可以申请，而不是必须有公众号主题才可以。测试号和公众号是独立的。</p><h3 id="3-申请之后如何配置？"><a href="#3-申请之后如何配置？" class="headerlink" title="3.申请之后如何配置？"></a>3.申请之后如何配置？</h3><p>申请成功你就可以看到测试号信息了，包括<br>appID和appsecret。那除了修改账号信息，还有哪些需要配置呢？</p><h2 id="1-用途"><a href="#1-用途" class="headerlink" title="(1)用途"></a>(1)用途</h2><p>URL:就是你后台服务器的url。必须是80端口(微信强制要求，其它端口或者其它端口映射的虚拟端口均不可以)，用来接收关键词回复，菜单定义等功能。<br>token自己定义就好，token是你在接口文件里自己设置的，设置后回到高级功能里来设置成一样的，目的是告诉公众平台，那个服务器是我的，这个过程就是验证密码。这个算是自己设置的一个验证码，要自己在代码里面设置的。开发就是将高级功能接口文件部署在服务器上，使能被访问。接口文件在微信公众号帮助文档里面找。</p><h2 id="2-设置调用微信JS接口的域名"><a href="#2-设置调用微信JS接口的域名" class="headerlink" title="(2)设置调用微信JS接口的域名"></a>(2)设置调用微信JS接口的域名</h2><p>注意:无需以”http:&#x2F;&#x2F;“，直接写域名就可以,例如 “aa.bb.com”</p><h2 id="3-设置网页回调域名"><a href="#3-设置网页回调域名" class="headerlink" title="(3)设置网页回调域名"></a>(3)设置网页回调域名</h2><p>用途：通过网页授权access_token可以进行授权后接口调用，如获取用户基本信息。 无需以”http:&#x2F;&#x2F;“开头，直接写域名就可以,例如 “aa.bb.com”</p>]]></content>
      
      
      <categories>
          
          <category> 学习专栏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装pycharm软件后在Terminal终端无法使用pip，显示No module named pip如何解决?</title>
      <link href="/2022/10/13/tool10/"/>
      <url>/2022/10/13/tool10/</url>
      
        <content type="html"><![CDATA[<p>安装pycharm的时候会卸载pip的有关内容。若出现了这种情况，则运行以下指令：</p><blockquote><p>1）python -m ensurepip<br>2）python -m pip install –upgrade pip</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install --save、npm install --save-dev 、npm install -g 的区别</title>
      <link href="/2022/10/13/tool9/"/>
      <url>/2022/10/13/tool9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>devDependencies    用于开发环境<br>dependencies    用于线上环境</p></blockquote><span id="more"></span><p>dependencies依赖的包不仅线上环境可以用，开发环境也能使用，反之则不行<br>默认情况下，在哪个文件夹下运行npm，npm就在当前目录创建一个文件夹node_modules</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NPM install moduleName --save</span><br></pre></td></tr></table></figure><blockquote><p>1.将项目模块写入到package.json的dependencies节点<br>安装模块到当前node_modules文件夹下<br>运行npm install时，会将模块下载到当前node_modules目录下</p><p>2.NPM install moduleName –save-dev<br>将项目模块写入到package.json的devDependencies节点<br>安装模块到当前node_modules文件夹下<br>运行npm install时，会将模块下载到当前node_modules目录下</p><p>3.NPM install moduleName -g<br>安装模块到全局，不会在项目node_modules目录中安装<br>不会将模块信息写入到dependencies或devDependencies节点<br>运行npm install时，不会下载该模块</p></blockquote><p>—————总结————–</p><p>devDependencies节点下的模块是开发时候需要的，如构建工具glup、webpack，预处理器less、sass这些只在开发环境有用，所以使用–save-dev安装</p><p>dependencies节点下的模块是线上代码运行需要的，如axios、vue-router、vuex，所以需要使用–save安装</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue解决本地调试和发布后生产环境跨域的问题</title>
      <link href="/2022/10/13/tool8/"/>
      <url>/2022/10/13/tool8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-解决本地环境调试跨域（前端代码使用代理）"><a href="#1-解决本地环境调试跨域（前端代码使用代理）" class="headerlink" title="1.解决本地环境调试跨域（前端代码使用代理）"></a>1.解决本地环境调试跨域（前端代码使用代理）</h3><h2 id="1-在main-js中定义代理"><a href="#1-在main-js中定义代理" class="headerlink" title="1).在main.js中定义代理"></a>1).在main.js中定义代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.dev_proxyname = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2-在index-js中定义代理地址"><a href="#2-在index-js中定义代理地址" class="headerlink" title="2).在index.js中定义代理地址"></a>2).在index.js中定义代理地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  dev:&#123;</span><br><span class="line"></span><br><span class="line">    // Paths</span><br><span class="line"></span><br><span class="line">    assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,    </span><br><span class="line"></span><br><span class="line">    assetsPublicPath:runPath,</span><br><span class="line"></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line"></span><br><span class="line">      changeOrigin: <span class="literal">true</span>,/*允许跨域*/</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;        </span><br><span class="line"></span><br><span class="line">        target:<span class="string">&quot;http://localhost:8090&quot;</span>,//本地后台调试post</span><br><span class="line"></span><br><span class="line">        secure:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,   </span><br><span class="line"></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line"></span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">.........</span><br></pre></td></tr></table></figure><h2 id="3-调用"><a href="#3-调用" class="headerlink" title="3)调用"></a>3)调用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$axios</span>(&#123;</span><br><span class="line"></span><br><span class="line">url: this.dev_proxyname + <span class="string">&quot;/InsertBlog/AddBlog&quot;</span>,</span><br><span class="line">method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">data: JSON.stringify(this.blog),</span><br><span class="line">headers: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (res.data) &#123;</span><br><span class="line">this.submmited = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch((err) =&gt; &#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样便能解决本地调试 get或post跨域的问题。部署到生产线上仍然会产生：Cross-Origin 跨域的问题</p><p>注意</p><p>如果是在config&gt;dev.env.js 中配置以下代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">const merge = require(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line">const prodEnv = require(<span class="string">&#x27;./prod.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line">/*配置测试环境下url*/</span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;development&quot;&#x27;</span>,</span><br><span class="line">  API_HOST: <span class="string">&#x27;&quot;http://localhost:8090&quot;&#x27;</span> // 开发环境地址【可调试后端api】</span><br><span class="line"> 内容  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">在config&gt;prod.env.js 中配置以下代理</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">&#x27;&quot;production&quot;&#x27;</span>,</span><br><span class="line">  API_HOST: <span class="string">&#x27;&quot;https://www.romanticlife.top:8090&quot;&#x27;</span> // 生产环境地址</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方式配置代理在使用axios  post时无效…</p><h3 id="2-解决生产环境跨域"><a href="#2-解决生产环境跨域" class="headerlink" title="2.解决生产环境跨域"></a>2.解决生产环境跨域</h3><p>需要在生产环境服务器nginx添加允许跨域的配置和反向代理。</p><p>本网站配置内容如下，以供参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx 常用命令</span></span><br><span class="line"><span class="comment"># taskkill /f /t /im nginx.exe    #kill 所有的nginx端口</span></span><br><span class="line"><span class="comment"># start nginx                     #开启 nginx服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这个配置的意思是就是：当请求：https://www.romanticlife.top:8090 时，就转发请求</span></span><br><span class="line">    <span class="comment">#当前服务器端口 5000，而这个端口正好是 .necore webapi发布后启动.exe 占用的端口</span></span><br><span class="line">    <span class="comment">#这就要求这个 exe软件需要打开，否则请求不到接口数据</span></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">        listen 8090 ssl;<span class="comment">#这里需要云服务器上开放8090端口；</span></span><br><span class="line">        server_name  www.romanticlife.top;   </span><br><span class="line">        ssl_certificate 1_www.romanticlife.top_bundle.crt;  <span class="comment"># 指定证书的位置，绝对路径</span></span><br><span class="line">        ssl_certificate_key 2_www.romanticlife.top.key;  <span class="comment"># 绝对路径，同上</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        ssl_prefer_server_ciphers on;    </span><br><span class="line"></span><br><span class="line">         location /&#123;</span><br><span class="line">            <span class="comment">#  如果nginx加了允许跨域的配置，那么.netcore api 就不需要加跨域配置（二者选其一）</span></span><br><span class="line">            <span class="comment">#  add_header &#x27;Access-Control-Allow-Origin&#x27; *;</span></span><br><span class="line">    <span class="comment">#  add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET,HEAD,OPTIONS,POST,PUT&#x27;;</span></span><br><span class="line">    <span class="comment">#  add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#x27;;</span></span><br><span class="line"></span><br><span class="line">            proxy_pass HTTP://localhost:5000;</span><br><span class="line">            proxy_set_header Host <span class="variable">$proxy_host</span>; <span class="comment"># 修改转发请求头，让8080端口的应用可以受到真实的请求</span></span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name  www.romanticlife.top;</span><br><span class="line">        ssl_certificate 1_www.romanticlife.top_bundle.crt;  <span class="comment"># 指定证书的位置，绝对路径</span></span><br><span class="line">        ssl_certificate_key 2_www.romanticlife.top.key;  <span class="comment"># 绝对路径，同上</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,HEAD,OPTIONS,POST,PUT&#x27;</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            root   html\VueWeb;</span><br><span class="line">            index  index.html index.htm;     </span><br><span class="line"></span><br><span class="line">               location /api&#123;          </span><br><span class="line">                rewrite ^/api/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">                proxy_pass HTTP://localhost:5000;</span><br><span class="line">               &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样也就解决了生产环境跨域的问题。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置的网页刷新 404</title>
      <link href="/2022/10/13/tool7/"/>
      <url>/2022/10/13/tool7/</url>
      
        <content type="html"><![CDATA[<p>在配置中添加：</p><blockquote><p>try_files $uri $uri&#x2F; &#x2F;index.html; —解决页面刷新404问题 </p></blockquote><p>实例：</p><span id="more"></span><pre><code class="bash"> location / &#123;            add_header &#39;Access-Control-Allow-Origin&#39; *;            add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,HEAD,OPTIONS,POST,PUT&#39;;              add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With&#39;;              root   html\VueWeb;            index  index.html index.htm;            try_files $uri $uri/ /index.html; ---解决页面刷新404问题                   location /api&#123;                          rewrite ^/api/(.*)$ /$1 break;                proxy_pass HTTP://localhost:5000;               &#125;                      &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniApp 报错 plus is not defined</title>
      <link href="/2022/10/13/tool6/"/>
      <url>/2022/10/13/tool6/</url>
      
        <content type="html"><![CDATA[<h3 id="plus是什么？"><a href="#plus是什么？" class="headerlink" title="plus是什么？"></a>plus是什么？</h3><blockquote><p>plus是5+Runtime的内部对象。<br>就像chrome浏览器里有chrome.开头的一些对象方法，5+runtime内部内置了plus对象。<br>因为plus和mui不一样，plus是引擎级别的，不需要前端框架。而mui是前端框架，所以是要引入mui.js才能使用的。</p></blockquote><span id="more"></span><h3 id="不要在没有plus和mui的环境下调用相关API"><a href="#不要在没有plus和mui的环境下调用相关API" class="headerlink" title="不要在没有plus和mui的环境下调用相关API"></a>不要在没有plus和mui的环境下调用相关API</h3><blockquote><p>1.普通浏览器里没有plus环境，只有HBuilder真机运行、打包后、或流应用环境下才能运行plus api。</p><p>2.在普通浏览器里运行时plus api时控制台必然会输出plus is not defined错误提示。</p><p>3.mui作为一个前端框架，你必须保证当前页面引入了mui.js。否则也会出现mui is not defined。 </p></blockquote><h3 id="不要在plus和mui未完成初始化时调用相关API"><a href="#不要在plus和mui未完成初始化时调用相关API" class="headerlink" title="不要在plus和mui未完成初始化时调用相关API"></a>不要在plus和mui未完成初始化时调用相关API</h3><blockquote><p>就像在dom初始化完成前(DOMContentLoaded)去操作dom，就会报错是一样的道理。<br>plus和mui都需要初始化，在初始化完成后调用再调用。<br>一般我们在plusready的回调事件里调用plus api。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    document.addEventListener(<span class="string">&#x27;plusready&#x27;</span>,<span class="function"><span class="title">function</span></span> () &#123;  </span><br><span class="line">    // 在这里调用plus api  </span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>执行更高效的写法是这样，如果plus已经存在，就直接使用</p><pre><code class="bash"> function plusReady()&#123;              // 在这里调用plus api          &#125;          if(window.plus)&#123;              plusReady();          &#125;else&#123;              document.addEventListener(&#39;plusready&#39;,plusReady,false);          &#125;</code></pre><p>mui框架对此进行了封装，写法更简单：</p><pre><code class="bash"> mui.plusReady(function()&#123;               // 在这里调用plus api          &#125;);</code></pre><p>事实上，mui作为一个框架，也有初始化的过程，但mui的初始化过程在DOMContentLoaded完毕后就结束了。<br>mui ready的写法是这样，但一般无需使用。</p><pre><code class="bash">mui.ready(function () &#123;           &#125;)</code></pre><h3 id="关于加载顺序"><a href="#关于加载顺序" class="headerlink" title="关于加载顺序"></a>关于加载顺序</h3><blockquote><p>plus的ready的时间，在2016年12月后的ios版本上，其实是随时可用状态，不需要plus ready概念，但为了保持向下兼容，也仍然存在plus的ready事件；而安卓版本，plus的ready的时间是可以调节的。</p></blockquote><p>具体参考：<a href="http://ask.dcloud.net.cn/article/921">http://ask.dcloud.net.cn/article/921</a><br>而mui的ready一般伴随DOMContentLoaded而完成。<br>详细的启动时序参考这里：<a href="http://ask.dcloud.net.cn/article/571">http://ask.dcloud.net.cn/article/571</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> uniApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office的另类安装方法</title>
      <link href="/2022/10/13/tool5/"/>
      <url>/2022/10/13/tool5/</url>
      
        <content type="html"><![CDATA[<a href="https://www.bilibili.com/video/BV193411K7Yq/?spm_id_from=333.337.search-card.all.click&vd_source=d476ccd7f594c6a924ede109727a1a64" title="" target="">office的另类安装方法</a>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn commit时候一直显示please wait，且一直不动</title>
      <link href="/2022/10/13/tool4/"/>
      <url>/2022/10/13/tool4/</url>
      
        <content type="html"><![CDATA[<p>解决方案：<br>node_modules 这个文件右键，选择TortoiseSVN，再选择Unversion and add to ignore list   就可以了；<br>因为SVN检索node_modules文件系统比较慢。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用命令</title>
      <link href="/2022/10/13/tool3/"/>
      <url>/2022/10/13/tool3/</url>
      
        <content type="html"><![CDATA[<p>1).命令可以查看nginx的服务进程信息</p><blockquote><p>tasklist &#x2F;fi “imagename eq nginx.exe”</p></blockquote><p>2).命令可以关闭nginx的服务进程[所有的，慎用]</p><blockquote><p>taskkill &#x2F;fi “imagename eq nginx.exe” &#x2F;f</p></blockquote><p>3).启动nginx[前提是配置了conf]</p><blockquote><p>Start nginx</p></blockquote><span id="more"></span><p>4).查看nginx的版本号</p><blockquote><p>nginx -v</p></blockquote><p>5).停止nginx</p><blockquote><p>nginx -s stop</p></blockquote><p>6).快速停止或关闭nginx</p><blockquote><p>nginx -s stop</p></blockquote><p>7).正常停止或关闭nginx</p><blockquote><p>nginx -s quit</p></blockquote><p>8).配置文件修改后重载命令</p><blockquote><p>nginx -s reload</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode常用的插件集合</title>
      <link href="/2022/10/13/tool2/"/>
      <url>/2022/10/13/tool2/</url>
      
        <content type="html"><![CDATA[<ol><li>Vetur&#x2F;Volar ：vue&#x2F;vue3语法高亮、智能感知、Emmet等, 包含格式化功能， Alt+Shift+F （格式化全文）</li><li>ESLint : 校验js代码规范</li><li>Prettier - Code formatter ： 格式化js、css代码插件</li><li>open in browser ： 在文件右键 可以选择在浏览器预览</li><li>Auto Rename Tag : 重命名一个HTML &#x2F; XML标签时，自动重命名配对的HTML &#x2F; XML标签<span id="more"></span></li><li>Path Intellisense ：路径自动补全插件</li><li>Bracket Pair Colorizer ：各种结对的括号颜色高亮</li><li>HTML CSS Support ： html 标签上 class 智能提示当前项目所支持的样式</li><li>HTML Snippets： H5代码片段以及提示</li><li>CSS Peek： css 样式追踪</li><li>filesize： 在底部状态栏显示当前文件大小，点击后还可以看到详细创建、修改时间</li><li>REST Client ：优雅调试接口</li><li>npm Intellisense：导入语句自动补全npm模块名称</li><li>Code Runner ：代码一键运行，支持超过40种语言</li><li>Color Info ： CSS 中使用颜色得色彩模型的（HEX、 RGB、HSL 和 CMYK）</li><li>Format Files ： 一键格式化目录下所有代码</li><li>image preview ：鼠标hover图片路径上，显示图像预览</li><li>JavaScript Booster ：代码重构，简化插件（把var转为const或者let，去除多余的else语句，合并声明和初始化）</li><li>Debugger for Chrome：编辑器中打断点，轻松地在Chrome里调试JavaScrip</li><li>GitLens ：丰富的git日志插件</li><li>Material Icon Theme：Material主题图标</li><li>Sea Green Theme：主题</li><li>Chinese (Simplified) Language Pack for Visual Studio Code：中文（简体）语言包为VS Code提供本地化界面</li><li>Alignment：根据&#x3D;、:、*&#x3D;、+&#x3D;、&#x3D;&gt;、&#x2F;&#x3D;等符号对选中代码快速对齐</li><li>Debug Visualizer：实现算法可视化插件</li><li>Settings Sync：同步 Visual Studio Code 设置</li><li>Turbo Console Log：快捷console.log</li><li>LeetCode：刷题网站 LeetCode插件</li><li>:emojisense: ：快速挑选 Markdown 中的 Emoji。</li><li>Live Server：加载功能的本地开发服务器，以处理静态和动态页面。</li></ol><p>原文链接：<a href="https://blog.csdn.net/tangkebo/article/details/117339968">https://blog.csdn.net/tangkebo/article/details/117339968</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm 实现一次执行多个指令</title>
      <link href="/2022/10/13/tool1/"/>
      <url>/2022/10/13/tool1/</url>
      
        <content type="html"><![CDATA[<p>现在有这么一个情况是存在以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;electron-forge start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;node build/build.js&quot;</span>,       </span><br><span class="line">    <span class="string">&quot;package&quot;</span>:<span class="string">&quot;electron-packager . Electron_Vue应用 --platform=win32 --arch=x64 --icon=favicon.ico --out=./out --asar --app-version=1.0.1 --overwrite --ignore=node_modules&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们将要执行start和electron指令，常规的做法是依次npm run start和npm run electron即可；</p><span id="more"></span><p>但有时候需要多开终端命令窗口，比如以上情况：我们在执行npm run start 后是启动了vue网站，无法在当前终端命令窗口中执行第二个指令，否则，网站就关闭了；</p><p>或者是操作更多条指令的时候，这样一个一个去执行比较麻烦，那么有没有只需要执行一条指令就可以依次执行多条指令的办法呢？</p><p>起初我想到的是：直接将两个指令拼接成一个指令即：</p> <blockquote><p>“serve”: “npm run start&amp;&amp;npm run electron” </p></blockquote><p> 但是实际执行：npm run serve后发现，它只能执行拼接指令的第一条指令，另外一条指令直接被忽略了。</p><p>正确的做法是要使用到模块：concurrently</p><h2 id="1）安装concurrently模块"><a href="#1）安装concurrently模块" class="headerlink" title="1）安装concurrently模块"></a>1）安装concurrently模块</h2><blockquote><p>npm install concurrently –save</p></blockquote><h2 id="2）将拼接指令修改为"><a href="#2）将拼接指令修改为" class="headerlink" title="2）将拼接指令修改为"></a>2）将拼接指令修改为</h2><blockquote><p>“serve”: “concurrently &quot;npm run start&quot; &quot;npm run electron&quot;“,</p></blockquote><p>这样，我们通过执行 npm run serve ，工具就会自动依次执行：npm run start、npm run electron 两个指令了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 常用的UI组件与框架总结</title>
      <link href="/2022/10/08/vue27/"/>
      <url>/2022/10/08/vue27/</url>
      
        <content type="html"><![CDATA[<h3 id="一、UI组件及框架（原文地址：https-tangjiusheng-com-vue-155-html）"><a href="#一、UI组件及框架（原文地址：https-tangjiusheng-com-vue-155-html）" class="headerlink" title="一、UI组件及框架（原文地址：https://tangjiusheng.com/vue/155.html）"></a>一、UI组件及框架（原文地址：<a href="https://tangjiusheng.com/vue/155.html%EF%BC%89">https://tangjiusheng.com/vue/155.html）</a></h3><p>element - 饿了么出品的Vue2的web UI工具套件</p><p>mint-ui - Vue 2的移动UI元素</p><p>iview - 基于 Vuejs 的开源 UI 组件库</p><p>Keen-UI - 轻量级的基本UI组件合集</p><p>vue-material - 通过Vue Material和Vue 2建立精美的app应用</p><p>muse-ui - 三端样式一致的响应式 UI 库</p><p>vuetify - 为移动而生的Vue JS 2组件框架</p><span id="more"></span><p>vonic - 快速构建移动端单页应用</p><p>vue-blu - 帮助你轻松创建web应用</p><p>vue-multiselect - Vue.js选择框解决方案</p><p>VueCircleMenu - 漂亮的vue圆环菜单</p><p>vue-chat - vuejs和vuex及webpack的聊天示例</p><p>radon-ui - 快速开发产品的Vue组件库</p><p>vue-waterfall - Vue.js的瀑布布局组件</p><p>vue-carbon - 基于 vue 开发MD风格的移动端</p><p>vue-beauty - 由vue和ant design创建的优美UI组件</p><p>bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件</p><p>vueAdmin - 基于vuejs2和element的简单的管理员模板</p><p>vue-ztree - 用 vue 写的树层级组件</p><p>vue-tree - vue树视图组件</p><p>vue-tabs - 多tab页轻型框架</p><h3 id="二、滚动scroll组件"><a href="#二、滚动scroll组件" class="headerlink" title="二、滚动scroll组件"></a>二、滚动scroll组件</h3><p>vue-scroller - Vonic UI的功能性组件</p><p>vue-mugen-scroll - 无限滚动组件</p><p>vue-infinite-loading - VueJS的无限滚动插件</p><p>vue-virtual-scroller - 带任意数目数据的顺畅的滚动</p><p>vue-infinite-scroll - VueJS的无限滚动指令</p><p>vue-scrollbar - 最简单的滚动区域组件</p><p>vue-scroll - vue滚动</p><p>vue-pull-to-refresh - Vue2的上拉下拉</p><p>mint-loadmore - VueJS的双向下拉刷新组件</p><p>vue-smoothscroll - smoothscroll的VueJS版本</p><h3 id="三、slider组件"><a href="#三、slider组件" class="headerlink" title="三、slider组件"></a>三、slider组件</h3><p>vue-awesome-swiper - vue.js触摸滑动组件</p><p>vue-slick - 实现流畅轮播框的vue组件</p><p>vue-swipe - VueJS触摸滑块</p><p>vue-swiper - 易于使用的滑块组件</p><p>vue-images - 显示一组图片的lightbox组件</p><p>vue-carousel-3d - VueJS的3D轮播组件</p><p>vue-slide - vue轻量级滑动组件</p><p>vue-slider - vue 滑动组件</p><p>vue-m-carousel - vue 移动端轮播组件</p><p>dd-vue-component - 订单来了的公共组件库</p><p>vue-easy-slider - Vue 2.x的滑块组件</p><h3 id="四、编辑器"><a href="#四、编辑器" class="headerlink" title="四、编辑器"></a>四、编辑器</h3><p>markcook - 好看的markdown编辑器</p><p>eme - 优雅的Markdown编辑器</p><p>vue-syntax-highlight - Sublime Text语法高亮</p><p>vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器</p><p>Vueditor - 所见即所得的编辑器</p><p>vue-html5-editor - html5所见即所得编辑器</p><p>vue2-editor - HTML编辑器</p><p>vue-simplemde - VueJS的Markdown编辑器组件</p><p>vue-quill - vue组件构建quill编辑器</p><h3 id="五、图表"><a href="#五、图表" class="headerlink" title="五、图表"></a>五、图表</h3><p>vue-table - 简化数据表格</p><p>vue-chartjs - vue中的Chartjs的封装</p><p>vue-charts - 轻松渲染一个图表</p><p>vue-chart - 强大的高速的vue图表解析</p><p>vue-highcharts - HighCharts组件</p><p>chartjs - Vue Bulma的chartjs组件</p><p>vue-chartkick - VueJS一行代码实现优美图表</p><h3 id="六、日历"><a href="#六、日历" class="headerlink" title="六、日历"></a>六、日历</h3><p>vue-calendar - 日期选择插件</p><p>vue-datepicker - 日历和日期选择组件</p><p>vue-datetime-picker - 日期时间选择控件</p><p>vue2-calendar - 支持lunar和日期事件的日期选择器</p><p>vue-fullcalendar - 基于vue.js的全日历组件</p><p>vue-datepicker - 漂亮的Vue日期选择器组件</p><p>datepicker - 基于flatpickr的时间选择组件</p><p>vue2-timepicker - 下拉时间选择器</p><p>vue-date-picker - VueJS日期选择器组件</p><p>vue-datepicker-simple - 基于vue的日期选择器</p><h3 id="七、地址选择"><a href="#七、地址选择" class="headerlink" title="七、地址选择"></a>七、地址选择</h3><p>vue-city - 城市选择器</p><p>vue-region-picker - 选择中国的省份市和地区</p><h3 id="八、地图"><a href="#八、地图" class="headerlink" title="八、地图"></a>八、地图</h3><p>vue-amap - 基于Vue 2和高德地图的地图组件</p><p>vue-google-maps - 带有双向数据绑定Google地图组件</p><p>vue-baidu-map- 基于 Vue 2的百度地图组件库</p><p>vue-cmap - Vue China map可视化组件</p><h3 id="九、播放器"><a href="#九、播放器" class="headerlink" title="九、播放器"></a>九、播放器</h3><p>vue-video-player - VueJS视频及直播播放器</p><p>vue-video - Vue.js的HTML5视频播放器</p><p>vue-music-master - vue手机端网页音乐播放器</p><h3 id="十、文件上传"><a href="#十、文件上传" class="headerlink" title="十、文件上传"></a>十、文件上传</h3><p>vue-upload-component - Vuejs文件上传组件</p><p>vue-core-image-upload - 轻量级的vue上传插件</p><p>vue-dropzone - 用于文件上传的Vue组件</p><h3 id="十一、图片处理"><a href="#十一、图片处理" class="headerlink" title="十一、图片处理"></a>十一、图片处理</h3><p>vue-lazyload-img - 移动优化的vue图片懒加载插件</p><p>vue-image-crop-upload - vue图片剪裁上传组件</p><p>vue-svgicon - 创建svg图标组件的工具</p><p>vue-img-loader - 图片加载UI组件</p><p>vue-image-clip- 基于vue的图像剪辑组件</p><p>vue-progressive-image - Vue的渐进图像加载插件</p><h3 id="十二、提示"><a href="#十二、提示" class="headerlink" title="十二、提示"></a>十二、提示</h3><p>vue-toast-mobile - VueJS的toast插件</p><p>vue-msgbox - vuejs的消息框</p><p>vue-tooltip - 带绑定信息提示的提示工具</p><p>vue-verify-pop - 带气泡提示的vue校验插件</p><h3 id="十三、进度条"><a href="#十三、进度条" class="headerlink" title="十三、进度条"></a>十三、进度条</h3><p>vue-radial-progress - Vue.js放射性进度条组件</p><p>vue-progressbar - vue轻量级进度条</p><p>vue2-loading-bar - 最简单的仿Youtube加载条视图</p><h3 id="十四、开发框架汇总"><a href="#十四、开发框架汇总" class="headerlink" title="十四、开发框架汇总"></a>十四、开发框架汇总</h3><p>vue-admin - Vue管理面板框架</p><p>electron-vue - Electron及VueJS快速启动样板</p><p>vue-2.0-boilerplate - Vue2单页应用样板</p><p>vue-webgulp - 仿VueJS Vue loader示例</p><p>vue-bulma - 轻量级高性能MVVM Admin UI框架</p><p>vue-spa-template - 前后端分离后的单页应用开发</p><p>Framework7-Vue - VueJS与Framework7结合</p><p>vue-element-starter - vue启动页</p><h3 id="十五、实用库汇总"><a href="#十五、实用库汇总" class="headerlink" title="十五、实用库汇总"></a>十五、实用库汇总</h3><p>vuelidate - 简单轻量级的基于模块的Vue.js验证</p><p>qingcheng - qingcheng主题</p><p>vuex - 专为 Vue.js 应用程序开发的状态管理模式</p><p>vue-axios - 将axios整合到VueJS的封装</p><p>vue-desktop - 创建管理面板网站的UI库</p><p>vue-meta - 管理app的meta信息</p><p>avoriaz - VueJS测试实用工具库</p><p>vue-framework7 - 结合VueJS使用的Framework7组件</p><p>vue-lazy-render - 用于Vue组件的延迟渲染</p><p>vue-svg-icon - vue2的可变彩色svg图标方案</p><p>vue-online - reactive的在线和离线组件</p><p>vue-password-strength-meter - 交互式密码强度计</p><p>vuep - 用实时编辑和预览来渲染Vue组件</p><p>vue-bootstrap-modal - vue的Bootstrap样式组件</p><p>element-admin - 支持 vuecli 的 Element UI 的后台模板</p><p>vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件</p><p>cleave - 基于cleave.js的Cleave组件</p><p>vue-events - 简化事件的VueJS插件</p><p>http-vue-loader - 从html及js环境加载vue文件</p><p>vue-electron - 将选择的API封装到Vue对象中的插件</p><p>vue-router-transition - 页面过渡插件</p><p>vuemit - 处理VueJS事件</p><p>vue-cordova - Cordova的VueJS插件</p><p>vue-qart - 用于qartjs的Vue2指令</p><p>vue-websocket - VueJS的Websocket插件</p><p>vue-gesture - VueJS的手势事件插件</p><p>vue-local-storage - 具有类型支持的Vuejs本地储存插件</p><p>lazy-vue - 懒加载图片</p><p>vue-lazyloadImg - 图片懒加载插件</p><p>vue-bus - VueJS的事件总线</p><p>vue-observe-visibility - 当元素在页面上可见或隐藏时检测</p><p>vue-notifications - 非阻塞通知库</p><p>v-media-query - vue中添加用于配合媒体查询的方法</p><p>vuex-shared-mutations - 分享某种Vuex mutations</p><p>vue-lazy-component - 懒加载组件或者元素的Vue指令</p><p>vue-reactive-storage - vue插件的Reactive层</p><p>vue-ts-loader - 在Vue装载机检查脚本</p><p>vue-pagination-2 - 简单通用的分页组件</p><p>vuex-i18n - 定位插件</p><p>Vue.resize - 检测HTML调整大小事件的vue指令</p><p>vue-zoombox - 一个高级zoombox</p><p>leo-vue-validator - 异步的表单验证组件</p><p>modal - Vue Bulma的modal组件</p><p>Famous-Vue - Famous库的vue组件</p><p>vue-input-autosize - 基于内容自动调整文本输入的大小</p><p>vue-file-base64 - 将文件转换为Base64的vue组件</p><p>Vue-Easy-Validator - 简单的表单验证</p><p>vue-truncate-filter - 截断字符串的VueJS过滤器</p><h3 id="十六、服务端"><a href="#十六、服务端" class="headerlink" title="十六、服务端"></a>十六、服务端</h3><p>vue-ssr - 结合Express使用Vue2服务端渲染</p><p>nuxt.js - 用于服务器渲染Vue app的最小化框架</p><p>vue-ssr - 非常简单的VueJS服务器端渲染模板</p><p>vue-easy-renderer - Nodejs服务端渲染</p><p>express-vue - 简单的使用服务器端渲染vue.js</p><h3 id="十七、辅助工具"><a href="#十七、辅助工具" class="headerlink" title="十七、辅助工具"></a>十七、辅助工具</h3><p>DejaVue - Vuejs可视化及压力测试</p><p>vue-generate-component - 轻松生成Vue js组件的CLI工具</p><p>vscode-VueHelper - 目前vscode最好的vue代码提示插件</p><p>vue-play - 展示Vue组件的最小化框架</p><p>VuejsStarterKit - vuejs starter套件</p><p>vue-multipage-cli - 简单的多页CLI</p><h3 id="十八、应用实例"><a href="#十八、应用实例" class="headerlink" title="十八、应用实例"></a>十八、应用实例</h3><p>pagekit - 轻量级的CMS建站系统</p><p>vuedo - 博客平台</p><p>koel - 基于网络的个人音频流媒体服务</p><p>CMS-of-Blog - 博客内容管理器</p><p>vue-cnode - 重写vue版cnode社区</p><p>vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客</p><p>swoole-vue-webim - Web版的聊天应用</p><p>fewords - 功能极其简单的笔记本</p><p>jackblog-vue - 个人博客系统</p><p>vue-blog - 使用Vue2.0 和Vuex的vue-blog</p><p>vue-dashing-js - nuvo-dashing-js的fork</p><p>rss-reader - 简单的rss阅读器</p><h3 id="十九、Demo示例"><a href="#十九、Demo示例" class="headerlink" title="十九、Demo示例"></a>十九、Demo示例</h3><p>eleme - 高仿饿了么app商家详情</p><p>NeteaseCloudWebApp - 高仿网易云音乐的webapp</p><p>vue-zhihu-daily - 知乎日报 with Vuejs</p><p>Vue-cnodejs - 基于vue重写Cnodejs.org的webapp</p><p>vue2-demo - 从零构建vue2 + vue-router + vuex 开发环境</p><p>vue-wechat - vue.js开发微信app界面</p><p>vue-music - Vue 音乐搜索播放</p><p>maizuo - vue&#x2F;vuex&#x2F;redux仿卖座网</p><p>vue-demo - vue简易留言板</p><p>spa-starter-kit - 单页应用启动套件</p><p>zhihudaily-vue - 知乎日报web版</p><p>douban - 模仿豆瓣前端</p><p>vue-Meizi - vue最新实战项目</p><p>vue-demo-kugou - vuejs仿写酷狗音乐webapp</p><p>vue2.0-taopiaopiao - vue2.0与express构建淘票票页面</p><p>node-vue-server-webpack - Node.js+Vue.js+webpack快速开发框架</p><p>VueDemo_Sell_Eleme - Vue2高仿饿了么外卖平台</p><p>vue-leancloud-blog - 一个前后端完全分离的单页应用</p><p>vue-fis3 - 流行开源工具集成demo</p><p>mi-by-vue - VueJS仿小米官网</p><p>vue-demo-maizuo - 使用Vue2全家桶仿制卖座电影</p><p>vue2.x-douban - Vue2实现简易豆瓣电影webApp</p><p>vue-adminLte-vue-router - vue和adminLte整合应用</p><p>vue-zhihudaily - 知乎日报 Web 版本</p><p>Zhihu-Daily-Vue.js - Vuejs单页网页应用</p><p>vue-axios-github - 登录拦截登出功能</p><p>vue2.x-Cnode - 基于vue全家桶的Cnode社区</p><p>hello-vue-django - 使用带有Django的vuejs的样板项目</p><p>websocket_chat - 基于vue和websocket的多人在线聊天室</p><p>x-blog - 开源的个人blog项目</p><p>vue-cnode - vue单页应用demo</p><p>vue-express-mongodb - 简单的前后端分离案例</p><p>photoShare - 基于图片分享的社交平台</p><p>notepad - 本地存储的记事本</p><p>vue-zhihudaily-2.0 - 使用Vue2.0+vue-router+vuex创建的zhihudaily</p><p>vueBlog - 前后端分离博客</p><p>Zhihu_Daily - 基于Vue和Nodejs的Web单页应用</p><p>vue-ruby-china - VueJS框架搭建的rubychina平台</p><p>vue-koa-demo - 使用Vue2和Koa1的全栈demo</p><p>life-app-vue - 使用vue2完成多功能集合到小webapp</p><p>vue-trip - vue2做的出行webapp</p><p>github-explorer - 寻找最有趣的GitHub库</p><p>vue-ssr-boilerplate - 精简版的ofvue-hackernews-2</p><p>vue-bushishiren - 不是诗人应用</p><p>houtai - 基于vue和Element的后台管理系统</p><p>ios7-vue - 使用vue2.0 vue-router vuex模拟ios7</p><p>Framework7-VueJS - 使用移动框架的示例</p><p>cnode-vue - 基于vue和vue-router构建的cnodejs web网站SPA</p><p>vue-cli-multipage-bootstrap - 将vue官方在线示例整合到组件中</p><p>vue-cnode - 用 Vue 做的 CNode 官网</p><p>seeMusic - 跨平台云音乐播放器</p><p>HyaReader - 移动友好的阅读器</p><p>zhihu-daily - 轻松查看知乎日报内容</p><p>vue-cnode - 使用cNode社区提供的接口</p><p>zhihu-daily-vue - 知乎日报</p><p>vue-dropload - 用以测试下拉加载与简单路由</p><p>vue-cnode-mobile - 搭建cnode社区</p><p>Vuejs-SalePlatform - vuejs搭建的售卖平台demo</p><p>vue-memo - 用 vue写的记事本应用</p><p>sls-vuex2-demo - vuex2商城购物车demo</p><p>v-notes - 简单美观的记事本</p><p>vue-starter - VueJs项目的简单启动页</p><h3 id="二十、其他实用插件汇总"><a href="#二十、其他实用插件汇总" class="headerlink" title="二十、其他实用插件汇总"></a>二十、其他实用插件汇总</h3><p>vue-dragging- 使元素可以拖拽</p><p>Vue.Draggable- 实现拖放和视图模型数组同步</p><p>vue-picture-input- 移动友好的图片文件输入组件</p><p>rubik- 基于Vuejs2的开源 UI 组件库</p><p>VueStar- 带星星动画的vue点赞按钮</p><p>vue-tables-2- 显示数据的bootstrap样式网格</p><p>DataVisualization- 数据可视化</p><p>vue-drag-and-drop-list- 创建排序列表的Vue指令</p><p>vuwe- 基于微信WeUI所开发的专用于Vue2的组件库</p><p>vue-typer- 模拟用户输入选择和删除文本的Vue组件</p><p>vue-impression- 移动Vuejs2 UI元素</p><p>vue-datatable- 使用Vuejs创建的DataTableView</p><p>vue-instant- 轻松创建自动提示的自定义搜索控件</p><p>vue-slider-component- 在vue1和vue2中使用滑块</p><p>vue-touch-ripple- vuejs的触摸ripple组件</p><p>coffeebreak- 实时编辑CSS组件工具</p><p>vue-datasource- 创建VueJS动态表格</p><p>handsontable- 网页表格组件</p><p>vue-bootstrap-table- 可排序可检索的表格</p><p>vue-google-signin-button- 导入谷歌登录按钮</p><p>vue-float-label- VueJS浮动标签模式</p><p>vue-tagsinput- 基于VueJS的标签组件</p><p>vue-social-sharing- 社交分享组件</p><p>vue-popup-mixin- 用于管理弹出框的遮盖层</p><p>cubeex- 包含一套完整的移动UI</p><p>vue-fullcalendar- vue FullCalendar封装</p><p>vue-material-design- Vue MD风格组件</p><p>vue-morris- Vuejs组件封装Morrisjs库</p><p>we-vue- Vue2及weui1开发的组件</p><p>vue-form-2- 全面的HTML表单管理的解决方案</p><p>vue-side-nav- 响应式的侧边导航</p><p>mint-indicator- VueJS移动加载指示器插件</p><p>vue-ripple- 制作谷歌MD风格涟漪效果的Vue组件</p><p>vue-touch-keyboard- VueJS虚拟键盘组件</p><p>vue-parallax- 整洁的视觉效果</p><p>vue-typewriter- vue组件类型</p><p>vue-ios-alertview- iOS7+ 风格的alertview服务</p><p>paco-ui-vue- PACOUI的vue组件</p><p>vue-button- Vue按钮组件</p><h2 id="UI组件（原文链接：https-www-cnblogs-com-calamus-p-8242446-html）"><a href="#UI组件（原文链接：https-www-cnblogs-com-calamus-p-8242446-html）" class="headerlink" title="UI组件（原文链接：https://www.cnblogs.com/calamus/p/8242446.html）"></a>UI组件（原文链接：<a href="https://www.cnblogs.com/calamus/p/8242446.html%EF%BC%89">https://www.cnblogs.com/calamus/p/8242446.html）</a></h2><p>element - 饿了么出品的Vue2的web UI工具套件<br>Vux - 基于Vue和WeUI的组件库<br>mint-ui - Vue 2的移动UI元素<br>iview - 基于 Vuejs 的开源 UI 组件库<br>Keen-UI - 轻量级的基本UI组件合集<br>vue-material - 通过Vue Material和Vue 2建立精美的app应用<br>muse-ui - 三端样式一致的响应式 UI 库<br>vuetify - 为移动而生的Vue JS 2组件框架<br>vonic - 快速构建移动端单页应用<br>eme - 优雅的Markdown编辑器<br>vue-multiselect - Vue.js选择框解决方案<br>vue-table - 简化数据表格<br>VueCircleMenu - 漂亮的vue圆环菜单<br>vue-chat - vuejs和vuex及webpack的聊天示例<br>radon-ui - 快速开发产品的Vue组件库<br>vue-waterfall - Vue.js的瀑布布局组件<br>vue-carbon - 基于 vue 开发MD风格的移动端<br>vue-beauty - 由vue和ant design创建的优美UI组件<br>vue-blu - 帮助你轻松创建web应用<br>vueAdmin - 基于vuejs2和element的简单的管理员模板<br>vue-syntax-highlight - Sublime Text语法高亮<br>vue-infinite-scroll - VueJS的无限滚动指令<br>Vue.Draggable - 实现拖放和视图模型数组同步<br>vue-awesome-swiper - vue.js触摸滑动组件<br>vue-calendar - 日期选择插件<br>bootstrap-vue - 应用于Vuejs2的Twitter的Bootstrap 4组件<br>vue-swipe - VueJS触摸滑块<br>vue-amap - 基于Vue 2和高德地图的地图组件<br>vue-chartjs - vue中的Chartjs的封装<br>vue-datepicker - 日历和日期选择组件<br>markcook - 好看的markdown编辑器<br>vue-google-maps - 带有双向数据绑定Google地图组件<br>vue-progressbar - vue轻量级进度条<br>vue-picture-input - 移动友好的图片文件输入组件<br>vue-infinite-loading - VueJS的无限滚动插件<br>vue-upload-component - Vuejs文件上传组件<br>vue-datetime-picker - 日期时间选择控件<br>vue-scroller - Vonic UI的功能性组件<br>vue2-calendar - 支持lunar和日期事件的日期选择器<br>vue-video-player - VueJS视频及直播播放器<br>vue-fullcalendar - 基于vue.js的全日历组件<br>rubik - 基于Vuejs2的开源 UI 组件库<br>VueStar - 带星星动画的vue点赞按钮<br>vue-mugen-scroll - 无限滚动组件<br>mint-loadmore - VueJS的双向下拉刷新组件<br>vue-tables-2 - 显示数据的bootstrap样式网格<br>vue-virtual-scroller - 带任意数目数据的顺畅的滚动<br>DataVisualization - 数据可视化<br>vue-quill-editor - 基于Quill适用于Vue2的富文本编辑器<br>Vueditor - 所见即所得的编辑器<br>vue-html5-editor - html5所见即所得编辑器<br>vue-msgbox - vuejs的消息框<br>vue-slider - vue 滑动组件<br>vue-core-image-upload - 轻量级的vue上传插件<br>vue-slide - vue轻量级滑动组件<br>vue-lazyload-img - 移动优化的vue图片懒加载插件<br>vue-drag-and-drop-list - 创建排序列表的Vue指令<br>vue-progressive-image - Vue的渐进图像加载插件<br>vuwe - 基于微信WeUI所开发的专用于Vue2的组件库<br>vue-dropzone - 用于文件上传的Vue组件<br>vue-charts - 轻松渲染一个图表<br>vue-swiper - 易于使用的滑块组件<br>vue-images - 显示一组图片的lightbox组件<br>vue-carousel-3d - VueJS的3D轮播组件<br>vue-region-picker - 选择中国的省份市和地区<br>vue-typer - 模拟用户输入选择和删除文本的Vue组件<br>vue-impression - 移动Vuejs2 UI元素<br>vue-datatable - 使用Vuejs创建的DataTableView<br>vue-instant - 轻松创建自动提示的自定义搜索控件<br>vue-dragging - 使元素可以拖拽<br>vue-slider-component - 在vue1和vue2中使用滑块<br>vue2-loading-bar - 最简单的仿Youtube加载条视图<br>vue-datepicker - 漂亮的Vue日期选择器组件<br>vue-video - Vue.js的HTML5视频播放器<br>vue-toast-mobile - VueJS的toast插件<br>vue-image-crop-upload - vue图片剪裁上传组件<br>vue-tooltip - 带绑定信息提示的提示工具<br>vue-highcharts - HighCharts组件<br>vue-touch-ripple - vuejs的触摸ripple组件<br>coffeebreak - 实时编辑CSS组件工具<br>vue-datasource - 创建VueJS动态表格<br>vue2-timepicker - 下拉时间选择器<br>vue-date-picker - VueJS日期选择器组件<br>vue-scrollbar - 最简单的滚动区域组件<br>vue-quill - vue组件构建quill编辑器<br>vue-google-signin-button - 导入谷歌登录按钮<br>vue-svgicon - 创建svg图标组件的工具<br>vue-float-label - VueJS浮动标签模式<br>vue-baidu-map - 基于 Vue 2的百度地图组件库<br>vue-social-sharing - 社交分享组件<br>vue2-editor - HTML编辑器<br>vue-tagsinput - 基于VueJS的标签组件<br>vue-easy-slider - Vue 2.x的滑块组件<br>datepicker - 基于flatpickr的时间选择组件<br>vue-chart - 强大的高速的vue图表解析<br>vue-music-master - vue手机端网页音乐播放器<br>handsontable - 网页表格组件<br>vue-simplemde - VueJS的Markdown编辑器组件<br>vue-popup-mixin - 用于管理弹出框的遮盖层<br>cubeex - 包含一套完整的移动UI<br>vue-fullcalendar - vue FullCalendar封装<br>vue-material-design - Vue MD风格组件<br>vue-morris - Vuejs组件封装Morrisjs库<br>we-vue - Vue2及weui1开发的组件<br>vue-image-clip - 基于vue的图像剪辑组件<br>vue-bootstrap-table - 可排序可检索的表格<br>vue-radial-progress - Vue.js放射性进度条组件<br>vue-slick - 实现流畅轮播框的vue组件<br>vue-pull-to-refresh - Vue2的上拉下拉<br>vue-form-2 - 全面的HTML表单管理的解决方案<br>vue-side-nav - 响应式的侧边导航<br>mint-indicator - VueJS移动加载指示器插件<br>chartjs - Vue Bulma的chartjs组件<br>vue-scroll - vue滚动<br>vue-ripple - 制作谷歌MD风格涟漪效果的Vue组件<br>vue-touch-keyboard - VueJS虚拟键盘组件<br>vue-chartkick - VueJS一行代码实现优美图表<br>vue-ztree - 用 vue 写的树层级组件<br>vue-m-carousel - vue 移动端轮播组件<br>vue-datepicker-simple - 基于vue的日期选择器<br>vue-tabs - 多tab页轻型框架<br>vue-verify-pop - 带气泡提示的vue校验插件<br>vue-parallax - 整洁的视觉效果<br>vue-img-loader - 图片加载UI组件<br>vue-typewriter - vue组件类型<br>vue-smoothscroll - smoothscroll的VueJS版本<br>vue-city - 城市选择器<br>vue-tree - vue树视图组件<br>vue-ios-alertview - iOS7+ 风格的alertview服务<br>dd-vue-component - 订单来了的公共组件库<br>paco-ui-vue - PACOUI的vue组件<br>vue-cmap - Vue China map可视化组件<br>vue-button - Vue按钮组件<br>开发框架<br>vue.js - 流行的轻量高效的前端组件化方案<br>vue-admin - Vue管理面板框架<br>electron-vue - Electron及VueJS快速启动样板<br>vue-2.0-boilerplate - Vue2单页应用样板<br>vue-spa-template - 前后端分离后的单页应用开发<br>Framework7-Vue - VueJS与Framework7结合<br>vue-bulma - 轻量级高性能MVVM Admin UI框架<br>vue-webgulp - 仿VueJS Vue loader示例<br>vue-element-starter - vue启动页<br>实用库<br>vuex - 专为 Vue.js 应用程序开发的状态管理模式<br>vuelidate - 简单轻量级的基于模块的Vue.js验证<br>qingcheng - qingcheng主题<br>vue-desktop - 创建管理面板网站的UI库<br>vue-meta - 管理app的meta信息<br>vue-axios - 将axios整合到VueJS的封装<br>vue-svg-icon - vue2的可变彩色svg图标方案<br>avoriaz - VueJS测试实用工具库<br>vue-framework7 - 结合VueJS使用的Framework7组件<br>vue-bootstrap-modal - vue的Bootstrap样式组件<br>vuep - 用实时编辑和预览来渲染Vue组件<br>vue-online - reactive的在线和离线组件<br>vue-lazy-render - 用于Vue组件的延迟渲染<br>vue-password-strength-meter - 交互式密码强度计<br>element-admin - 支持 vuecli 的 Element UI 的后台模板<br>vue-electron - 将选择的API封装到Vue对象中的插件<br>cleave - 基于cleave.js的Cleave组件<br>vue-events - 简化事件的VueJS插件<br>vue-shortkey - 应用于Vue.js的Vue-ShortKey 插件<br>vue-cordova - Cordova的VueJS插件<br>vue-router-transition - 页面过渡插件<br>vue-gesture - VueJS的手势事件插件<br>http-vue-loader - 从html及js环境加载vue文件<br>vue-qart - 用于qartjs的Vue2指令<br>vuemit - 处理VueJS事件<br>vue-websocket - VueJS的Websocket插件<br>vue-local-storage - 具有类型支持的Vuejs本地储存插件<br>lazy-vue - 懒加载图片<br>vue-bus - VueJS的事件总线<br>vue-reactive-storage - vue插件的Reactive层<br>vue-notifications - 非阻塞通知库<br>vue-lazy-component - 懒加载组件或者元素的Vue指令<br>v-media-query - vue中添加用于配合媒体查询的方法<br>vue-observe-visibility - 当元素在页面上可见或隐藏时检测<br>vue-ts-loader - 在Vue装载机检查脚本<br>vue-pagination-2 - 简单通用的分页组件<br>vuex-i18n - 定位插件<br>Vue.resize - 检测HTML调整大小事件的vue指令<br>vuex-shared-mutations - 分享某种Vuex mutations<br>vue-file-base64 - 将文件转换为Base64的vue组件<br>modal - Vue Bulma的modal组件<br>Famous-Vue - Famous库的vue组件<br>leo-vue-validator - 异步的表单验证组件<br>Vue-Easy-Validator - 简单的表单验证<br>vue-truncate-filter - 截断字符串的VueJS过滤器<br>vue-zoombox - 一个高级zoombox<br>vue-input-autosize - 基于内容自动调整文本输入的大小<br>vue-lazyloadImg - 图片懒加载插件<br>服务端<br>nuxt.js - 用于服务器渲染Vue app的最小化框架<br>express-vue - 简单的使用服务器端渲染vue.js<br>vue-ssr - 非常简单的VueJS服务器端渲染模板<br>vue-ssr - 结合Express使用Vue2服务端渲染<br>vue-easy-renderer - Nodejs服务端渲染<br>辅助工具<br>DejaVue - Vuejs可视化及压力测试<br>vue-play - 展示Vue组件的最小化框架<br>vscode-VueHelper - 目前vscode最好的vue代码提示插件<br>vue-generate-component - 轻松生成Vue js组件的CLI工具<br>vue-multipage-cli - 简单的多页CLI<br>VuejsStarterKit - vuejs starter套件<br>应用实例<br>koel - 基于网络的个人音频流媒体服务<br>pagekit - 轻量级的CMS建站系统<br>vuedo - 博客平台<br>jackblog-vue - 个人博客系统<br>vue-cnode - 重写vue版cnode社区<br>CMS-of-Blog - 博客内容管理器<br>rss-reader - 简单的rss阅读器<br>vue-ghpages-blog - 依赖GitHub Pages无需本地生成的静态博客<br>swoole-vue-webim - Web版的聊天应用<br>vue-dashing-js - nuvo-dashing-js的fork<br>fewords - 功能极其简单的笔记本<br>vue-blog - 使用Vue2.0 和Vuex的vue-blog<br>Demo示例<br>Vue-cnodejs - 基于vue重写Cnodejs.org的webapp<br>NeteaseCloudWebApp - 高仿网易云音乐的webapp<br>vue-zhihu-daily - 知乎日报 with Vuejs<br>vue-wechat - vue.js开发微信app界面<br>vue2-demo - 从零构建vue2 + vue-router + vuex 开发环境<br>eleme - 高仿饿了么app商家详情<br>vue-demo - vue简易留言板<br>maizuo - vue&#x2F;vuex&#x2F;redux仿卖座网<br>spa-starter-kit - 单页应用启动套件<br>vue-music - Vue 音乐搜索播放<br>douban - 模仿豆瓣前端<br>vue-Meizi - vue最新实战项目<br>zhihudaily-vue - 知乎日报web版<br>vue-demo-kugou - vuejs仿写酷狗音乐webapp<br>VueDemo_Sell_Eleme - Vue2高仿饿了么外卖平台<br>vue2.0-taopiaopiao - vue2.0与express构建淘票票页面<br>vue-leancloud-blog - 一个前后端完全分离的单页应用<br>node-vue-server-webpack - Node.js+Vue.js+webpack快速开发框架<br>mi-by-vue - VueJS仿小米官网<br>vue-fis3 - 流行开源工具集成demo<br>vue2.x-douban - Vue2实现简易豆瓣电影webApp<br>vue-demo-maizuo - 使用Vue2全家桶仿制卖座电影<br>vue-zhihudaily - 知乎日报 Web 版本<br>vue-adminLte-vue-router - vue和adminLte整合应用<br>vue-axios-github - 登录拦截登出功能<br>Zhihu-Daily-Vue.js - Vuejs单页网页应用<br>hello-vue-django - 使用带有Django的vuejs的样板项目<br>vue-cnode - vue单页应用demo<br>x-blog - 开源的个人blog项目<br>vue-express-mongodb - 简单的前后端分离案例<br>websocket_chat - 基于vue和websocket的多人在线聊天室<br>photoShare - 基于图片分享的社交平台<br>vue-zhihudaily-2.0 - 使用Vue2.0+vue-router+vuex创建的zhihudaily<br>notepad - 本地存储的记事本<br>vueBlog - 前后端分离博客<br>vue-ruby-china - VueJS框架搭建的rubychina平台<br>Zhihu_Daily - 基于Vue和Nodejs的Web单页应用<br>vue-koa-demo - 使用Vue2和Koa1的全栈demo<br>vue2.x-Cnode - 基于vue全家桶的Cnode社区<br>life-app-vue - 使用vue2完成多功能集合到小webapp<br>github-explorer - 寻找最有趣的GitHub库<br>vue-trip - vue2做的出行webapp<br>vue-ssr-boilerplate - 精简版的ofvue-hackernews-2<br>vue-bushishiren - 不是诗人应用<br>houtai - 基于vue和Element的后台管理系统<br>ios7-vue - 使用vue2.0 vue-router vuex模拟ios7<br>Framework7-VueJS - 使用移动框架的示例<br>cnode-vue - 基于vue和vue-router构建的cnodejs web网站SPA<br>vue-cli-multipage-bootstrap - 将vue官方在线示例整合到组件中<br>vue-cnode - 用 Vue 做的 CNode 官网<br>HyaReader - 移动友好的阅读器<br>zhihu-daily - 轻松查看知乎日报内容<br>seeMusic - 跨平台云音乐播放器<br>vue-cnode - 使用cNode社区提供的接口<br>zhihu-daily-vue - 知乎日报<br>sls-vuex2-demo - vuex2商城购物车demo<br>vue-dropload - 用以测试下拉加载与简单路由<br>vue-cnode-mobile - 搭建cnode社区<br>Vuejs-SalePlatform - vuejs搭建的售卖平台demo<br>v-notes - 简单美观的记事本<br>vue-starter - VueJs项目的简单启动页<br>vue-memo - 用 vue写的记事本应用</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2和Vue3的区别</title>
      <link href="/2022/10/08/vue26/"/>
      <url>/2022/10/08/vue26/</url>
      
        <content type="html"><![CDATA[<h3 id="一、vue2和vue3双向数据绑定原理的区别？"><a href="#一、vue2和vue3双向数据绑定原理的区别？" class="headerlink" title="一、vue2和vue3双向数据绑定原理的区别？"></a>一、vue2和vue3双向数据绑定原理的区别？</h3><p>vue2 的双向数据绑定是利用ES5 的一个 API Object.definePropert()对数据进行劫持 结合 发布订阅模式的方式来实现的<br>vue3发生了改变，使用proxy替换Object.defineProerty,使用Proxy的优势：<br>可直接监听数组类型的数据变化<br>性能的提升<br>监听的目标为对象本身，不需要像Object.defineProperty一样遍历每个属性，有一定的性能提升<br>可直接实现对象属性的新增&#x2F;删除</p><h3 id="二、根节点的不同"><a href="#二、根节点的不同" class="headerlink" title="二、根节点的不同"></a>二、根节点的不同</h3><p>vue2只接受一个跟几点，而vue3在组件中支持多个根节点.</p><span id="more"></span><blockquote><p>vue2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="三、Composition-API-组合api"><a href="#三、Composition-API-组合api" class="headerlink" title="三、Composition API (组合api)"></a>三、Composition API (组合api)</h3><p>vue2和vue3最大的区别就是:</p><p>vue2中是使用的Options API，这种写法不方便我们的阅读和交流，逻辑过于分散。</p><p>vue3中是使用的Composition API (组合api)</p><blockquote><p>vue2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">// 数据</span><br><span class="line">    <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span></span>() &#123;&#125;,</span><br><span class="line">    // 方法</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><p>这样代码会更加简介和整洁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">        // 数据 和 方法都在setup里面使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="四、生命周期的变化"><a href="#四、生命周期的变化" class="headerlink" title="四、生命周期的变化"></a>四、生命周期的变化</h3><blockquote><p>vu2————————–&gt;vue3</p><p>beforeCreate  -&gt; setup()开始创建组件之前，创建的是data和method<br>created       -&gt; setup()<br>beforeMount   -&gt; onBeforeMount组件挂载到节点上之前执行的函数。<br>mounted       -&gt; onMounted组件挂载完成后执行的函数<br>beforeUpdate  -&gt; onBeforeUpdate组件更新之前执行的函数。<br>updated       -&gt; onUpdated组件更新完成之后执行的函数。<br>beforeDestroy -&gt; onBeforeUnmount组件挂载到节点上之前执行的函数。<br>destroyed     -&gt; onUnmounted组件卸载之前执行的函数。dszhuoyi<br>activated     -&gt; onActivated组件卸载完成后执行的函数<br>deactivated   -&gt; onDeactivated</p></blockquote><p>注意:如果想要在vue中获取dom节点在created中用this.$nexttick</p><h3 id="五、-vue2和vue3的diff算法"><a href="#五、-vue2和vue3的diff算法" class="headerlink" title="五、 vue2和vue3的diff算法"></a>五、 vue2和vue3的diff算法</h3><blockquote><p>vue2</p></blockquote><p>vue2 diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。<br>vue2 diff算法会比较每一个vnode,而对于一些不参与更新的元素，进行比较是有点消耗性能的。</p><blockquote><p>vue3</p></blockquote><p>vue3 diff算法在初始化的时候会给每个虚拟节点添加一个patchFlags，patchFlags就是优化的标识。<br>只会比较patchFlags发生变化的vnode,进行更新视图，对于没有变化的元素做静态标记，在渲染的时候直接复用</p><h3 id="六、-v-if-和-v-for的优先级"><a href="#六、-v-if-和-v-for的优先级" class="headerlink" title="六、 v-if 和 v-for的优先级"></a>六、 v-if 和 v-for的优先级</h3><blockquote><p>vue2</p></blockquote><p>我们最好不要把v-if和v-for同时用在一个元素上，这样会带来性能的浪费(每次都要先渲染才会进行条件判断)</p><p>v-for 优先于 v-if 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=<span class="string">&quot;index == 1&quot;</span> v-for=<span class="string">&quot;(item,index) in arr&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>vue3</p></blockquote><p>v-if 优先于 v-for 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=<span class="string">&quot;index == 1&quot;</span> v-for=<span class="string">&quot;(item,index) in arr&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>vue中会给我们报警告：<br>意思就是：属性“index”在渲染期间被访问，但未在实例上定义(v-if先进行判断，但是这时候v-for还没有渲染，所以index是找不到的)</p><a href="https://blog.csdn.net/m0_64969829/article/details/123047804" title="" target="">文章来源</a>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vite创建Vue3项目</title>
      <link href="/2022/10/08/vue25/"/>
      <url>/2022/10/08/vue25/</url>
      
        <content type="html"><![CDATA[<p>通过Vite创建的Vue3项目是可以跟Vue2项目共存的，即不影响我们旧的Vue2的项目。</p><p>前提条件：已安装 15.0 或更高版本的 Node.js</p><p>1）在需要创建项目的文件夹下打开终端，并执行指令：</p><blockquote><p>npm init vite@latest</p></blockquote><span id="more"></span><p>这里使用npm，不需使用cnpm，否则会默认创建一个名为init的Vue3项目<br>如果是第一次执行此指令，窗口会提示让你安装 vue-vite？？,选择y，进行安装即可；</p><p>2）接下来直接输入项目名称后回车：my-vue3-application（这里输入你的项目名称）</p><p>3）使用键盘上的上下箭头选择框架：vue   然后回车 </p><p>4）接下来选择vue的版本，我们选择：vue-ts （Vue2基于JS,Vue3基于TS）后回车</p><p>5）进入我们创建好的项目文件夹（my-vue3-application），安装依赖，启动运行Vue3项目</p><blockquote><p>cd my-vue3-application<br>npm install<br>npm run dev</p></blockquote><p>最后启动起来的地址默认是: <a href="http://127.0.0.1:5173/">http://127.0.0.1:5173/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 2.x项目完整搭建步骤</title>
      <link href="/2022/10/08/vue24/"/>
      <url>/2022/10/08/vue24/</url>
      
        <content type="html"><![CDATA[<p>1）安装Node（转淘宝镜像）和2.x版本的vue-cli</p><blockquote><p>安装node后可通过指令：node –version</p><p>查看版本号</p><p>安装vue-cli后可通过指令：vue –version 或 vue -V</p><p>查看版本号</p></blockquote><span id="more"></span><p>2）使用vue-cli脚手架初始化vue项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my_vue_project</span><br></pre></td></tr></table></figure><blockquote><p>my_vue_project为项目名</p></blockquote><p>执行以上命令后，项目包已经生成node_module 、package.json配置文件等</p><p>3）安装项目依赖（进入刚刚创建的项目文件夹）</p><blockquote><p>cd  my_vue_project</p><p>cnpm install</p></blockquote><p>4）启动项目</p><blockquote><p>cnpm run dev<br>或<br>cnpm start</p></blockquote><p>这样vue网站就启动起来了，默认是本地8080端口，当然可以配置文件：config</p><p>port:8080,&#x2F;&#x2F;修改启动端口号</p><p>autoOpenBrowser:true,&#x2F;&#x2F;自动打开浏览器，反之为false</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue实现通过npm启动和打包时自动切换assetsPublicPath的路径</title>
      <link href="/2022/10/08/vue23/"/>
      <url>/2022/10/08/vue23/</url>
      
        <content type="html"><![CDATA[<p>通常情况下我们是修改config》index.js》assetsPublicPath的值：<br>开发环境：’&#x2F;‘<br>生产环境：’.&#x2F;‘</p><p>来解决这个问题，但是我们每次在开发和生产环境（测试与打包）切换的时候，就要手动去修改这个值，这是比较麻烦的，万一忘记修改了，打包到线上就会出现异常，相当烦人！<br>有没有一个让npm进行测试运行和打包的时候自动切换这个路径的一劳永逸的办法呢？</p><p>答案是有的！</p><span id="more"></span><p>1）修改package.json配置脚本指令（dev,start,build）：</p><pre><code class="bash">  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;set NODE_ENV=development&amp;&amp;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;,    &quot;start&quot;: &quot;set NODE_ENV=development&amp;&amp;npm run dev&quot;,    &quot;build&quot;: &quot;set NODE_ENV=production&amp;&amp;node build/build.js&quot;  &#125;  </code></pre><p>看看我们的指令dev,start,build都添加了什么内容。<br>增加一个名为NODE_ENV的变量，同时：</p><blockquote><p>（1）在执行指令npm run dev 或 npm run start指令时给变量赋值为：development</p><p>（2）在执行指令 npm run build指令时给变量赋值为：production</p></blockquote><p>2）增加修改config》index.js中的内容：</p><blockquote><p>‘use strict’<br>const path &#x3D; require(‘path’)<br>const runPath &#x3D; process.env.NODE_ENV &#x3D;&#x3D;&#x3D; ‘development’ ? ‘&#x2F;‘ : ‘.&#x2F;‘ &#x2F;&#x2F;#新增项&#x2F;</p><p>module.exports &#x3D; {<br>    dev: {</p><pre><code>    // Paths    assetsSubDirectory: &#39;static&#39;,    assetsPublicPath: runPath,//#修改项/    proxyTable: {    },    // Various Dev Server settings    host: &#39;localhost&#39;, // can be overwritten by process.env.HOST    port: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined    autoOpenBrowser: false,    errorOverlay: true,    notifyOnErrors: true,    poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-    /**     * Source Maps     */    // https://webpack.js.org/configuration/devtool/#development    devtool: &#39;cheap-module-eval-source-map&#39;,    // If you have problems debugging vue-files in devtools,    // set this to false - it *may* help    // https://vue-loader.vuejs.org/en/options.html#cachebusting    cacheBusting: true,    cssSourceMap: true},build: {    // Template for index.html    index: path.resolve(__dirname, &#39;../dist/index.html&#39;),    // Paths    assetsRoot: path.resolve(__dirname, &#39;../dist&#39;),    assetsSubDirectory: &#39;static&#39;,    assetsPublicPath: runPath,//#修改项/    /**     * Source Maps     */    productionSourceMap: true,    // https://webpack.js.org/configuration/devtool/#production    devtool: &#39;#source-map&#39;,    // Gzip off by default as many popular static hosts such as    // Surge or Netlify already gzip all static assets for you.    // Before setting to `true`, make sure to:    // npm install --save-dev compression-webpack-plugin    productionGzip: false,    productionGzipExtensions: [&#39;js&#39;, &#39;css&#39;],    // Run the build command with an extra argument to    // View the bundle analyzer report after build finishes:    // `npm run build --report`    // Set to `true` or `false` to always turn it on or off    bundleAnalyzerReport: process.env.npm_config_report}</code></pre><p>}</p></blockquote><p>调整的地方是备注为“新增项”和“修改项”的内容</p><p>这样，我们便实现了Vue项目在运行和打包自动切换路径的功能。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入ElementUi</title>
      <link href="/2022/10/08/vue22/"/>
      <url>/2022/10/08/vue22/</url>
      
        <content type="html"><![CDATA[<p>1.安装Element-UI框架</p><blockquote><p>官网：npm i element-ui -S<br>也可以是<br>npm install element-ui –save</p></blockquote><span id="more"></span><p>2.在main.js中引入对应js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><p>3.让Vue使用ElementUI </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p>通过以上步骤就可以在项目中使用（包括this.$message弹窗也能被识别）ElementUI了。</p><p>当然我们有时候可能只是想使用弹窗功能，只需按以下步骤即可：</p><p>1.安装Element-UI框架</p><blockquote><p>官网：npm i element-ui -S</p><p>也可以是</p><p>npm install element-ui –save</p></blockquote><p>2.在main.js中引入对应js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">Message</span><br><span class="line">&#125; from <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><p>3.引入ElementUI的Message模块，并挂在到Vue中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">Message</span><br><span class="line">&#125; from <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$message</span> = Message;</span><br></pre></td></tr></table></figure><p>这样我们就可以通过：this.$message(‘弹窗出来了’)</p><p>来使用弹窗功能。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目中加入百度统计</title>
      <link href="/2022/10/08/vue21/"/>
      <url>/2022/10/08/vue21/</url>
      
        <content type="html"><![CDATA[<p>原本我用的是CNZZ插件来做访客统计的功能，但是现在不免费了，一年最低要近1000块大洋才能使用，我只能呵呵。</p><p>主要是网站没人气嘛没必要花这笔钱，而且还穷。</p><p>那就这样吧，再用下下去，就不划算了！！！</p><p>于是在百度搜罗资料，寻求一个Vue项目能做访客统计的插件。</p><p>最终选中了百度统计这款插件，话不多说，用起来先！</p><p>1.申请百度统计的账号（已有账号请跳过此步。）</p><span id="more"></span><blockquote><p>官方地址：<a href="https://tongji.baidu.com/sc-web/">https://tongji.baidu.com/sc-web/</a></p></blockquote><p>2.新建网站，获取代码</p><blockquote><p>需要填写项：网站域名、网站首页、网站首页、行业类别<br>其中“网站域名“和”网站首页”是必填，因为直接关系到统计的对象</p></blockquote><p>填写好之后，如果后续要调整是可以编辑的；</p><p>这里我发现，配置好之后总是会直接进入统计页面，后续难找到这个页面，于是我自己做了一个记录：这是我的后台，你的自己记录，嘿嘿。</p><p>创建好之后，点击“获取代码”，然后“复制代码”，这个代码就是我们需要用到网站配置中去的。</p><p>3.在Vue项目中引入统计的代码，实现统计功能</p><p>Vue的项目不同于其它直观的Web项目，如果直接在script脚本中引入，无法生效；</p><p>1）在App.vue页面created中放入统计代码（这里放你自己的代码，我呈现的是我的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">   var _hmt = _hmt || [];</span><br><span class="line">   (<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">     var hm = document.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">     hm.src = <span class="string">&quot;https://hm.baidu.com/hm.js?d76ad973f84629076d1bae45eb4d2ad5&quot;</span>;</span><br><span class="line">     var s = document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[0];</span><br><span class="line">     s.parentNode.insertBefore(hm, s);</span><br><span class="line">   &#125;)();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2）在main.js中添加以下内容</p><pre><code class="bash">router.beforeEach((to, from, next) =&gt; &#123;  //添加页面访问记录  if (to.path) &#123;    if (window._hmt) &#123;      window._hmt.push([&#39;_trackPageview&#39;, &#39;/#&#39; + to.fullPath])    &#125;  &#125;  next()&#125;)</code></pre><p>3）完成以上两步后，我们就可以打包网站部署到服务器上去了，接下来就是验证统计功能有没有生效</p><blockquote><p>回到刚才生成统计代码的页面，点击代码检查，或者点击前面的刷新按钮；系统便会检测统计功能是否生效;如果生效“首页代码状态”显示的是“代码安装正确”</p></blockquote><p>注意：生效后大概20分钟才会生成访问分析的报告。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 百度统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中UI库Ant Design Vue 回到顶部（BackTop）组件的使用</title>
      <link href="/2022/10/08/vue20/"/>
      <url>/2022/10/08/vue20/</url>
      
        <content type="html"><![CDATA[<p>首先看下官方文档的使用说明，写出了以下范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;components-back-top-demo-custom&quot;</span>&gt;</span><br><span class="line">      &lt;a-back-top&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;ant-back-top-inner&quot;</span>&gt;</span><br><span class="line">          &lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;up&quot;</span>&gt;&lt;/a-icon&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/a-back-top&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure><span id="more"></span>    <p>可能有的开发人员会碰到回到顶部的图标并没有加载出来，F12看下页面源码也只有最外层DIV,而a-back-top,并没有渲染出来，也就是没有生效。</p><p>遇到这种情况是因为当前滚动区域并不是Window(整个视窗)，而是其中的某一块（DIV）;</p><p>也就是说要让BackTop生效，那么它所绑定的对象必须是可滚动的，这样才会生效。</p><p>这就要用到一个属性：target</p><p>我们调整以下刚刚的写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">      &lt;div <span class="built_in">id</span>=<span class="string">&quot;components-back-top-demo-custom&quot;</span>&gt;</span><br><span class="line">        &lt;a-back-top :target=<span class="string">&quot;backtop&quot;</span>&gt;</span><br><span class="line">          &lt;div class=<span class="string">&quot;ant-back-top-inner&quot;</span>&gt;</span><br><span class="line">            &lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;up&quot;</span>&gt;&lt;/a-icon&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/a-back-top&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br></pre></td></tr></table></figure><p>这个target是一个函数，返回的是可滚动区域对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">backtop</span></span>() &#123;</span><br><span class="line">   <span class="built_in">return</span> document.querySelector(<span class="string">&quot;#contentC&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这样BackTop的功能就生效了。</p><p>这里附上我使用的样式：</p><pre><code class="bash">#components-back-top-demo-custom .ant-back-top-inner &#123;  cursor: pointer;  height: 40px;  width: 40px;  line-height: 40px;  background-color: #61AFEF;  font-size: 20px;  border-radius: 50%;  color: #fff;  text-align: center;  float: right;   bottom: 8em;  right: -2em;  position: relative;&#125;#components-back-top-demo-custom .ant-back-top-inner:hover &#123;  background-color: #6ED69F;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中使用分享插件social-share</title>
      <link href="/2022/10/08/vue19/"/>
      <url>/2022/10/08/vue19/</url>
      
        <content type="html"><![CDATA[<p>老规矩先安装依赖：</p><blockquote><p>cnpm install vue-social-share -S</p></blockquote><p>安装完后从main.js中引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Share from <span class="string">&#x27;vue-social-share&#x27;</span></span><br><span class="line">import <span class="string">&#x27;vue-social-share/dist/client.css&#x27;</span>;</span><br><span class="line">Vue.use(Share)</span><br></pre></td></tr></table></figure><span id="more"></span><p>最后在页面中使用了：</p><blockquote><p><share :config="config"></share></p></blockquote><p>以上的config是插件的常用配置，是一个对象，其属性有以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">config: &#123;</span><br><span class="line">        url: <span class="string">&quot;&quot;</span>, // 网址，默认使用 window.location.href</span><br><span class="line">        <span class="built_in">source</span>: <span class="string">&quot;&quot;</span>, // 来源（QQ空间会用到）, 默认读取<span class="built_in">head</span>标签：&lt;meta name=<span class="string">&quot;site&quot;</span> content=<span class="string">&quot;http://overtrue&quot;</span> /&gt;</span><br><span class="line">        title: <span class="string">&quot;&quot;</span>, // 标题，默认读取 document.title 或者 &lt;meta name=<span class="string">&quot;title&quot;</span> content=<span class="string">&quot;share.js&quot;</span> /&gt;</span><br><span class="line">        description: <span class="string">&quot;&quot;</span>, // 描述, 默认读取<span class="built_in">head</span>标签：&lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;PHP弱类型的实现原理分析&quot;</span> /&gt;</span><br><span class="line">        image: <span class="string">&quot;&quot;</span>, // 图片, 默认取网页中第一个img标签</span><br><span class="line">        sites: [</span><br><span class="line">          <span class="string">&quot;qzone&quot;</span>,</span><br><span class="line">          <span class="string">&quot;qq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;weibo&quot;</span>,</span><br><span class="line">          <span class="string">&quot;wechat&quot;</span>,</span><br><span class="line">          <span class="string">&quot;douban&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tencent&quot;</span>,</span><br><span class="line">          <span class="string">&quot;linkedin&quot;</span>,</span><br><span class="line">          <span class="string">&quot;google&quot;</span>,</span><br><span class="line">          <span class="string">&quot;facebook&quot;</span>,</span><br><span class="line">          <span class="string">&quot;twitter&quot;</span>,</span><br><span class="line">        ], // 启用的站点</span><br><span class="line">        disabled: [</span><br><span class="line">          <span class="string">&quot;qzone&quot;</span>,</span><br><span class="line">          <span class="string">&quot;qq&quot;</span>,</span><br><span class="line">          <span class="string">&quot;tencent&quot;</span>,</span><br><span class="line">          <span class="string">&quot;douban&quot;</span>,</span><br><span class="line">          <span class="string">&quot;linkedin&quot;</span>,</span><br><span class="line">          <span class="string">&quot;google&quot;</span>,</span><br><span class="line">          <span class="string">&quot;facebook&quot;</span>,</span><br><span class="line">          <span class="string">&quot;twitter&quot;</span>,</span><br><span class="line">        ], // 禁用的站点</span><br><span class="line">        wechatQrcodeTitle: <span class="string">&quot;微信扫一扫：分享&quot;</span>, // 微信二维码提示文字</span><br><span class="line">        wechatQrcodeHelper:</span><br><span class="line">          <span class="string">&quot;&lt;p&gt;微信里点“发现”，扫一下&lt;/p&gt;&lt;p&gt;二维码便可将本文分享至朋友圈。&lt;/p&gt;&quot;</span>,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><p>使用后我们会发现页面中图标并没有完整的呈现</p><p>看下网页css代码的引用路径发现问题点在于样式中字体的引用路径是绝对路径，</p><p>我们需要调整为当前相对路径，具体的做法是：</p><blockquote><p>修改node_modules下文件夹:vue-social-share&gt;dist&gt;client.css 文件中将顶部“@font-face”中 url中的“&#x2F;static”改为“.&#x2F;static”</p></blockquote><p>这样就能正确显示图标了。</p><p>当然了由于一般代码是不会对node_modules上传管控的，这就意味着，每次新download下载，都要自己去改以下，这就有一定的局限性，不方便嘛。</p><p>为了规避此弊端，我们可以将client.css下载到本地，再将client.css里面引入的图标文件（刚刚调整的那几个）复制到src下面的static文件下，这样就可以一次性修改样式表里的路径了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> social-share </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中实现页面刷新的几种方式</title>
      <link href="/2022/10/08/vue18/"/>
      <url>/2022/10/08/vue18/</url>
      
        <content type="html"><![CDATA[<p>1.原页面刷新，类似于F5</p><blockquote><p>this.$router.go(0)<br>或者<br>location.reload()</p></blockquote><p>2.创建一个空白页面（blank.vue），通过路由的方式先跳转到空白页面再跳转回来</p><span id="more"></span><blockquote><p>this.$router.replace({ path:’&#x2F;blank’ })</p></blockquote><p>3.使用inject &#x2F; provide组合控制显示</p><p>方法1和2的刷新是比较传统的动态刷新，整个页面会出现停顿和白屏，体验感不好。</p><p>推荐使用方法3，类似于静态刷新。</p><p>(1）添加：provide</p><p>1）在路由容器（一般是在App.vue 页面中）router-view添加：v-if&#x3D;”isRouterAlive”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">                        &lt;router-view</span><br><span class="line">                          :key=<span class="string">&quot;<span class="variable">$route</span>.fullPath&quot;</span></span><br><span class="line">                          v-if=<span class="string">&quot;isRouterAlive&quot;</span></span><br><span class="line">                        &gt;&lt;/router-view&gt;</span><br><span class="line">                      &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>2）在data函数中添加：isRouterAlive: true,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      isRouterAlive: <span class="literal">true</span>,</span><br><span class="line">      leftheight: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      csscenter: &#123;</span><br><span class="line">        height: this.leftheight,</span><br><span class="line">      &#125;,</span><br><span class="line">      slideTop: <span class="literal">true</span>,</span><br><span class="line">      backgroundDiv: &#123;</span><br><span class="line">        // backgroundImage: <span class="string">&quot;url(&quot;</span> + require(<span class="string">&quot;../static/img/n3.jpg&quot;</span>) + <span class="string">&quot;)&quot;</span>,</span><br><span class="line">        backgroundRepeat: <span class="string">&quot;no-repeat&quot;</span>,</span><br><span class="line">        backgroundSize: <span class="string">&quot;110% 100%&quot;</span>,</span><br><span class="line">        backgroundAttachment: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">        backgroundposition: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        // filter: <span class="string">&quot;grayscale(10%)&quot;</span>,</span><br><span class="line">        //  filter: <span class="string">&quot;blur(1px)&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>  3)添加一个provide类型，内容如下：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="title">provide</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">    reload: this.reload,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>  4)在method方法中添加以下内容：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">      this.isRouterAlive = <span class="literal">false</span>; //先关闭，</span><br><span class="line">      this.<span class="variable">$nextTick</span>(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;inject&#x27;</span>);</span><br><span class="line">        this.isRouterAlive = <span class="literal">true</span>; //再打开</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">```      </span><br><span class="line">(2)引用：inject</span><br><span class="line"></span><br><span class="line">在需要刷新的页面注入inject</span><br><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">inject: [<span class="string">&quot;reload&quot;</span>]</span><br><span class="line">this.reload();</span><br><span class="line">&#123;% endblockquote %&#125;</span><br><span class="line">使用范例：</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  inject: [<span class="string">&quot;reload&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span></span>() &#123;</span><br><span class="line">    window.setTimeout(() =&gt; &#123;</span><br><span class="line">      this.orderlist1 = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist1&quot;</span>));</span><br><span class="line">      this.orderlist2 = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist2&quot;</span>));</span><br><span class="line">      this.showinfo();      </span><br><span class="line">    &#125;, 500);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.reload();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里做了一个延迟刷新，因为是静态的，为了验证是否起到作用，可以在relolad()方法中打印有一些标识信息；</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用AOS动画插件，让你的网页更酷炫</title>
      <link href="/2022/10/08/vue17/"/>
      <url>/2022/10/08/vue17/</url>
      
        <content type="html"><![CDATA[<p>根据官方文档，使用此插件可以通过直接引用的方式，也可以是下载安装本地包；<br>1.直接使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://unpkg.com/aos@next/dist/aos.css&quot;</span>/&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/aos@next/dist/aos.js”</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">AOS.init();</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这种引入方式如果是在Vue项目中，自然是从首页（index.html）中引入。</p><span id="more"></span><p>2.npm或者yarn安装</p><p>Vue项目自然是推荐这种方式</p><blockquote><p>npm install –save aos@next</p><p>or<br>yarn add aos@next</p></blockquote><p>然后在main.js引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import AOS from <span class="string">&#x27;aos&#x27;</span>;</span><br><span class="line">import <span class="string">&#x27;aos/dist/aos.css&#x27;</span></span><br><span class="line">AOS.init();</span><br></pre></td></tr></table></figure><p>以上AOS.init()  实际上是默认了以下配置（详细功能配置可查看官方文档）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">AOS.init(&#123;</span><br><span class="line">  // Global settings:</span><br><span class="line">  <span class="built_in">disable</span>: <span class="literal">false</span>, // accepts following values: <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;tablet&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>, boolean, expression or <span class="keyword">function</span></span><br><span class="line">  startEvent: <span class="string">&#x27;DOMContentLoaded&#x27;</span>, // name of the event dispatched on the document, that AOS should initialize on</span><br><span class="line">  initClassName: <span class="string">&#x27;aos-init&#x27;</span>, // class applied after initialization</span><br><span class="line">  animatedClassName: <span class="string">&#x27;aos-animate&#x27;</span>, // class applied on animation</span><br><span class="line">  useClassNames: <span class="literal">false</span>, // <span class="keyword">if</span> <span class="literal">true</span>, will add content of `data-aos` as classes on scroll</span><br><span class="line">  disableMutationObserver: <span class="literal">false</span>, // disables automatic mutations<span class="string">&#x27; detections (advanced)</span></span><br><span class="line"><span class="string">  debounceDelay: 50, // the delay on debounce used while resizing window (advanced)</span></span><br><span class="line"><span class="string">  throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:</span></span><br><span class="line"><span class="string">  offset: 120, // offset (in px) from the original trigger point</span></span><br><span class="line"><span class="string">  delay: 0, // values from 0 to 3000, with step 50ms</span></span><br><span class="line"><span class="string">  duration: 400, // values from 0 to 3000, with step 50ms</span></span><br><span class="line"><span class="string">  easing: &#x27;</span>ease<span class="string">&#x27;, // default easing for AOS animations</span></span><br><span class="line"><span class="string">  once: false, // whether animation should happen only once - while scrolling down</span></span><br><span class="line"><span class="string">  mirror: false, // whether elements should animate out while scrolling past them</span></span><br><span class="line"><span class="string">  anchorPlacement: &#x27;</span>top-bottom<span class="string">&#x27;, // defines which position of the element regarding to window should trigger the animation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>接下来就是如何在网页中实现功能渲染了。</p><p>不得不说还是挺简单的：只要将特性绑定到控件上即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">   <span class="built_in">id</span>=<span class="string">&quot;blog_left&quot;</span></span><br><span class="line">   class=<span class="string">&quot;csleft&quot;</span></span><br><span class="line">   data-aos=<span class="string">&quot;slide-down&quot;</span></span><br><span class="line">   data-aos-duration=<span class="string">&quot;1500&quot;</span></span><br><span class="line">   data-aos-easing=<span class="string">&quot;ease-in-out&quot;</span></span><br><span class="line">   data-aos-mirror=<span class="string">&quot;true&quot;</span></span><br><span class="line">   data-aos-once=<span class="string">&quot;false&quot;</span></span><br><span class="line">   data-aos-anchor-placement=<span class="string">&quot;top-center&quot;</span></span><br><span class="line"> &gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>  这样一个初始化1500ms的下拉做菜单动画效果就完成。</p><p>当然了这是比较简单的用法，更酷炫的用法参考官方文档结合自己的项目去实现咯。</p><p>这里附上常用的属性（特效名、锚点位置、缓动方法）：</p><h3 id="Animations"><a href="#Animations" class="headerlink" title="Animations"></a>Animations</h3><h2 id="Fade-animations"><a href="#Fade-animations" class="headerlink" title="Fade animations"></a>Fade animations</h2><p>fade<br>fade-up<br>fade-down<br>fade-left<br>fade-right<br>fade-up-right<br>fade-up-left<br>fade-down-right<br>fade-down-left</p><h2 id="Flip-animations"><a href="#Flip-animations" class="headerlink" title="Flip animations"></a>Flip animations</h2><p>flip-up<br>flip-down<br>flip-left<br>flip-right</p><h2 id="Slide-animations"><a href="#Slide-animations" class="headerlink" title="Slide animations"></a>Slide animations</h2><p>slide-up<br>slide-down<br>slide-left<br>slide-right</p><h2 id="Zoom-animations"><a href="#Zoom-animations" class="headerlink" title="Zoom animations"></a>Zoom animations</h2><p>zoom-in<br>zoom-in-up<br>zoom-in-down<br>zoom-in-left<br>zoom-in-right<br>zoom-out<br>zoom-out-up<br>zoom-out-down<br>zoom-out-left<br>zoom-out-right</p><h3 id="Anchor-placements"><a href="#Anchor-placements" class="headerlink" title="Anchor placements"></a>Anchor placements</h3><p>top-bottom<br>top-center<br>top-top<br>center-bottom<br>center-center<br>center-top<br>bottom-bottom<br>bottom-center<br>bottom-top</p><h3 id="Easing-functions"><a href="#Easing-functions" class="headerlink" title="Easing functions"></a>Easing functions</h3><p>linear<br>ease<br>ease-in<br>ease-out<br>ease-in-out<br>ease-in-back<br>ease-out-back<br>ease-in-out-back<br>ease-in-sine<br>ease-out-sine<br>ease-in-out-sine<br>ease-in-quad<br>ease-out-quad<br>ease-in-out-quad<br>ease-in-cubic<br>ease-out-cubic<br>ease-in-out-cubic<br>ease-in-quart<br>ease-out-quart<br>ease-in-out-quart</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> AOS动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Vue icon 图标的使用方法</title>
      <link href="/2022/10/08/vue16/"/>
      <url>/2022/10/08/vue16/</url>
      
        <content type="html"><![CDATA[<p>先看<a href="https://2x.antdv.com/components/icon-cn" title="" target="">官方文档</a><br>直接点击Outlined栏相应的图标会自动将图标名称复制到你的剪切板上,这里我们点击一个类似菜单的图标：<menu-fold-outlined /></p><p>通常我们会这样去使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;menu-fold-outlined&quot;</span>&gt;&lt;/a-icon&gt;</span><br></pre></td></tr></table></figure><p>但是并不会显示出来</p><p>正确的用法应该是：我们在调用的时候标签要去掉分类词</p><span id="more"></span><blockquote><p>标签去除Oulined、TwoTone、Filled,首字母小写，后续大写字母转小写并加-</p></blockquote><p>所以刚刚的那个标签应该这么用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-icon <span class="built_in">type</span>=<span class="string">&quot;menu-fold&quot;</span>&gt;&lt;/a-icon&gt;</span><br></pre></td></tr></table></figure><p>官方下面文档上没见到有提示，这里写给大家避避坑。</p><p>当然更高级的用法使用的时候也可以像官方文档写的一样，通过components传值：这样可以不用去掉‘分类词’直接用了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ant Design Vue 菜单（Menu）的用法介绍</title>
      <link href="/2022/10/08/vue15/"/>
      <url>/2022/10/08/vue15/</url>
      
        <content type="html"><![CDATA[<h4> 根据：<a href="https://2x.antdv.com/components/menu-cn" title="" target="">Ant DesiGN Vue 官网</a> 文档，常用属性参考如下：</h4><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-menu</span><br><span class="line">      mode=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">      triggerSubMenuAction=<span class="string">&quot;click&quot;</span></span><br><span class="line">      :overflowedIndicator=<span class="string">&quot;hideico&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;removekind()&quot;</span>&gt;</span><br><span class="line">        &lt;img class=<span class="string">&quot;loginimg&quot;</span> v-bind:src=<span class="string">&quot;headimg&quot;</span> alt=<span class="string">&quot;&quot;</span> /&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">          &lt;audio</span><br><span class="line">            style=<span class="string">&quot;height: 0px; width: 0px&quot;</span></span><br><span class="line">            <span class="built_in">id</span>=<span class="string">&quot;audio&quot;</span></span><br><span class="line">            ref=<span class="string">&quot;audio&quot;</span></span><br><span class="line">            controls</span><br><span class="line">            muted</span><br><span class="line">            :src=<span class="string">&quot;musicsrc&quot;</span></span><br><span class="line">            <span class="built_in">type</span>=<span class="string">&quot;audio/mpeg&quot;</span></span><br><span class="line">          &gt;&lt;/audio&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-caret-left&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(2)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-headset&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(0)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;i</span><br><span class="line">          class=<span class="string">&quot;el-icon-caret-right&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;musicplay(1)&quot;</span></span><br><span class="line">          style=<span class="string">&quot;color: white; margin-right: 1em&quot;</span></span><br><span class="line">        &gt;&lt;/i&gt;</span><br><span class="line">        &lt;span v-text=<span class="string">&quot;musicname&quot;</span> class=<span class="string">&quot;musicname&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;a-switch</span><br><span class="line">          checked-children=<span class="string">&quot;Light&quot;</span></span><br><span class="line">          un-checked-children=<span class="string">&quot;Dark&quot;</span></span><br><span class="line">          default-checked</span><br><span class="line">          @click=<span class="string">&quot;toggleDark&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;writeblog()&quot;</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">&quot;el-icon-edit-outline&quot;</span>&gt;&lt;/i&gt;&lt;span&gt; 文章发布&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;a-menu-item @click=<span class="string">&quot;writemessage()&quot;</span>&gt;</span><br><span class="line">        &lt;i class=<span class="string">&quot;el-icon-position&quot;</span>&gt; &lt;/i&gt;</span><br><span class="line">        &lt;span class=<span class="string">&quot;csdot&quot;</span>&gt; 留言板块&lt;/span&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">      &lt;a-menu-item&gt;</span><br><span class="line">        &lt;a-input-search</span><br><span class="line">          <span class="built_in">id</span>=<span class="string">&quot;searchtxt&quot;</span></span><br><span class="line">          clearable</span><br><span class="line">          placeholder=<span class="string">&quot;Search...&quot;</span></span><br><span class="line">          @search=<span class="string">&quot;onSearch&quot;</span></span><br><span class="line">          class=<span class="string">&quot;border_radius1&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/a-menu-item&gt;</span><br><span class="line">    &lt;/a-menu&gt;</span><br></pre></td></tr></table></figure><p>mode:为菜单的呈现方式有3个</p><blockquote><p>vertical：竖直【默认】</p><p>horizontal：水平</p><p>inline：内联</p></blockquote><p>theme：主题颜色(light&#x2F;dark)2种，其中默认为： light</p><p>multiple：菜单是否可多选，默认为：false</p><p>selectedKeys(v-model)：当前选中菜单key集合</p><p>style：菜单的样式</p><p>defaultOpenKeys：初始展开菜单key集合</p><p>defaultSelectedKeys：初始选中菜单key集合</p><p>triggerSubMenuAction：导航栏缩放时的图标样式（默认为3个黑色的小圆点）</p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:overflowedIndicator=<span class="string">&quot;hideico&quot;</span></span><br></pre></td></tr></table></figure><p>对应的hideico为一个slot样式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">   <span class="built_in">return</span> &#123;</span><br><span class="line">     headimg: <span class="string">&quot;/static/img/head1.png&quot;</span>,</span><br><span class="line">     musicname: <span class="string">&quot;正在播放:无&quot;</span>,</span><br><span class="line">     palyflag: <span class="literal">false</span>,</span><br><span class="line">     musicindex: 0,</span><br><span class="line">     musicsrc: require(<span class="string">&quot;../assets/music/烟花再美也不及你-三暮雨.mp3&quot;</span>),</span><br><span class="line">     userinfo: &#123; account: <span class="string">&quot;&quot;</span>, password: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">     SelfSearch: <span class="string">&quot;&quot;</span>,</span><br><span class="line">     Islogin: <span class="literal">false</span>,</span><br><span class="line">     dialogFormVisible: <span class="literal">false</span>,</span><br><span class="line">     hideico:&lt;i class=<span class="string">&#x27;el-icon-s-fold&#x27;</span> style=<span class="string">&#x27;border:1px solid white;&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>这里用的是elementui的一个图标，如果是Ant Design Vue 的icon就是：</p><pre><code class="bash">hideico:&quot;&lt;a-icon type=&#39;menu&#39; /&gt;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Ant Design Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入highlight.js实现代码高亮，兼容IE</title>
      <link href="/2022/10/08/vue14/"/>
      <url>/2022/10/08/vue14/</url>
      
        <content type="html"><![CDATA[<p>【方案一】</p><p>根据highlight.js官网的介绍，我们在main.js文件中通过import的方式引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import hljs from <span class="string">&quot;highlight.js&quot;</span>;</span><br><span class="line">import <span class="string">&quot;highlight.js/styles/monokai-sublime.css&quot;</span>;</span><br><span class="line">Vue.use(hljs)</span><br></pre></td></tr></table></figure><p>这里用到了富文本框WandEditor，引入高亮；</p><blockquote><p>this.editor.highlight &#x3D; hljs</p></blockquote><p>以上测试环境和打包后在IE上都不兼容，其它浏览器正常运行；</p><span id="more"></span><p>尝试过使用Vue中兼容IE的用法：ranspileDependencies</p><blockquote><p>在项目根目录与package.json同级创建：Vue.config.js文件【这个文件创建后项目会自动识别，无需特别引入】，代码如下。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  transpileDependencies: [</span><br><span class="line">    /[/\\]node_modules[/\\](.+?)?highlight.js/,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测无效。</p><p>也试过从webpack下手，通过引入babel-profill</p><p>修改webpack.base.conf.js为以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line"></span><br><span class="line">    app: [<span class="string">&#x27;babel-polyfill&#x27;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>module&gt;rules&gt;include</p><blockquote><p>include: [resolve(‘src’), resolve(‘test’), resolve(‘node_modules&#x2F;webpack-dev-server&#x2F;client’),resolve(‘node_modules&#x2F;highlight.js’)]</p></blockquote><p>完整文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">var webpack = require(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line">const utils = require(<span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line">const config = require(<span class="string">&#x27;../config&#x27;</span>)</span><br><span class="line">const vueLoaderConfig = require(<span class="string">&#x27;./vue-loader.conf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> resolve(<span class="built_in">dir</span>) &#123;</span><br><span class="line">  <span class="built_in">return</span> path.join(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="built_in">dir</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line">      jQuery: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">      $: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>),</span><br><span class="line">  // entry: &#123;</span><br><span class="line">  //   app: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  // &#125;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">&#x27;babel-polyfill&#x27;</span>, <span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ?</span><br><span class="line">      config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">    <span class="built_in">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.vue$/,</span><br><span class="line">        loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.js$/,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>), resolve(<span class="string">&#x27;node_modules/webpack-dev-server/client&#x27;</span>),resolve(<span class="string">&#x27;node_modules/highlight.js&#x27;</span>)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;media/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="built_in">limit</span>: 10000,</span><br><span class="line">          name: utils.assetsPath(<span class="string">&#x27;fonts/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">    // prevent webpack from injecting useless setImmediate polyfill because Vue</span><br><span class="line">    // <span class="built_in">source</span> contains it (although only uses it <span class="keyword">if</span> it<span class="string">&#x27;s native).</span></span><br><span class="line"><span class="string">    setImmediate: false,</span></span><br><span class="line"><span class="string">    // prevent webpack from injecting mocks to Node native modules</span></span><br><span class="line"><span class="string">    // that does not make sense for the client</span></span><br><span class="line"><span class="string">    dgram: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    fs: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    net: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    tls: &#x27;</span>empty<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    child_process: &#x27;</span>empty<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>亲测无效。<br>【方案二】</p><p>通过require的方式引入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">   this.kind = JSON.parse(sessionStorage.getItem(<span class="string">&quot;orderlist2&quot;</span>));</span><br><span class="line">   <span class="keyword">if</span> (!this.isie) &#123;</span><br><span class="line">     console.log(<span class="string">&quot;不是ie&quot;</span>);</span><br><span class="line">     this.hljs = require(<span class="string">&quot;highlight.js&quot;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     console.log(<span class="string">&quot;是ie&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>原本想的是IE浏览器不引入js，发布信息在Chrome等高亮功能正常的浏览器上，这样IE浏览器也能正常访问；</p><p>这样在wangEditor配置信息中：</p><blockquote><p>if (this.hljs !&#x3D; null) this.editor.highlight &#x3D; this.hljs;</p></blockquote><p>起初，以为这种方案在本地是可行的，因为IE浏览器能正常访问网站，Chrome浏览器也能使用代码高亮的功能；</p><p>但是一旦打包到线上就同“方案一”一样，不兼容IE；</p><p>查阅资料后得知：</p><blockquote><p>require只能用在node里面，前端之所以能用，是因为我们引用了require.js插件来辅助；</p><p>require不是前端语法，打包的时候会被编译；</p></blockquote><p>也就是说只要打包，就会编译对应的js模块。</p><p>方案二扑街。<br>【方案三】<br>在main.js中补充以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;highlight&#x27;</span>, <span class="keyword">function</span> (el) &#123;</span><br><span class="line">  <span class="built_in">let</span> blocks = el.querySelectorAll(<span class="string">&#x27;pre code&#x27;</span>);</span><br><span class="line">  blocks.forEach((block) =&gt; &#123;</span><br><span class="line">    hljs.highlightBlock(block)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在从index.html中引入相应的js和css</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> href=<span class="string">&quot;http://apps.bdimg.com/libs/highlight.js/9.1.0/styles/default.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://apps.bdimg.com/libs/highlight.js/9.1.0/highlight.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上css和js可以在IE中打开下载到本地，以静态资源引入更容易管控（避免官网网络影响）；</p><p>然后在需要代码高亮的地方绑定一个特性：v-highlight</p><p>这里由于我用到了wangEditor富文本框，所以实现方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-row</span><br><span class="line">       &gt;&lt;el-col&gt;</span><br><span class="line">         &lt;el-form-item label=<span class="string">&quot;博客内容&quot;</span> required&gt;</span><br><span class="line">           &lt;el-row</span><br><span class="line">             &gt;&lt;el-col&gt; &lt;div <span class="built_in">id</span>=<span class="string">&quot;editor&quot;</span> v-highlight&gt;&lt;/div&gt; &lt;/el-col</span><br><span class="line">           &gt;&lt;/el-row&gt;</span><br><span class="line">         &lt;/el-form-item&gt; &lt;/el-col</span><br><span class="line">     &gt;&lt;/el-row&gt;</span><br></pre></td></tr></table></figure><p>同时，富文本框中的配置为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.editor.config.onchange = (html) =&gt; &#123;        </span><br><span class="line">       this.info_ = html; // 绑定当前逐渐地值</span><br><span class="line">       this.<span class="variable">$emit</span>(<span class="string">&quot;change&quot;</span>, html); // 将内容同步到父组件中</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><p>【附录】</p><p>1.其它特性或样式用法参照官网；<br>2.这里方案三绑定了富文本框，输入源码后并不会里面呈现高亮效果，需要在其它文本框点击后才能触发；在IE中效果不会生效，但是从Chrome等其它浏览器生成高亮样式的文章后，从IE刷新是可以看到效果的，所以IE网站是可以正常访问浏览的。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vue中引入静态图片</title>
      <link href="/2022/10/08/vue13/"/>
      <url>/2022/10/08/vue13/</url>
      
        <content type="html"><![CDATA[<p>1.将图片放在assets或其某文件下</p><p>2.通过以下两种方法引入</p><p>1).import  img1 from ‘..&#x2F;assets&#x2F;images&#x2F;img1.jpg’</p><p>在data中定义地址变量：pic:img1</p><p>2)直接在data中通过require引入:</p><p>pic: require(“..&#x2F;assets&#x2F;images&#x2F;img1.jpg”) </p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code常用的扩展插件</title>
      <link href="/2022/10/08/vue12/"/>
      <url>/2022/10/08/vue12/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Vetur<br>vue 代码?亮插件,vue开发神器</p></li><li><p>Auto Close Tag<br>html?动闭合标签插件</p></li><li><p>Beautify<br>格式化插件</p></li><li><p>Chinese (Simplified) vscode<br>汉化插件</p><span id="more"></span></li><li><p>Code Runner<br>在编辑器?运?js代码，同时可在terminal?显?打印结果的?具【?便调试代码,?持多种语??如 C++, Python, Java等等】</p></li><li><p>Git History<br>git ?具，?标定位到代码?上，可以在代码后边显?代码最近修改时间及修改?等信息</p></li><li><p>Git Project Manager<br>git 项?管理?具</p></li><li><p>GitLens — Git supercharged<br>git ?具，作?和 Git History 类似</p></li><li><p>HTML Snippets<br>快速?成html代码?具</p></li><li><p>Live Server<br>快速启动?个本地服务，?便html?件预览调试等</p></li><li><p>npm Intellisense<br>快速引?依赖插件</p></li><li><p>Path Autocomplete<br>路径提?插件</p></li><li><p>Prettier - Code formatter<br>代码格式化插件</p></li><li><p>Visual Studio IntelliCode<br>代码智能补全插件</p></li><li><p>Vue Theme<br>vue 代码主题插件</p></li><li><p>Vue VSCode Snippets<br>快速?成vue代码插件</p></li><li><p>vscode wxml</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2022/10/08/vue11/"/>
      <url>/2022/10/08/vue11/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Vue的生命周期-？"><a href="#什么是Vue的生命周期-？" class="headerlink" title="什么是Vue的生命周期 ？"></a>什么是Vue的生命周期 ？</h3><blockquote><p>Vue 的实例从创建到销毁的过程 ，就是生命周期 ，也就是从开始创建 ，初始化数据 ，编译模板 ，挂载Dom到渲染DOM ，更新数据再到渲染 ，卸载等一系列的过程 ，我们称这是Vue的生命周期。</p></blockquote><span id="more"></span><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><blockquote><p>从创建到销毁顺序执行的生命周期函数 :beforeCreate、created、 beforeMount、mounted、beforeUpdate、 updated、beforeDestroy、destroyed<br>而这些Vue生命周期过程中会伴随着一些函数的自调用。我们称这些函数为钩子函数。</p></blockquote><h3 id="Vue生命周期的作用是什么？"><a href="#Vue生命周期的作用是什么？" class="headerlink" title="Vue生命周期的作用是什么？"></a>Vue生命周期的作用是什么？</h3><p>Vue生命周期过程中会伴随着多个事件钩子 ，这些钩子函数让我们在控制整个Vue实例的过程时更容易形成好的逻辑<br>Vue生命周期总共分8个阶段：创建前&#x2F;后 ，载入前&#x2F;后 ，更新前&#x2F;后 ，销毁前&#x2F;后</p><p>各个生命周期函数的作用：</p><h2 id="创建前-x2F-后-beforeCreate-x2F-created"><a href="#创建前-x2F-后-beforeCreate-x2F-created" class="headerlink" title="创建前&#x2F;后(beforeCreate &#x2F; created)"></a>创建前&#x2F;后(beforeCreate &#x2F; created)</h2><blockquote><p>在beforeCreate阶段 ，vue实例的挂载元素el和数据对象data都为undefined ，还未初始化 ，也就是说此时我们还拿不到数据</p><p>在created阶段 ，vue实例的数据对象data有了 ，但是实例对象el还没有 ，也就是说可以拿到数据 ，但是无法获取Dom节点 ，此时data 和 methods已经可以使用 但是页面还没有渲染出来</p><p>created阶段data有了才能拿到数据</p><p>所以我们在开发中 ，的一些获取数据的逻辑都可以写在created钩子函数中</p></blockquote><h2 id="载入前-x2F-后-（beforeMount-x2F-mounted）"><a href="#载入前-x2F-后-（beforeMount-x2F-mounted）" class="headerlink" title="载入前&#x2F;后 （beforeMount &#x2F; mounted）"></a>载入前&#x2F;后 （beforeMount &#x2F; mounted）</h2><blockquote><p>在beforeMount阶段 ，vue实例的$el和data都初始化了 ，但还是挂载之前的虚拟DOM节点 ，此时实例尚未挂载完成 ，此时页面上还看不到真实数据 只是一个模板页面而已</p><p>在mounted阶段 ，vue实例挂载完成 ，页面成功渲染数据已经真实渲染到页面上 在这个钩子函数里面我们可以使用一些第三方的插件</p><p>mounted页面才真正渲染完成</p><p>created拿不到elDom节点<br>注意：在beforeMount阶段 可以拿到el实例但是只是挂载的el虚拟DOM节点 ，在mounted阶段 el被新创建的vm.$el替换，并挂载到实例上此时才能操作页面上的DOM元素。</p></blockquote><p><b>以上四个钩子函数都是在Vue生命周期过程中自动调用。</b></p><h2 id="更新前-x2F-后-（beforeUpdate-x2F-updated）"><a href="#更新前-x2F-后-（beforeUpdate-x2F-updated）" class="headerlink" title="更新前&#x2F;后 （beforeUpdate &#x2F; updated）"></a>更新前&#x2F;后 （beforeUpdate &#x2F; updated）</h2><blockquote><p>在beforeUpdate 阶段 ，数据更新时调用，发生在虚拟DOM打补丁之前 页面上数据还是旧的。</p><p>在updated阶段 ，由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。 页面上数据已经替换成最新的，只有在数据改变后才调用。</p></blockquote><h2 id="销毁前-x2F-后-（beforeDestroy-x2F-destroyed）"><a href="#销毁前-x2F-后-（beforeDestroy-x2F-destroyed）" class="headerlink" title="销毁前&#x2F;后 （beforeDestroy &#x2F; destroyed）"></a>销毁前&#x2F;后 （beforeDestroy &#x2F; destroyed）</h2><blockquote><p>beforeDestroy在实例销毁之前调用 ，在这一步，实例仍然完全可用。</p><p>destroyed 实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p></blockquote><p>页面第一次加载只会调用触发 beforeCreate created beforeMount mounted</p><p>每个阶段对应的钩子函数 ，我们都可以在其内部做一些对应的逻辑。</p><p>【常用钩子函数的运用场景】</p><p>【beforeCreate 】此时页面开始创建 ，可以加loading等事件</p><p>【created 】加载实列触发或 一些异步请求调用 ，loading结束等事件</p><p>【mounted 】获取Dom节点操作DOM ，在这个钩子函数里面我们可以使用一些第三方的插件实例写在这个函数内</p><p>【updated】 做一些数据统一更新处理的相应函数</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios中使用异步（async +await）</title>
      <link href="/2022/10/08/vue10/"/>
      <url>/2022/10/08/vue10/</url>
      
        <content type="html"><![CDATA[<p>1.定义方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">async <span class="keyword">function</span> getIteminfo(<span class="built_in">id</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">id</span> == null) <span class="built_in">id</span> = getPara();//获取页面参数</span><br><span class="line"></span><br><span class="line">    var item_options = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> await axios(&#123;</span><br><span class="line"></span><br><span class="line">        url: dev_proxyftpname + <span class="string">&quot;/api/findOneById&quot;</span>,</span><br><span class="line"></span><br><span class="line">        method: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"></span><br><span class="line">        data: JSON.stringify(&#123; <span class="built_in">id</span>: <span class="built_in">id</span> &#125;),</span><br><span class="line"></span><br><span class="line">        headers: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="built_in">timeout</span>: 1000 * 30,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">        .<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (res.data) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (res.data.data != null) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">return</span> res.data.data;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>2.调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getIteminfo().<span class="keyword">then</span>(async res =&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (res.articleTemplateId != null) &#123;</span><br><span class="line">             await getTemplates(res.articleTemplateId).<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                 html += res.templateContent;</span><br><span class="line">                 $(<span class="string">&quot;.&quot;</span> + className).append(analysisHtml(html));</span><br><span class="line">             &#125;)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中全局变量和全局函数的使用</title>
      <link href="/2022/10/08/vue9/"/>
      <url>/2022/10/08/vue9/</url>
      
        <content type="html"><![CDATA[<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>1.直接在main.js中通过prototype定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.accessToken = <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>在页面中调用：this.accessToken<br>这种方法简单但是，当需要定义变量很多的时候，管理就很繁杂，这个时候就不宜使用。</p><span id="more"></span><p>2.定义一个通用js文件，在文件中定义通用变量（通过export default 暴露），最后引入（import）调用;</p><p>定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//universal.js</span><br><span class="line">const accessToken =<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">accessToken , </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用（可以在需要的页面引入，也可以在main.js中引入）</p><p>（1）在需要的页面直接引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123; Token &#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import universal from <span class="string">&#x27;../universal&#x27;</span> // 引入模块</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line"><span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">Token: universal.accessToken  //获取方法定义的变量</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>（2）从main.js中引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import universal from <span class="string">&#x27;../universal&#x27;</span> // 引入模块</span><br><span class="line">Vue.prototype.universal = universal</span><br></pre></td></tr></table></figure><p>后在页面调用：this.universal.accessToken</p><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><p>1.在main.js中直接定义一个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.getToken = <span class="function"><span class="title">function</span></span> () &#123;&#125;</span><br></pre></td></tr></table></figure><p>后在组件中调用：this.getToken()</p><p>2.定义一个js文件，然后挂载到main.js中</p><p>定义的js文件:universal.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*配置通用方法， 新增方法请写备注*/</span><br><span class="line">exports.install = <span class="keyword">function</span> (Vue, options) &#123;    </span><br><span class="line">    /*判断是不是图片*/</span><br><span class="line">    Vue.prototype.isImage = <span class="keyword">function</span> (fileName) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof fileName !== <span class="string">&#x27;string&#x27;</span>) <span class="built_in">return</span>;</span><br><span class="line">        <span class="built_in">let</span> name = fileName.toLowerCase();</span><br><span class="line">        <span class="built_in">return</span> name.endsWith(<span class="string">&#x27;.png&#x27;</span>) || name.endsWith(<span class="string">&#x27;.jpeg&#x27;</span>) || name.endsWith(<span class="string">&#x27;.jpg&#x27;</span>) || name.endsWith(<span class="string">&#x27;.png&#x27;</span>) || name.endsWith(<span class="string">&#x27;.bmp&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>挂载到 main.js中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Universal from <span class="string">&#x27;./assets/theme/js/universal&#x27;</span></span><br><span class="line">Vue.use(Universal)</span><br></pre></td></tr></table></figure><p>在页面中调用其中的某个方法：this.isImage(‘xxx’)</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex状态管理模式</title>
      <link href="/2022/10/08/vue8/"/>
      <url>/2022/10/08/vue8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>State：定义存储状态对象</p><p>Getter:获取到State后，对其计算返回需要的值（获取计算状态对象）</p><p>Mutation：提交更新状态对象（同步，异步使用：Action）</p><p>Action:提交一个或多个Mutation，不是直接变更状态</p><p>Module:模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p></blockquote><span id="more"></span><ol><li>定义（在main.js中）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const store = new vuex.Store(&#123;</span><br><span class="line">state: &#123;</span><br><span class="line">orderlist: &#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">mutations: &#123;</span><br><span class="line">setOrderValue(state, orderlist) &#123;</span><br><span class="line">state.orderlist = orderlist</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">getOrderValue: state =&gt; state.orderlist,</span><br><span class="line">&#125;,</span><br><span class="line">actions: &#123;</span><br><span class="line">&#125;,</span><br><span class="line">modules: &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>2.提交状态对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$store</span>.commit(<span class="string">&quot;setOrderValue&quot;</span>, <span class="string">&quot;要提交的数据&quot;</span>);</span><br></pre></td></tr></table></figure>3.获取状态对象<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var orderLists= this.<span class="variable">$store</span>.getters.getOrderValue;</span><br></pre></td></tr></table></figure>需要注意的是状态对象信息在页面刷新后就不存在了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router的封装配置</title>
      <link href="/2022/10/08/vue7/"/>
      <url>/2022/10/08/vue7/</url>
      
        <content type="html"><![CDATA[<p>1.安装（如果在创建项目的时候没有确认安装）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue-router --save</span><br></pre></td></tr></table></figure><p>之后在src下会生成一个文件夹router，这里我们删除这个文件夹。（安装好就行了，不用它的默认文件夹，我们自己封装）</p><span id="more"></span><p>2.配置</p><p>在根目录下（与main.js同级），创建routes.js文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Login from <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line">import index from <span class="string">&#x27;@/components/index&#x27;</span></span><br><span class="line"></span><br><span class="line">import Theme from <span class="string">&#x27;@/Views/Theme&#x27;</span></span><br><span class="line">import PermissionManage from <span class="string">&#x27;@/Views/PermissionManage&#x27;</span></span><br><span class="line">import MenuManage from <span class="string">&#x27;@/Views/MenuManage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default [</span><br><span class="line">    &#123; path: <span class="string">&quot;/&quot;</span>, component: Login &#125;,/*默认登录页面*/</span><br><span class="line">    &#123; path: <span class="string">&quot;/Login&quot;</span>, component: Login &#125;,/*路由跳转登录页面*/</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/index&quot;</span>, component: index, children: [</span><br><span class="line">            &#123; path: <span class="string">&quot;/&quot;</span>, component: Theme &#125;,/*二级菜单主页*/            </span><br><span class="line">            &#123; path: <span class="string">&quot;/PermissionManage&quot;</span>, component: PermissionManage &#125;,/*角色权限管理*/</span><br><span class="line">            &#123; path: <span class="string">&quot;/MenuManage&quot;</span>, component: MenuManage &#125;,/*菜单管理*/</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>文件夹目录结构：</p><p>默认主页是登录页面：Login</p><p>登录成功后进入页面：index 这个页面的构成如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">      &lt;mainheader&gt;&lt;/mainheader&gt;</span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line">        &lt;mainleft&gt;&lt;/mainleft&gt;</span><br><span class="line">        &lt;maincontent&gt;&lt;/maincontent&gt;</span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import mainheader from <span class="string">&quot;@/components/mainheader&quot;</span>;</span><br><span class="line">  import mainleft from <span class="string">&quot;@/components/mainleft&quot;</span>;</span><br><span class="line">  import maincontent from <span class="string">&quot;@/components/maincontent&quot;</span>;</span><br><span class="line">  import mainbottom from <span class="string">&quot;@/components/mainbottom&quot;</span>;</span><br><span class="line">  import &#123; navActive &#125; from <span class="string">&quot;../assets/theme/js/frame&quot;</span>;</span><br><span class="line">  <span class="built_in">export</span> default &#123;</span><br><span class="line">    inject: [<span class="string">&quot;reload&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">      var getuid = sessionStorage.getItem(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (getuid == null) &#123;</span><br><span class="line">        this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line">          path: `/`,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        this.reload();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.reload();       </span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      mainheader,</span><br><span class="line">      mainleft,</span><br><span class="line">      maincontent,</span><br><span class="line">      mainbottom,</span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">&quot;Index&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 由顶部（mainheader）、左边菜单（mainleft），内容区（maincontent）、底部（mainbottom）构成</p><p>maincontent （内容区）包含有路由容器：router-view</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="built_in">id</span>=<span class="string">&quot;maincontent&quot;</span>&gt;      </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=<span class="string">&quot;rcontent&quot;</span>&gt;</span><br><span class="line">        &lt;router-view :key=<span class="string">&quot;<span class="variable">$route</span>.fullPath&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="built_in">export</span> default &#123;&#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>左边菜单通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$router</span>.push(&#123;</span><br><span class="line"></span><br><span class="line">     path: `/` +Theme  ,</span><br><span class="line"></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>通过路由容易的渲染，便可在内容区渲染出路由名Theme这个页面，</p><p>同样的页面还有：PermissionManage、MenuManage</p><p>这些都是相对于index的子菜单或称为二级菜单；路由的表现形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path: <span class="string">&quot;/index&quot;</span>, component: index, children: [</span><br><span class="line">           &#123; path: <span class="string">&quot;/&quot;</span>, component: Theme &#125;,/*二级菜单主页*/            </span><br><span class="line">           &#123; path: <span class="string">&quot;/PermissionManage&quot;</span>, component: PermissionManage &#125;,/*角色权限管理*/</span><br><span class="line">           &#123; path: <span class="string">&quot;/MenuManage&quot;</span>, component: MenuManage &#125;,/*菜单管理*/</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>3.在main.js中引入并挂载路由</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Routes from <span class="string">&#x27;./routes.js&#x27;</span></span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">routes: Routes,</span><br><span class="line">mode: <span class="string">&quot;history&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置好路由后，除了通过router-veiw，还可通过 router-link实现路由跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例：&lt;router-link to=<span class="string">&quot;/home&quot;</span>&gt;&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue错误笔记集合</title>
      <link href="/2022/10/08/vue6/"/>
      <url>/2022/10/08/vue6/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-is-not-defined"><a href="#Vue-is-not-defined" class="headerlink" title="Vue is not defined"></a>Vue is not defined</h3><p>在使用HTML button：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>出现了错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue is not defined</span><br></pre></td></tr></table></figure><p>解决办法：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1）&lt;button <span class="built_in">type</span>=<span class="string">&quot;button&quot;</span> @click=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">2)&lt;button @click.prevent=<span class="string">&quot;login()&quot;</span>&gt;登录&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue项目渲染模式为history时刷新异常"><a href="#Vue项目渲染模式为history时刷新异常" class="headerlink" title="Vue项目渲染模式为history时刷新异常"></a>Vue项目渲染模式为history时刷新异常</h3><p>图片显示异常、以及控制台出现js引入路径错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/live2d-widget/lib/L2Dwidget.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;static/js/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">headimg: <span class="string">&quot;./static/img/head.jpg&quot;</span>,</span><br></pre></td></tr></table></figure><p>以上三个路径改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/static/live2d-widget/lib/L2Dwidget.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/static/js/fireworks.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">headimg: <span class="string">&quot;/static/img/head.jpg&quot;</span>,</span><br></pre></td></tr></table></figure><p>就可以了。<br>这是因为：</p><blockquote><p>.&#x2F;     是当前所在目录（相对路径）</p><p>&#x2F;      是项目根目录（绝对路径）</p><p>hash模式的根路径即项目的根目录，是固定的，而history模式以&#x2F;开头的路径会被当做是根路径，所以以 .&#x2F; 在hisorty模式下引入文件自然是无效的。</p></blockquote><p>所以，其实无论是哪种模式，只要以    &#x2F;    引入静态文件都是可以的。</p><h3 id="nginx配置的网页刷新-404"><a href="#nginx配置的网页刷新-404" class="headerlink" title="nginx配置的网页刷新 404"></a>nginx配置的网页刷新 404</h3><p>如果我们在nginx下添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html</span><br></pre></td></tr></table></figure><p>刷新虽然没有出现404，但是页面还是没有正常显示（白屏），打开控制台发现以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught SyntaxError:Unexpected token &lt;</span><br></pre></td></tr></table></figure><p>这是由于：nginx配置与代码静态资源打包方式不匹配</p><p>需要修改：</p><p>index.js下build节点中以下属性改为绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assetsPublicPath:<span class="string">&#x27;/&#x27;</span>,</span><br></pre></td></tr></table></figure><p>这样刷新就正常了。</p><h3 id="ue-cli-·-Failed-to-download-repo-vuejs-templates-x2F-webpack-connect-ECONNREFUSED-127-0-0-1-443"><a href="#ue-cli-·-Failed-to-download-repo-vuejs-templates-x2F-webpack-connect-ECONNREFUSED-127-0-0-1-443" class="headerlink" title="ue-cli · Failed to download repo vuejs-templates&#x2F;webpack: connect ECONNREFUSED 127.0.0.1:443"></a>ue-cli · Failed to download repo vuejs-templates&#x2F;webpack: connect ECONNREFUSED 127.0.0.1:443</h3><p>创建一个新的vue项目（vue init webpack “项目名称”）时 出现以上错误提示。<br>有想过重新安装webpack，可能安装后会增加或修改一些配置信息。<br>但实际上我现在还在用webpack打包项目呢，所以问题不是在这。</p><p>与此同时ping github.com 不通，所以问题点大概是访问不了github导致的。<br>于是查阅资料，做了一些配置就能成功创建vue项目了。</p><p>当然是为了帮助访问github用的，下面就是我本次的配置方法（同时也将是访问不了github网站时的推荐方案）；</p><!--more--><p>1.点击左下角的window图标》搜索“记事本”</p><blockquote><p>这里我们不直接打开，而是：<br>右键》以管理员身份运行；<br>因为接下来我们将要修改的文件需要以管理员身份才能修改成功。</p></blockquote><p>2.点击记事本“文件”》打开</p><blockquote><p>在文件弹窗的顶部可操作文件地址框中输入：<br>C:\Windows\System32\drivers\etc<br>然后回车</p></blockquote><p>这里我的win10电脑下是空的，不着急；我们将文件弹窗右下角的选择项由“文本文档”调整为“所有文件”；发现多了包括hosts在内的几个文件；<br>如果是win7能直接看到hosts.txt文件；</p><p>3.双击hosts(.txt)，在文档的末尾添加以下内容</p><blockquote><p>192.30.255.112 github.com git<br>185.31.16.184 github.global.ssl.fastly.net </p></blockquote><p>最后保存。</p><p>接下来就是验证我们的配置是否解决了问题；</p><h2 id="在cmd中输入：ping-github-com-（OK）"><a href="#在cmd中输入：ping-github-com-（OK）" class="headerlink" title="在cmd中输入：ping github.com    （OK）"></a>在cmd中输入：ping github.com    （OK）</h2><h2 id="新建vue项目：vue-init-webpack-“项目名称”-（OK）"><a href="#新建vue项目：vue-init-webpack-“项目名称”-（OK）" class="headerlink" title="新建vue项目：vue init webpack “项目名称”  （OK）"></a>新建vue项目：vue init webpack “项目名称”  （OK）</h2>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cnpm 安装指定版本的脚手架vue-cli</title>
      <link href="/2022/10/08/vue5/"/>
      <url>/2022/10/08/vue5/</url>
      
        <content type="html"><![CDATA[<p>1.安装npm</p><p>去Node.js官网下载安装Node.js，npm也就安装上了。</p><p>2.安装国内淘宝镜像，以后就可以通过cnpm代替npm指令，使用国内源，执行效率更高：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><span id="more"></span><p>3.安装vue-cli指定的版本</p><p>（1）.查询脚手架版本列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view vue-cli versions --json</span><br></pre></td></tr></table></figure><p>（2）.安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-cli@2.9.6 --save</span><br></pre></td></tr></table></figure><h3 id="安装指定版本模块：cnpm-install-g-模块-版本号-–save"><a href="#安装指定版本模块：cnpm-install-g-模块-版本号-–save" class="headerlink" title="安装指定版本模块：cnpm install -g 模块@版本号 –save"></a>安装指定版本模块：cnpm install -g 模块@版本号 –save</h3>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli更新</title>
      <link href="/2022/10/08/vue4/"/>
      <url>/2022/10/08/vue4/</url>
      
        <content type="html"><![CDATA[<p>1.卸载旧版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g  </span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">yarn global remove vue-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p>2.安装新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">yarn global add@vue/cli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中引入Jquery</title>
      <link href="/2022/10/08/vue3/"/>
      <url>/2022/10/08/vue3/</url>
      
        <content type="html"><![CDATA[<p>1.首先在依赖中填写要引入jquery版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;@babel/polyfill&quot;</span>: <span class="string">&quot;^7.12.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;ant-design-vue&quot;</span>: <span class="string">&quot;^1.6.5&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;axios&quot;</span>: <span class="string">&quot;^0.20.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;^2.13.2&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;hexo-helper-live2d&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;view-design&quot;</span>: <span class="string">&quot;^4.4.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;^2.5.2&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-axios&quot;</span>: <span class="string">&quot;^3.1.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-resource&quot;</span>: <span class="string">&quot;^1.5.1&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.4.7&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;wangeditor&quot;</span>: <span class="string">&quot;^4.7.10&quot;</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>  <span id="more"></span><p>  “jquery”: “^3.6.0”–这就是要引入的Jquery及版本</p><ol start="2"><li>在build文件夹下的webpack.base.conf.js文件中加入以下代码    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line"></span><br><span class="line">    new webpack.ProvidePlugin(&#123;</span><br><span class="line"></span><br><span class="line">      jQuery: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line"></span><br><span class="line">      $: <span class="string">&quot;jquery&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在main.js中引入（全局）jquery<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import $ from <span class="string">&#x27;jquery&#x27;</span></span><br></pre></td></tr></table></figure>注意因为第二步已经使用了jquery，不需要用在main.js中 使用vue.use()，否则：</li></ol><h3 id="vue-cil-浏览器控制台报错：this-init-is-not-a-function"><a href="#vue-cil-浏览器控制台报错：this-init-is-not-a-function" class="headerlink" title="vue-cil 浏览器控制台报错：this._init is not a function"></a>vue-cil 浏览器控制台报错：this._init is not a function</h3><ol start="4"><li>最后就是运行项目。cmd里面安装依赖了：</li></ol><h3 id="npm-install-–save-jquery"><a href="#npm-install-–save-jquery" class="headerlink" title="npm install –save jquery"></a>npm install –save jquery</h3><p>如果有淘宝镜像就使用命令：</p><h3 id="cnpm-install-–save-jquery"><a href="#cnpm-install-–save-jquery" class="headerlink" title="cnpm install –save jquery"></a>cnpm install –save jquery</h3><p>至此，就可以使用jquery了，$这个符号也能被识别了。</p>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 打包后图片显示，或因为路径原因，显示白屏？</title>
      <link href="/2022/10/08/vue2/"/>
      <url>/2022/10/08/vue2/</url>
      
        <content type="html"><![CDATA[<p>打包后由于路径不对，导致资源文件加载不到，需要调整：</p><p>1.config&#x2F;index.js 修改以下两个地方</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">1).</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">dev:&#123;</span><br><span class="line"></span><br><span class="line">// Paths</span><br><span class="line"></span><br><span class="line">assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line"></span><br><span class="line">// assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,/*调试*/</span><br><span class="line"></span><br><span class="line">assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,/*发布*/</span><br><span class="line"></span><br><span class="line">proxyTable: &#123;</span><br><span class="line"></span><br><span class="line">changeOrigin: <span class="literal">true</span>,/*允许跨域*/</span><br><span class="line"></span><br><span class="line">\&quot;/api\&quot;: &#123;</span><br><span class="line"></span><br><span class="line">target:\&quot;https://www.romanticlife.top\&quot;,</span><br><span class="line"></span><br><span class="line">// target:\&quot;http://localhost:8090\&quot;,</span><br><span class="line"></span><br><span class="line">secure:<span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">pathRewrite: &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">build: &#123;</span><br><span class="line"></span><br><span class="line">// Template <span class="keyword">for</span> index.html</span><br><span class="line"></span><br><span class="line">index: path.resolve(__dirname, <span class="string">&#x27;../dist/index.html&#x27;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Paths</span><br><span class="line"></span><br><span class="line">assetsRoot: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line"></span><br><span class="line">assetsSubDirectory: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line"></span><br><span class="line">// assetsPublicPath: <span class="string">&#x27;/&#x27;</span>,/*调试*/</span><br><span class="line"></span><br><span class="line">assetsPublicPath: <span class="string">&#x27;./&#x27;</span>,/*发布*/</span><br></pre></td></tr></table></figure><p>一般来说第一步就能解决问题，如果还不行就继续以下步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2.build/webpack.prod.conf.js</span><br><span class="line">在output中添加publicPath:<span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"></span><br><span class="line">3.build/utils.js</span><br><span class="line">51行---修改为 publicPath:<span class="string">&#x27;../../&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装axios，添加拦截器</title>
      <link href="/2022/09/29/vue1/"/>
      <url>/2022/09/29/vue1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装axios"><a href="#1-安装axios" class="headerlink" title="1.安装axios"></a>1.安装axios</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h3 id="2-封装axios"><a href="#2-封装axios" class="headerlink" title="2.封装axios"></a>2.封装axios</h3><p>在src下新建文件夹：axios，添加http.js，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import axios from <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default axios</span><br><span class="line">/* post 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> post(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.post(url, data)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* get 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> get(url, params = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios</span><br><span class="line">            .get(url, &#123;</span><br><span class="line">                params: params</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;* patch 请求方法 *&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> patch(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.patch(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* put 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> put(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.put(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-从main-js引入，并加入拦截器"><a href="#3-从main-js引入，并加入拦截器" class="headerlink" title="3.从main.js引入，并加入拦截器"></a>3.从main.js引入，并加入拦截器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import http from <span class="string">&quot;./axios/http&quot;</span>//封装axios方法:post,get,patch,put</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$post</span> = http.post</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$get</span> = http.get</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$patch</span> = http.patch</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$put</span> = http.put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********配置axios--begin***********/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//基础参数</span><br><span class="line"></span><br><span class="line">Axios.create(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">timeout</span>: 1000 * 30,</span><br><span class="line"></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加请求拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.request.use(<span class="keyword">function</span> (config) &#123;</span><br><span class="line"></span><br><span class="line">  config.headers = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> config;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(error);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.response.use(<span class="keyword">function</span> (res) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res.status === 200) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res.data.code == <span class="string">&quot;5002&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">      Message(res.data.msg);</span><br><span class="line"></span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        router.push(&#123;</span><br><span class="line"></span><br><span class="line">          path: `/`,</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;, 2000);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> res;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> Message.error(res.statusText);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  const status =</span><br><span class="line"></span><br><span class="line">    (error.response &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status) ||</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  var msg = <span class="string">&#x27;未知错误&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line"></span><br><span class="line">    error.code == <span class="string">&#x27;ECONNABORTED&#x27;</span> &amp;&amp;</span><br><span class="line"></span><br><span class="line">    error.message.indexOf(<span class="string">&#x27;timeout&#x27;</span>) != -1</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;请求超时...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 404)</span><br><span class="line"></span><br><span class="line">    msg = error.response.data.path + <span class="string">&#x27; 接口404报错。&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 500)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;网络已断开或服务器错误...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 504)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;数据响应超时，请重新登录操作...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Message(msg);</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line"></span><br><span class="line">  //控制台打印错误</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(msg);</span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/***********配置axios--end***********/</span><br></pre></td></tr></table></figure><h3 id="4-调用"><a href="#4-调用" class="headerlink" title="4.调用"></a>4.调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">selectinfo</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  this.<span class="variable">$post</span>(</span><br><span class="line"></span><br><span class="line">   apiUrl,</span><br><span class="line"></span><br><span class="line">    JSON.stringify(this.selectParameters)</span><br><span class="line"></span><br><span class="line">  ).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    this.selectParameters.totalElements = res.data.data.totalElements;</span><br><span class="line"></span><br><span class="line">    this.listinfo =res.data.data.list;</span><br><span class="line"></span><br><span class="line">  &#125;).catch(err=&gt;&#123;console.log(err)&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习之路 - Processes</title>
      <link href="/2022/09/28/electron1/"/>
      <url>/2022/09/28/electron1/</url>
      
        <content type="html"><![CDATA[<h4> 阅读本文前建议先看：<a href="https://www.romanticlife.top/blog/0/236" title="" target="">基础教程</a></h4><h4> 你也可以查看：<a href="https://www.electronjs.org/zh/docs/latest/tutorial/process-model" title="" target="">官网资料</a></h4><h3 id="进程模型"><a href="#进程模型" class="headerlink" title="进程模型"></a>进程模型</h3><p>Electron从Chromium继承了它的多进程架构，这使得该框架在架构上非常类似于现代web浏览器。本文将扩展 <a href="https://www.romanticlife.top/blog/0/236" title="" target="">教程</a> 中应用的概念。<br>为什么不是单进程》？</p><p>Web浏览器是非常复杂的应用程序。除了显示网页内容的主要功能之外，他们还有许多次要职责，比如管理多个窗口(或标签)和加载第三方扩展。</p><p>在早期，浏览器通常使用一个进程来实现所有这些功能。虽然这种模式意味着你打开的每个标签的开销更小，但它也意味着一个网站的崩溃或挂起会影响整个浏览器。</p><span id="more"></span><h3 id="多进程模型"><a href="#多进程模型" class="headerlink" title="多进程模型"></a>多进程模型</h3><p>为了解决这个问题，Chrome团队决定每个标签将在自己的过程中呈现，以限制网页上的漏洞或恶意代码可能对整个应用程序造成的伤害。然后，一个单一的浏览器进程控制这些进程，以及应用程序的整个生命周期。</p><p>Electron应用的结构与此非常相似。</p><p>作为一个应用程序开发者，你控制两种类型的进程:main和renderer。</p><p>这些过程类似于Chrome自己的浏览器及其渲染过程。</p><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h3><p>每个Electron应用程序都有一个单独的主进程，它充当应用程序的入口点。主进程运行在Node.js环境中，这意味着它能够require模块并使用所有Node.js api。</p><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><p>主进程的主要目的是使用 <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" title="" target="">BrowserWindow</a> 模块创建和管理应用程序窗口。</p><p>BrowserWindow类的每个实例都会创建一个应用程序窗口，在一个单独的渲染进程中加载一个网页。你可以在主进程中使用窗口的 <a href="https://www.electronjs.org/zh/docs/latest/api/web-contents" title="" target="">webContents</a> 对象与这些web内容进行交互。</p><blockquote><p>main.js</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const &#123; BrowserWindow &#125; = require(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const win = new BrowserWindow(&#123; width: 800, height: 1500 &#125;)</span><br><span class="line">win.loadURL(<span class="string">&#x27;https://github.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">const contents = win.webContents</span><br><span class="line">console.log(contents)</span><br></pre></td></tr></table></figure><p>注意:渲染器进程也会为  <a href="https://www.electronjs.org/zh/docs/latest/tutorial/web-embeds" title="" target="">web embeds</a> 创建，比如BrowserView模块。webContents对象也可以访问嵌入的web内容。</p><p>因为BrowserWindow模块是一个  <a href="https://nodejs.org/api/events.html#events_class_eventemitter" title="" target="">EventEmitter</a> ，您还可以为各种用户事件添加处理程序(例如，最小化或最大化窗口)。</p><p>当BrowserWindow实例被销毁时，它对应的渲染进程也会终止。</p><h3 id="应用的声明周期"><a href="#应用的声明周期" class="headerlink" title="应用的声明周期"></a>应用的声明周期</h3><p>主进程还通过Electron的 <a href="https://www.electronjs.org/zh/docs/latest/api/app" title="" target="">app</a> 模块控制应用程序的生命周期。此模块提供了大量事件和方法，您可以使用它们来添加自定义应用程序行为(例如，以编程方式退出应用程序、修改应用程序停靠或显示关于面板)。</p><p>作为一个实际的例子，在快速入门指南中显示的应用程序使用应用程序api来创建一个更原生的应用程序窗口体验。</p><h3 id="VUE项目js-base64不兼容IE"><a href="#VUE项目js-base64不兼容IE" class="headerlink" title="VUE项目js-base64不兼容IE"></a>VUE项目js-base64不兼容IE</h3><p>一般我们直接通过指令：</p><blockquote><p>npm install –save js-base64 </p></blockquote><p>安装base64插件，但是是默认安装高版本（3或以上），它的问题就是不兼容ie11</p><p>解决办法：</p><p>1）卸载已经安装的base64插件（未安装则跳过此步）</p><blockquote><p>npm uninstall js-base64</p></blockquote><p>2）安装指定版本（安装2.x.x版本）</p><blockquote><p>npm install <a href="mailto:&#x6a;&#115;&#45;&#98;&#x61;&#x73;&#101;&#x36;&#x34;&#64;&#x32;&#46;&#x36;&#46;&#x32;">&#x6a;&#115;&#45;&#98;&#x61;&#x73;&#101;&#x36;&#x34;&#64;&#x32;&#46;&#x36;&#46;&#x32;</a> –save</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端返回的数据会带一个换行符（“↵”），前端如何根据该符号进行换行展示</title>
      <link href="/2022/09/28/html1/"/>
      <url>/2022/09/28/html1/</url>
      
        <content type="html"><![CDATA[<h3 id="方法一：textarea赋值"><a href="#方法一：textarea赋值" class="headerlink" title="方法一：textarea赋值"></a>方法一：textarea赋值</h3><p>　　当我们拿到后端返回的数据时，直接通过v-model绑定给textarea，就会有默认的换行，但是它不能随内容高度增加textarea高度实现自适应，如果用JS来实现的话，相对麻烦一点。</p><h3 id="方法二：使用v-html输出文本"><a href="#方法二：使用v-html输出文本" class="headerlink" title="方法二：使用v-html输出文本"></a>方法二：使用v-html输出文本</h3><p>　　“↵”符号在html中会识别别为\r,\n等转义字符，所以我们可以使用\r\n去替换（.replace(&#x2F;(\r\n|\n|\r)&#x2F;gm, ‘ &lt; br &#x2F;&gt; ‘)）</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &lt;span v-html=<span class="string">&quot;detail.replace(/(\r\n|\n|\r)/gm, &#x27;&lt;br /&gt;&#x27;)&quot;</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
