<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>封装axios，添加拦截器</title>
      <link href="/2022/09/29/vue1/"/>
      <url>/2022/09/29/vue1/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读本文前建议先看官网教程"><a href="#阅读本文前建议先看官网教程" class="headerlink" title="阅读本文前建议先看官网教程"></a>阅读本文前建议先看官网教程</h2><p>1.安装axios</p><p>npm install axios</p><p>2.封装axios</p><p>在src下新建文件夹：axios，添加http.js，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import axios from <span class="string">&quot;axios&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default axios</span><br><span class="line">/* post 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> post(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.post(url, data)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* get 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> get(url, params = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios</span><br><span class="line">            .get(url, &#123;</span><br><span class="line">                params: params</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="keyword">then</span>(res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;* patch 请求方法 *&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> patch(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.patch(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* put 请求方法 */</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> put(url, data = &#123;&#125;) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        axios.put(url, data).<span class="keyword">then</span>(</span><br><span class="line">            res =&gt; &#123;</span><br><span class="line">                resolve(res)</span><br><span class="line">            &#125;,</span><br><span class="line">            err =&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.从main.js引入，并加入拦截器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import http from <span class="string">&quot;./axios/http&quot;</span>//封装axios方法:post,get,patch,put</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$post</span> = http.post</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$get</span> = http.get</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$patch</span> = http.patch</span><br><span class="line"></span><br><span class="line">Vue.prototype.<span class="variable">$put</span> = http.put</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********配置axios--begin***********/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//基础参数</span><br><span class="line"></span><br><span class="line">Axios.create(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">timeout</span>: 1000 * 30,</span><br><span class="line"></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加请求拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.request.use(<span class="keyword">function</span> (config) &#123;</span><br><span class="line"></span><br><span class="line">  config.headers = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> config;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(error);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加响应拦截器</span><br><span class="line"></span><br><span class="line">Axios.interceptors.response.use(<span class="keyword">function</span> (res) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res.status === 200) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res.data.code == <span class="string">&quot;5002&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">      Message(res.data.msg);</span><br><span class="line"></span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        router.push(&#123;</span><br><span class="line"></span><br><span class="line">          path: `/`,</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;, 2000);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> res;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> Message.error(res.statusText);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="keyword">function</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  const status =</span><br><span class="line"></span><br><span class="line">    (error.response &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status &amp;&amp;</span><br><span class="line"></span><br><span class="line">      error.response.status) ||</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  var msg = <span class="string">&#x27;未知错误&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line"></span><br><span class="line">    error.code == <span class="string">&#x27;ECONNABORTED&#x27;</span> &amp;&amp;</span><br><span class="line"></span><br><span class="line">    error.message.indexOf(<span class="string">&#x27;timeout&#x27;</span>) != -1</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;请求超时...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 404)</span><br><span class="line"></span><br><span class="line">    msg = error.response.data.path + <span class="string">&#x27; 接口404报错。&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 500)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;网络已断开或服务器错误...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (status === 504)</span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&#x27;数据响应超时，请重新登录操作...&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  Message(msg);</span><br><span class="line"></span><br><span class="line">  /*</span><br><span class="line"></span><br><span class="line">  //控制台打印错误</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> Promise.reject(msg);</span><br><span class="line"></span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/***********配置axios--end***********/</span><br></pre></td></tr></table></figure><p>4.调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">selectinfo</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  this.<span class="variable">$post</span>(</span><br><span class="line"></span><br><span class="line">   apiUrl,</span><br><span class="line"></span><br><span class="line">    JSON.stringify(this.selectParameters)</span><br><span class="line"></span><br><span class="line">  ).<span class="keyword">then</span>((res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    this.selectParameters.totalElements = res.data.data.totalElements;</span><br><span class="line"></span><br><span class="line">    this.listinfo =res.data.data.list;</span><br><span class="line"></span><br><span class="line">  &#125;).catch(err=&gt;&#123;console.log(err)&#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron学习之路 - Processes</title>
      <link href="/2022/09/28/electron1/"/>
      <url>/2022/09/28/electron1/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读本文前建议先看教程"><a href="#阅读本文前建议先看教程" class="headerlink" title="阅读本文前建议先看教程"></a>阅读本文前建议先看教程</h2><p>进程模型<br>Electron从Chromium继承了它的多进程架构，这使得该框架在架构上非常类似于现代web浏览器。本文将扩展教程中应用的概念。<br>为什么不是单进程》？</p><p>Web浏览器是非常复杂的应用程序。除了显示网页内容的主要功能之外，他们还有许多次要职责，比如管理多个窗口(或标签)和加载第三方扩展。</p><p>在早期，浏览器通常使用一个进程来实现所有这些功能。虽然这种模式意味着你打开的每个标签的开销更小，但它也意味着一个网站的崩溃或挂起会影响整个浏览器。</p><p>多进程模型》</p><p>为了解决这个问题，Chrome团队决定每个标签将在自己的过程中呈现，以限制网页上的漏洞或恶意代码可能对整个应用程序造成的伤害。然后，一个单一的浏览器进程控制这些进程，以及应用程序的整个生命周期。</p><p>Electron应用的结构与此非常相似。</p><p>作为一个应用程序开发者，你控制两种类型的进程:main和renderer。</p><p>这些过程类似于Chrome自己的浏览器及其渲染过程。</p><p>主进程》</p><p>每个Electron应用程序都有一个单独的主进程，它充当应用程序的入口点。主进程运行在Node.js环境中，这意味着它能够require模块并使用所有Node.js api。</p><p>窗口管理》</p><p>主进程的主要目的是使用BrowserWindow模块创建和管理应用程序窗口。</p><p>BrowserWindow类的每个实例都会创建一个应用程序窗口，在一个单独的渲染进程中加载一个网页。你可以在主进程中使用窗口的webContents对象与这些web内容进行交互。</p><p>main.js</p><p>const { BrowserWindow } &#x3D; require(‘electron’)</p><p>const win &#x3D; new BrowserWindow({ width: 800, height: 1500 })<br>win.loadURL(‘<a href="https://github.com&/#39;">https://github.com&#39;</a>)</p><p>const contents &#x3D; win.webContents<br>console.log(contents)<br>注意:渲染器进程也会为 web embeds创建，比如BrowserView模块。webContents对象也可以访问嵌入的web内容。</p><p>因为BrowserWindow模块是一个 EventEmitter，您还可以为各种用户事件添加处理程序(例如，最小化或最大化窗口)。</p><p>当BrowserWindow实例被销毁时，它对应的渲染进程也会终止。</p><p>应用的声明周期》</p><p>主进程还通过Electron的app模块控制应用程序的生命周期。此模块提供了大量事件和方法，您可以使用它们来添加自定义应用程序行为(例如，以编程方式退出应用程序、修改应用程序停靠或显示关于面板)。</p><p>作为一个实际的例子，在快速入门指南中显示的应用程序使用应用程序api来创建一个更原生的应用程序窗口体验。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端返回的数据会带一个换行符（“↵”），前端如何根据该符号进行换行展示</title>
      <link href="/2022/09/28/html1/"/>
      <url>/2022/09/28/html1/</url>
      
        <content type="html"><![CDATA[<p>方法一：textarea赋值</p><p>　　当我们拿到后端返回的数据时，直接通过v-model绑定给textarea，就会有默认的换行，但是它不能随内容高度增加textarea高度实现自适应，如果用JS来实现的话，相对麻烦一点。</p><p>方法二：使用v-html输出文本</p><p>　　“↵”符号在html中会识别别为\r,\n等转义字符，所以我们可以使用\r\n去替换（.replace(&#x2F;(\r\n|\n|\r)&#x2F;gm, ‘ &lt; br &#x2F;&gt; ‘)）</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ &lt;span v-html=<span class="string">&quot;detail.replace(/(\r\n|\n|\r)/gm, &#x27;&lt;br /&gt;&#x27;)&quot;</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/26/hello-world/"/>
      <url>/2022/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
